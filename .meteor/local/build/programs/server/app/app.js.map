{"version":3,"sources":["meteor://ğŸ’»app/imports/api/msgs.js","meteor://ğŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAM,sBAAO,IAAI,aAAM,UAAN,CAAiB,MAArB,CAAP;AACb,IAAI,eAAO,QAAP,EAAiB;AACnB,iBAAO,OAAP,CAAe,MAAf;AAAuB,aAAS,eAAT,GAA2B;AAChD,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAE,aAAa,KAAK,MAAL,EADZ,EAEH,EAAE,eAAe,KAAK,MAAL,EAFd,CAAL;OADK,CAAP,CADgD;KAA3B;;WAAS;KAAhC,EADmB;AASnB,iBAAO,OAAP,CAAe,UAAf;AAA2B,aAAS,mBAAT,CAA6B,SAA7B,EAAwC;AACjE,cAAQ,GAAR,CAAY,SAAZ,EAAsB,kBAAtB,EADiE;AAEjE,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAC,aAAa,KAAK,MAAL,EAAa,eAAe,SAAf,EADxB,EAEH,EAAC,aAAa,SAAb,EAAwB,eAAe,KAAK,MAAL,EAFrC,CAAL;OADK,CAAP,CAFiE;KAAxC;;WAAS;KAApC,EATmB;CAArB;;AAoBA,eAAO,OAAP,CAAe;AACb;wBAAc,MAAM,QAAQ;AAC1B,wBAAM,IAAN,EAAY,MAAZ,EAD0B;;AAG1B,UAAI,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;;AAIA,WAAK,MAAL,CAAY;AACV,gBAAQ;AACN,cAAI,eAAO,MAAP,EAAJ;AACA,gBAAM,eAAO,IAAP,GAAc,QAAd;SAFR;AAIA,kBAAU,MAAV;AACA,iBAAS,IAAT;AACA,cAAM,IAAI,IAAJ,EAAN;AACA,kBAAU,IAAV;OARF,EAP0B;;;;KADf;AAoBb;2BAAiB,KAAK;AACpB,wBAAM,GAAN,EAAW,MAAX,EADoB;AAEpB,UAAI,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;AAGA,WAAK,MAAL,CAAY,GAAZ,EAAiB,EAAE,MAAM,EAAE,UAAU,KAAV,EAAR,EAAnB,EALoB;;;;KApBT;CAAf,6E;;;;;;;;;;;ACzBA;;AACA;;AACA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,4E","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Msgs = new Mongo.Collection('msgs')\nif (Meteor.isServer) {\n  Meteor.publish('msgs', function msgsPublication() {\n    return Msgs.find({\n      $or: [\n        { 'sender.id': this.userId },\n        { 'recevier.id': this.userId },\n      ],\n    })\n  })\n  Meteor.publish('chatMsgs', function chatMsgsPublication(friend_id) {\n    console.log(friend_id,'asdsadsdsadasdas')\n    return Msgs.find({\n      $or: [\n        {'sender.id': this.userId, 'recevier.id': friend_id}, \n        {'sender.id': friend_id, 'recevier.id': this.userId}\n      ] \n    })\n  })\n}\n \nMeteor.methods({\n  'msgs.insert'(text, friend) {\n    check(text, String)\n\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n\n    Msgs.insert({\n      sender: {\n        id: Meteor.userId(),\n        name: Meteor.user().username\n      },\n      recevier: friend,\n      content: text,\n      time: new Date(),\n      isUnread: true\n    })\n  },\n  \n  'msgs.setUnread'(_id) {\n    check(_id, String)\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n    Msgs.update(_id, { $set: { isUnread: false } })\n  }\n})","import { Meteor } from 'meteor/meteor'\nimport '../imports/api/msgs.js'\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}