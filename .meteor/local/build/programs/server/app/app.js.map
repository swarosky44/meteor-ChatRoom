{"version":3,"sources":["meteor://ğŸ’»app/imports/api/msgs.js","meteor://ğŸ’»app/imports/api/tasks.js","meteor://ğŸ’»app/imports/api/users.js","meteor://ğŸ’»app/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Msgs = new Mongo.Collection('msgs');\nif (Meteor.isServer) {\n  Meteor.publish('msgs', function msgsPublication() {\n    return Msgs.find({\n      $or: [\n        { 'sender.id': this.userId },\n        { 'recevier.id': this.userId },\n      ],\n    })\n  })\n  Meteor.publish('chatMsgs', function chatMsgsPublication(friend_id) {\n    console.log(friend_id,'asdsadsdsadasdas')\n    return Msgs.find({\n      $or: [\n        {'sender.id': this.userId, 'recevier.id': friend_id}, \n        {'sender.id': friend_id, 'recevier.id': this.userId}\n      ] \n    })\n  })\n}\n \nMeteor.methods({\n  'msgs.insert'(text, friend) {\n    check(text, String)\n\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n\n    Msgs.insert({\n      sender: {\n        id: Meteor.userId(),\n        name: Meteor.user().username\n      },\n      recevier: friend,\n      content: text,\n      time: new Date(),\n      isUnread: true\n    })\n  },\n  'msgs.setUnread'(_id) {\n    check(_id, String)\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n    Msgs.update(_id, { $set: { isUnread: false } })\n  }\n})","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only return public tasks and private tasks belong to owner\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n} \nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n \n    const task = Tasks.findOne(taskId);\n \n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});","import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Users = Meteor.users;\nif (Meteor.isServer) {\n  Meteor.publish('users', function usersPublication() {\n    return Users.find({})\n  })\n  Meteor.publish('findUser', function findUserPublication(u_id) {\n    return Users.find({\n      _id: u_id\n    });\n  })\n} \n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/tasks.js';\nimport '../imports/api/msgs.js';\nimport '../imports/api/users.js';\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}