{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/server_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js","meteor://ðŸ’»app/packages/accounts-base/accounts_rate_limit.js","meteor://ðŸ’»app/packages/accounts-base/accounts_server.js","meteor://ðŸ’»app/packages/accounts-base/url_server.js"],"names":[],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsServer} from \"./accounts_server.js\";\nimport \"./accounts_rate_limit.js\";\nimport \"./url_server.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the server version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsServer\n};\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsCommon} from \"./accounts_common.js\";\n\nvar Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId;\n// Removes default rate limiting rule\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n};\n\n// Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword',\n          'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n","var crypto = Npm.require('crypto');\n\nimport {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method. In theory, it\n    // could also be called from publish statements, since they also\n    // have a userId associated with them. However, given that publish\n    // functions aren't reactive, using any of the infomation from\n    // Meteor.user() in a publish function will always use the value\n    // from when the function first runs. This is likely not what the\n    // user expects. The way to make this work in a publish is to do\n    // Meteor.find(this.userId).observe and recompute when the user\n    // record changes.\n    var currentInvocation = DDP._CurrentInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls. Use this.userId in publish functions.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n};\n\nvar Ap = AccountsServer.prototype;\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    }\n    catch (e) {\n      attempt.allowed = false;\n      // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n      attempt.error = e;\n      return true;\n    }\n    if (! ret) {\n      attempt.allowed = false;\n      // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n      if (!attempt.error)\n        attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n    return true;\n  });\n};\n\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\n\n///\n/// LOGIN METHODS\n///\n\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n\n\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\nvar tryLoginMethod = function (type, fn) {\n  var result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\n\n// Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (! stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n    self._insertLoginToken(userId, stampedLoginToken);\n  }\n\n  // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(\n      userId,\n      methodInvocation.connection,\n      self._hashLoginToken(stampedLoginToken.token)\n    );\n  });\n\n  methodInvocation.setUserId(userId);\n\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n};\n\n\n// After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\nAp._attemptLogin = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  if (!result)\n    throw new Error(\"result is required\");\n\n  // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n  if (!result.userId && !result.error)\n    throw new Error(\"A login method must specify a userId or an error\");\n\n  var user;\n  if (result.userId)\n    user = this.users.findOne(result.userId);\n\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !! (result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error)\n    attempt.error = result.error;\n  if (user)\n    attempt.user = user;\n\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(\n      this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      ),\n      result.options || {}\n    );\n    this._successfulLogin(methodInvocation.connection, attempt);\n    return ret;\n  }\n  else {\n    this._failedLogin(methodInvocation.connection, attempt);\n    throw attempt.error;\n  }\n};\n\n\n// All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\nAp._loginMethod = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  type,\n  fn\n) {\n  return this._attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    tryLoginMethod(type, fn)\n  );\n};\n\n\n// Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\nAp._reportLoginFailure = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n  this._failedLogin(methodInvocation.connection, attempt);\n\n  // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n  return attempt;\n};\n\n\n///\n/// LOGIN HANDLERS\n///\n\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\nAp.registerLoginHandler = function (name, handler) {\n  if (! handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n};\n\n\n// Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n\n    var result = tryLoginMethod(\n      handler.name,\n      function () {\n        return handler.handler.call(methodInvocation, options);\n      }\n    );\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n};\n\n// Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { hashedToken: loginToken },\n          { token: loginToken }\n        ]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this;\n\n  // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n  var methods = {};\n\n  // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n  methods.login = function (options) {\n    var self = this;\n\n    // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n    accounts._setLoginToken(this.userId, this.connection, null);\n    if (token && this.userId)\n      accounts.destroyToken(this.userId, token);\n    this.setUserId(null);\n  };\n\n  // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n      var newToken = accounts._generateStampedLoginToken();\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 :\n                        CONNECTION_CLOSE_DELAY_MS);\n      // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  };\n\n  // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: { \"services.resume.loginTokens\": 1 }\n    });\n    if (! self.userId || ! user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n    var currentStampedToken = _.find(\n      user.services.resume.loginTokens,\n      function (stampedToken) {\n        return stampedToken.hashedToken === currentHashedToken;\n      }\n    );\n    if (! currentStampedToken) { // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n    var newStampedToken = accounts._generateStampedLoginToken();\n    newStampedToken.when = currentStampedToken.when;\n    accounts._insertLoginToken(self.userId, newStampedToken);\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  };\n\n  // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n  methods.removeOtherTokens = function () {\n    var self = this;\n    if (! self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    var currentToken = accounts._getLoginToken(self.connection.id);\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n      }\n    });\n  };\n\n  // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({service: String}));\n    // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n    if (!(accounts.oauth\n          && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({service: options.service}))\n      throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n\n    if (_.has(options, \"secret\") && usingOAuthEncryption())\n      options.secret = OAuthEncryption.seal(options.secret);\n\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this;\n\n  // Publish all login service configuration fields other than secret.\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n  }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n  // Publish the current user's record to the client.\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  }, /*suppress autopublish warning*/{is_auto: true});\n\n  // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    }, /*suppress autopublish warning*/{is_auto: true});\n\n    // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: { $ne: this.userId }\n      } : {};\n\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    }, /*suppress autopublish warning*/{is_auto: true});\n  });\n};\n\n// Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(\n    this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n  this._autopublishFields.otherUsers.push.apply(\n    this._autopublishFields.otherUsers, opts.forOtherUsers);\n};\n\n///\n/// ACCOUNT DATA\n///\n\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId];\n\n  // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n  if (!data)\n    return;\n\n  if (value === undefined)\n    delete data[field];\n  else\n    data[field] = value;\n};\n\n\n///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n};\n\n\n// {token, when} => {hashedToken, when}\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n};\n\n\n// Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n};\n\n\n// Exported for tests.\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(\n    userId,\n    this._hashStampedToken(stampedToken),\n    query\n  );\n};\n\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n};\n\n// test hook\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n};\n\n// Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n};\n\n// newToken is a hashed token.\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser;\n      // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, { fields: { _id: 1 } }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close();\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      });\n\n      // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (! foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}\n\n// Login handler for resume tokens.\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  var user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    });\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  var oldUnhashedStyleToken;\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n}\n\n// (Also used by Meteor Accounts server and tests).\n//\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date\n  };\n};\n\n///\n/// TOKEN EXPIRATION\n///\n\n// Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n  var userFilter = userId ? {_id: userId} : {};\n\n\n  // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n  this.users.update(_.extend(userFilter, {\n    $or: [\n      { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n      { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n    ]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { when: { $lt: oldestValidDate } },\n          { when: { $lt: +oldestValidDate } }\n        ]\n      }\n    }\n  }, { multi: true });\n  // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n};\n\n// @override from accounts_common.js\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n  // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n  if (_.has(this._options, \"loginExpirationInDays\") &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}\n\n\n///\n/// OAuth Encryption Support\n///\n\nvar OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}\n\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(function () {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n}\n\n// Called by accounts-password\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user);\n\n    // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n    if (fullUser === 'TEST DEFAULT HOOK')\n      fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (! hook(fullUser))\n      throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.err.indexOf('emails.address') !== -1)\n      throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.err.indexOf('username') !== -1)\n      throw new Meteor.Error(403, \"Username already exists.\");\n    // XXX better error reporting for services.facebook.id duplicate, etc\n    throw e;\n  }\n  return userId;\n};\n\n// Helper function: returns false if email does not match company domain from\n// the configuration.\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain ||\n    (_.isFunction(domain) && domain(email)) ||\n    (_.isString(domain) &&\n      (new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i')).test(email));\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain)\n    return true;\n\n  var emailIsGood = false;\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood)\n    return true;\n\n  if (_.isString(domain))\n    throw new Meteor.Error(403, \"@\" + domain + \" email required\");\n  else\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}\n\n///\n/// MANAGING USER OBJECTS\n///\n\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\nAp.updateOrCreateUserFromExternalService = function (\n  serviceName,\n  serviceData,\n  options\n) {\n  options = _.clone(options || {});\n\n  if (serviceName === \"password\" || serviceName === \"resume\")\n    throw new Error(\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n  if (!_.has(serviceData, 'id'))\n    throw new Error(\n      \"Service data for service \" + serviceName + \" must include id\");\n\n  // Look for a user with the appropriate service user id.\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\";\n\n  // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{},{}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector);\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n\n    // We *don't* process options (eg, profile) for update, but we do replace\n    // the serviceData (eg, so that we keep an unexpired access token and\n    // don't cache old email addresses in serviceData.email).\n    // XXX provide an onUpdateUser hook which would let apps update\n    //     the profile too\n    var setAttrs = {};\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    });\n\n    // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n\n  } else {\n    // Create a new user with the service data. Pass other options through to\n    // insertUserDoc.\n    user = {services: {}};\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(options, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId)\n        return false;\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile')\n        return false;\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', {unique: 1, sparse: 1});\n  users._ensureIndex('emails.address', {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n                     {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.token',\n                     {unique: 1, sparse: 1});\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n                     { sparse: 1 });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });\n}\n\n///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this;\n\n  // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(\n        user._id,\n        user.services.resume.loginTokensToDelete\n      );\n    });\n  });\n};\n","import {AccountsServer} from \"./accounts_server.js\";\n\n// XXX These should probably not actually be public?\n\nAccountsServer.prototype.urls = {\n  resetPassword: function (token) {\n    return Meteor.absoluteUrl('#/reset-password/' + token);\n  },\n\n  verifyEmail: function (token) {\n    return Meteor.absoluteUrl('#/verify-email/' + token);\n  },\n\n  enrollAccount: function (token) {\n    return Meteor.absoluteUrl('#/enroll-account/' + token);\n  }\n};\n"]}