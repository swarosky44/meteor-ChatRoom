{"version":3,"sources":["meteor://ðŸ’»app/packages/ddp-server/stream_server.js","meteor://ðŸ’»app/packages/ddp-server/livedata_server.js","meteor://ðŸ’»app/packages/ddp-server/writefence.js","meteor://ðŸ’»app/packages/ddp-server/crossbar.js","meteor://ðŸ’»app/packages/ddp-server/server_convenience.js"],"names":[],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["var url = Npm.require('url');\n\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // XXX COMPAT WITH 0.6.6. Send the old style welcome message, which\n    // will force old clients to reload. Remove this once we're not\n    // concerned about people upgrading from a pre-0.7.0 release. Also,\n    // remove the clause in the client that ignores the welcome message\n    // (livedata_connection.js)\n    socket.send(JSON.stringify({server_id: \"0\"}));\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\n_.extend(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    _.each(['request', 'upgrade'], function(event) {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey[key];\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{subscriptionHandle: subscriptionHandle,\n                              value: value}];\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey[key];\n    var elt;\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\n_.extend(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    delete docView.existsIn[subscriptionHandle];\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = {};\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = {};\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  socket.send(DDPCommon.stringifyDDP({msg: 'connected',\n                            session: self.id}));\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"added\", collection: collectionName, id: id, fields: fields});\n  },\n\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields))\n      return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"removed\", collection: collectionName, id: id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n    var ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then((result) => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    _.each(self._namedSubs, f);\n    _.each(self._universalSubs, f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId;\n\n    // Save the old named subs, and reset to having no subscriptions.\n    var oldNamedSubs = self._namedSubs;\n    self._namedSubs = {};\n    self._universalSubs = [];\n\n    _.each(oldNamedSubs, function (sub, subscriptionId) {\n      self._namedSubs[subscriptionId] = sub._recreate();\n      // nb: if the handler throws or calls this.error(), it will in fact\n      // immediately send its 'nosub'. This is OK, though.\n      self._namedSubs[subscriptionId]._runHandler();\n    });\n\n    // Allow newly-created universal subs to be started on our connection in\n    // parallel with the ones we're spinning up here, and spin up universal\n    // subs.\n    self._dontStartNewUniversalSubs = false;\n    self.startUniversalSubs();\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n    if (subId)\n      self._namedSubs[subId] = sub;\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n      self._namedSubs[subId]._removeAllDocuments();\n      self._namedSubs[subId]._deactivate();\n      delete self._namedSubs[subId];\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // my subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // has _deactivate been called?\n  self._deactivated = false;\n\n  // stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // the set of (collection, documentid) that this subscription has\n  // an opinion about\n  self._documents = {};\n\n  // remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    var self = this;\n    try {\n      var res = maybeAuditArgumentChecks(\n        self._handler, self, EJSON.clone(self._params),\n        // It's OK that this would look weird for universal subscriptions,\n        // because they have no arguments so there can never be an\n        // audit-argument-checks failure.\n        \"publisher '\" + self._name + \"'\");\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated())\n      return;\n\n    self._publishHandlerResult(res);\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function(collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n    delete self._documents[collectionName][id];\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  });\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg,\n                      e.message, e.stack);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String} name Name of the record set.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    options = options || {};\n\n    if (name && name in self.publish_handlers) {\n      Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n      return;\n    }\n\n    if (Package.autopublish && !options.is_auto) {\n      // They have autopublish on, yet they're trying to manually\n      // picking stuff to publish. They probably should turn off\n      // autopublish. (This check isn't perfect -- if you create a\n      // publish before you turn on autopublish, it won't catch\n      // it. But this will definitely handle the simple case where\n      // you've added the autopublish package to your app, and are\n      // calling publish from your app code.)\n      if (!self.warned_about_autopublish) {\n        self.warned_about_autopublish = true;\n        Meteor._debug(\n\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n\"** you still have autopublish turned on. Because autopublish is still\\n\" +\n\"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n\"** will still be sent to all clients.\\n\" +\n\"**\\n\" +\n\"** Turn off autopublish by removing the autopublish package:\\n\" +\n\"**\\n\" +\n\"**   $ meteor remove autopublish\\n\" +\n\"**\\n\" +\n\"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n\"** for each collection that you want clients to see.\\n\");\n      }\n    }\n\n    if (name)\n      self.publish_handlers[name] = handler;\n    else {\n      self.universal_publish_handlers.push(handler);\n      // Spin up the new publisher on any existing session too. Run each\n      // session's subscription in a new Fiber, so that there's no change for\n      // self.sessions to change while we're running this loop.\n      _.each(self.sessions, function (session) {\n        if (!session._dontStartNewUniversalSubs) {\n          Fiber(function() {\n            session._startSubscription(handler);\n          }).run();\n        }\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name /*, arguments */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\")\n      var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  // @param callback {Optional Function}\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback)\n      // It's not really necessary to do this, since we immediately\n      // run the callback in this fiber before returning, but we do it\n      // anyway for regularity.\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(\n        callback,\n        \"delivering result of invoking '\" + name + \"'\"\n      );\n\n    // Run the handler\n    var handler = self.method_handlers[name];\n    var exception;\n    if (!handler) {\n      exception = new Meteor.Error(404, `Method '${name}' not found`);\n    } else {\n      // If this is a method call from within another method, get the\n      // user state from the outer method, otherwise don't allow\n      // setUserId to be called\n      var userId = null;\n      var setUserId = function() {\n        throw new Error(\"Can't call setUserId on a server initiated method call\");\n      };\n      var connection = null;\n      var currentInvocation = DDP._CurrentInvocation.get();\n      if (currentInvocation) {\n        userId = currentInvocation.userId;\n        setUserId = function(userId) {\n          currentInvocation.setUserId(userId);\n        };\n        connection = currentInvocation.connection;\n      }\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: userId,\n        setUserId: setUserId,\n        connection: connection,\n        randomSeed: DDPCommon.makeRpcSeed(currentInvocation, name)\n      });\n      try {\n        var result = DDP._CurrentInvocation.withValue(invocation, function () {\n          return maybeAuditArgumentChecks(\n            handler, invocation, EJSON.clone(args), \"internal call to '\" +\n              name + \"'\");\n        });\n        result = EJSON.clone(result);\n      } catch (e) {\n        exception = e;\n      }\n    }\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n    if (callback) {\n      callback(exception, result);\n      return undefined;\n    }\n    if (exception)\n      throw exception;\n    return result;\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception || exception instanceof Meteor.Error)\n    return exception;\n\n  // tests can set the 'expected' flag on an exception so it won't go to the\n  // server log\n  if (!exception.expected) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError.message);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError instanceof Meteor.Error)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"is not a Meteor.Error; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","var path = Npm.require('path');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n    }\n    self.listenersByCollection[collection][id] = record;\n\n    if (self.factName && Package.facts) {\n      Package.facts.Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package.facts) {\n          Package.facts.Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        if (_.isEmpty(self.listenersByCollection[collection])) {\n          delete self.listenersByCollection[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server;\n\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(['publish', 'methods', 'call', 'apply', 'onConnection'],\n       function (name) {\n         Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n       });\n\n// Meteor.server used to be called Meteor.default_server. Provide\n// backcompat as a courtesy even though it was never documented.\n// XXX COMPAT WITH 0.6.4\nMeteor.default_server = Meteor.server;\n"]}