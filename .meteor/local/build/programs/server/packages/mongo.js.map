{"version":3,"sources":["meteor://ðŸ’»app/packages/mongo/mongo_driver.js","meteor://ðŸ’»app/packages/mongo/oplog_tailing.js","meteor://ðŸ’»app/packages/mongo/observe_multiplex.js","meteor://ðŸ’»app/packages/mongo/doc_fetcher.js","meteor://ðŸ’»app/packages/mongo/polling_observe_driver.js","meteor://ðŸ’»app/packages/mongo/oplog_observe_driver.js","meteor://ðŸ’»app/packages/mongo/local_collection_driver.js","meteor://ðŸ’»app/packages/mongo/remote_collection_driver.js","meteor://ðŸ’»app/packages/mongo/collection.js"],"names":[],"mappings":"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","file":"/packages/mongo.js","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = {db: {safe: true}, server: {}, replSet: {}};\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\n    mongoOptions.server.auto_reconnect = true;\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // XXX maybe we should have a better way of allowing users to configure the\n  // underlying Mongo driver\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig._state.master)\n          self._primary = db.serverConfig._state.master.name;\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result, extra) {\n          if (! err) {\n            if (result && options._returnObject) {\n              result = { numberAffected: result };\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && knownId &&\n                  ! extra.updatedExisting)\n                result.insertedId = knownId;\n            }\n          }\n          callback(err, result);\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err)\n                            callback(err);\n                          else if (result)\n                            callback(null, {\n                              numberAffected: result\n                            });\n                          else\n                            doConditionalInsert();\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result,\n                            insertedId: insertedId\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        var lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n    if (!(isMasterDoc && isMasterDoc.documents && isMasterDoc.documents[0] &&\n          isMasterDoc.documents[0].setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures)\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(\n             self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\n        \"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n","PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n      \n      // To be able to get back to the collection from the store.\n      _getCollection: function () {\n        return self;\n      }\n    });\n\n    if (!ok)\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  self._defineMutationMethods();\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) How often to poll this query when observing on the server. In milliseconds. Defaults to 10 seconds.\n   * @param {Number} options.pollingThrottleMs (Server only) Minimum time to allow between re-polling. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. In milliseconds. Defaults to 50 milliseconds.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string'\n          || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(\n    callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string'\n            || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n}\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n"]}