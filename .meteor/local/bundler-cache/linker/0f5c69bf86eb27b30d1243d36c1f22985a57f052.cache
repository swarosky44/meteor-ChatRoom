[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"reactive-dict.js\":[\"babel-runtime/helpers/typeof\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reactive-dict/reactive-dict.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar _typeof2 = require('babel-runtime/helpers/typeof');                                                             //\n                                                                                                                    //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                    //\n                                                                                                                    //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                   //\n                                                                                                                    //\n// XXX come up with a serialization method which canonicalizes object key                                           //\n// order, which would allow us to use objects as values for equals.                                                 //\nvar stringify = function stringify(value) {                                                                         // 3\n  if (value === undefined) return 'undefined';                                                                      // 4\n  return EJSON.stringify(value);                                                                                    // 6\n};                                                                                                                  //\nvar parse = function parse(serialized) {                                                                            // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                     // 9\n  return EJSON.parse(serialized);                                                                                   // 11\n};                                                                                                                  //\n                                                                                                                    //\nvar changed = function changed(v) {                                                                                 // 14\n  v && v.changed();                                                                                                 // 15\n};                                                                                                                  //\n                                                                                                                    //\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                                 //\nReactiveDict = function (_ReactiveDict) {                                                                           // 19\n  function ReactiveDict(_x) {                                                                                       //\n    return _ReactiveDict.apply(this, arguments);                                                                    //\n  }                                                                                                                 //\n                                                                                                                    //\n  ReactiveDict.toString = function () {                                                                             //\n    return _ReactiveDict.toString();                                                                                //\n  };                                                                                                                //\n                                                                                                                    //\n  return ReactiveDict;                                                                                              //\n}(function (dictName) {                                                                                             //\n  // this.keys: key -> value                                                                                        //\n  if (dictName) {                                                                                                   // 21\n    if (typeof dictName === 'string') {                                                                             // 22\n      // the normal case, argument is a string name.                                                                //\n      // _registerDictForMigrate will throw an error on duplicate name.                                             //\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                         // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                   // 26\n      this.name = dictName;                                                                                         // 27\n    } else if ((typeof dictName === 'undefined' ? 'undefined' : (0, _typeof3['default'])(dictName)) === 'object') {\n      // back-compat case: dictName is actually migrationData                                                       //\n      this.keys = dictName;                                                                                         // 30\n    } else {                                                                                                        //\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                                // 32\n    }                                                                                                               //\n  } else {                                                                                                          //\n    // no name given; no migration will be performed                                                                //\n    this.keys = {};                                                                                                 // 36\n  }                                                                                                                 //\n                                                                                                                    //\n  this.allDeps = new Tracker.Dependency();                                                                          // 39\n  this.keyDeps = {}; // key -> Dependency                                                                           // 40\n  this.keyValueDeps = {}; // key -> Dependency                                                                      // 19\n});                                                                                                                 // 19\n                                                                                                                    //\n_.extend(ReactiveDict.prototype, {                                                                                  // 44\n  // set() began as a key/value method, but we are now overloading it                                               //\n  // to take an object of key/value pairs, similar to backbone                                                      //\n  // http://backbonejs.org/#Model-set                                                                               //\n                                                                                                                    //\n  set: function () {                                                                                                // 49\n    function set(keyOrObject, value) {                                                                              // 49\n      var self = this;                                                                                              // 50\n                                                                                                                    //\n      if ((typeof keyOrObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.set({...})`                                                                              //\n        self._setObject(keyOrObject);                                                                               // 54\n        return;                                                                                                     // 55\n      }                                                                                                             //\n      // the input isn't an object, so it must be a key                                                             //\n      // and we resume with the rest of the function                                                                //\n      var key = keyOrObject;                                                                                        // 49\n                                                                                                                    //\n      value = stringify(value);                                                                                     // 61\n                                                                                                                    //\n      var keyExisted = _.has(self.keys, key);                                                                       // 63\n      var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                           // 64\n      var isNewValue = value !== oldSerializedValue;                                                                // 65\n                                                                                                                    //\n      self.keys[key] = value;                                                                                       // 67\n                                                                                                                    //\n      if (isNewValue || !keyExisted) {                                                                              // 69\n        self.allDeps.changed();                                                                                     // 70\n      }                                                                                                             //\n                                                                                                                    //\n      if (isNewValue) {                                                                                             // 73\n        changed(self.keyDeps[key]);                                                                                 // 74\n        if (self.keyValueDeps[key]) {                                                                               // 75\n          changed(self.keyValueDeps[key][oldSerializedValue]);                                                      // 76\n          changed(self.keyValueDeps[key][value]);                                                                   // 77\n        }                                                                                                           //\n      }                                                                                                             //\n    }                                                                                                               //\n                                                                                                                    //\n    return set;                                                                                                     //\n  }(),                                                                                                              //\n                                                                                                                    //\n  setDefault: function () {                                                                                         // 82\n    function setDefault(key, value) {                                                                               // 82\n      var self = this;                                                                                              // 83\n      if (!_.has(self.keys, key)) {                                                                                 // 84\n        self.set(key, value);                                                                                       // 85\n      }                                                                                                             //\n    }                                                                                                               //\n                                                                                                                    //\n    return setDefault;                                                                                              //\n  }(),                                                                                                              //\n                                                                                                                    //\n  get: function () {                                                                                                // 89\n    function get(key) {                                                                                             // 89\n      var self = this;                                                                                              // 90\n      self._ensureKey(key);                                                                                         // 91\n      self.keyDeps[key].depend();                                                                                   // 92\n      return parse(self.keys[key]);                                                                                 // 93\n    }                                                                                                               //\n                                                                                                                    //\n    return get;                                                                                                     //\n  }(),                                                                                                              //\n                                                                                                                    //\n  equals: function () {                                                                                             // 96\n    function equals(key, value) {                                                                                   // 96\n      var self = this;                                                                                              // 97\n                                                                                                                    //\n      // Mongo.ObjectID is in the 'mongo' package                                                                   //\n      var ObjectID = null;                                                                                          // 96\n      if (Package.mongo) {                                                                                          // 101\n        ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 102\n      }                                                                                                             //\n                                                                                                                    //\n      // We don't allow objects (or arrays that might include objects) for                                          //\n      // .equals, because JSON.stringify doesn't canonicalize object key                                            //\n      // order. (We can make equals have the right return value by parsing the                                      //\n      // current value and using EJSON.equals, but we won't have a canonical                                        //\n      // element of keyValueDeps[key] to store the dependency.) You can still use                                   //\n      // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              //\n      //                                                                                                            //\n      // XXX we could allow arrays as long as we recursively check that there                                       //\n      // are no objects                                                                                             //\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n        throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 121\n      }                                                                                                             //\n      var serializedValue = stringify(value);                                                                       // 123\n                                                                                                                    //\n      if (Tracker.active) {                                                                                         // 125\n        self._ensureKey(key);                                                                                       // 126\n                                                                                                                    //\n        if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                                                                                                                    //\n        var isNew = self.keyValueDeps[key][serializedValue].depend();                                               // 131\n        if (isNew) {                                                                                                // 132\n          Tracker.onInvalidate(function () {                                                                        // 133\n            // clean up [key][serializedValue] if it's now empty, so we don't                                       //\n            // use O(n) memory for n = values seen ever                                                             //\n            if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n          });                                                                                                       //\n        }                                                                                                           //\n      }                                                                                                             //\n                                                                                                                    //\n      var oldValue = undefined;                                                                                     // 142\n      if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                  // 143\n      return EJSON.equals(oldValue, value);                                                                         // 144\n    }                                                                                                               //\n                                                                                                                    //\n    return equals;                                                                                                  //\n  }(),                                                                                                              //\n                                                                                                                    //\n  all: function () {                                                                                                // 147\n    function all() {                                                                                                // 147\n      this.allDeps.depend();                                                                                        // 148\n      var ret = {};                                                                                                 // 149\n      _.each(this.keys, function (value, key) {                                                                     // 150\n        ret[key] = parse(value);                                                                                    // 151\n      });                                                                                                           //\n      return ret;                                                                                                   // 153\n    }                                                                                                               //\n                                                                                                                    //\n    return all;                                                                                                     //\n  }(),                                                                                                              //\n                                                                                                                    //\n  clear: function () {                                                                                              // 156\n    function clear() {                                                                                              // 156\n      var self = this;                                                                                              // 157\n                                                                                                                    //\n      var oldKeys = self.keys;                                                                                      // 159\n      self.keys = {};                                                                                               // 160\n                                                                                                                    //\n      self.allDeps.changed();                                                                                       // 162\n                                                                                                                    //\n      _.each(oldKeys, function (value, key) {                                                                       // 164\n        changed(self.keyDeps[key]);                                                                                 // 165\n        if (self.keyValueDeps[key]) {                                                                               // 166\n          changed(self.keyValueDeps[key][value]);                                                                   // 167\n          changed(self.keyValueDeps[key]['undefined']);                                                             // 168\n        }                                                                                                           //\n      });                                                                                                           //\n    }                                                                                                               //\n                                                                                                                    //\n    return clear;                                                                                                   //\n  }(),                                                                                                              //\n                                                                                                                    //\n  'delete': function () {                                                                                           // 174\n    function _delete(key) {                                                                                         // 174\n      var self = this;                                                                                              // 175\n      var didRemove = false;                                                                                        // 176\n                                                                                                                    //\n      if (_.has(self.keys, key)) {                                                                                  // 178\n        var oldValue = self.keys[key];                                                                              // 179\n        delete self.keys[key];                                                                                      // 180\n        changed(self.keyDeps[key]);                                                                                 // 181\n        if (self.keyValueDeps[key]) {                                                                               // 182\n          changed(self.keyValueDeps[key][oldValue]);                                                                // 183\n          changed(self.keyValueDeps[key]['undefined']);                                                             // 184\n        }                                                                                                           //\n        self.allDeps.changed();                                                                                     // 186\n        didRemove = true;                                                                                           // 187\n      }                                                                                                             //\n                                                                                                                    //\n      return didRemove;                                                                                             // 190\n    }                                                                                                               //\n                                                                                                                    //\n    return _delete;                                                                                                 //\n  }(),                                                                                                              //\n                                                                                                                    //\n  _setObject: function () {                                                                                         // 193\n    function _setObject(object) {                                                                                   // 193\n      var self = this;                                                                                              // 194\n                                                                                                                    //\n      _.each(object, function (value, key) {                                                                        // 196\n        self.set(key, value);                                                                                       // 197\n      });                                                                                                           //\n    }                                                                                                               //\n                                                                                                                    //\n    return _setObject;                                                                                              //\n  }(),                                                                                                              //\n                                                                                                                    //\n  _ensureKey: function () {                                                                                         // 201\n    function _ensureKey(key) {                                                                                      // 201\n      var self = this;                                                                                              // 202\n      if (!(key in self.keyDeps)) {                                                                                 // 203\n        self.keyDeps[key] = new Tracker.Dependency();                                                               // 204\n        self.keyValueDeps[key] = {};                                                                                // 205\n      }                                                                                                             //\n    }                                                                                                               //\n                                                                                                                    //\n    return _ensureKey;                                                                                              //\n  }(),                                                                                                              //\n                                                                                                                    //\n  // Get a JSON value that can be passed to the constructor to                                                      //\n  // create a new ReactiveDict with the same contents as this one                                                   //\n  _getMigrationData: function () {                                                                                  // 211\n    function _getMigrationData() {                                                                                  // 211\n      // XXX sanitize and make sure it's JSONible?                                                                  //\n      return this.keys;                                                                                             // 213\n    }                                                                                                               //\n                                                                                                                    //\n    return _getMigrationData;                                                                                       //\n  }()                                                                                                               //\n});                                                                                                                 //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"migration.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reactive-dict/migration.js                                                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nReactiveDict._migratedDictData = {}; // name -> data                                                                // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                          // 2\n                                                                                                                    //\nReactiveDict._loadMigratedDict = function (dictName) {                                                              // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];             // 5\n                                                                                                                    //\n  return null;                                                                                                      // 8\n};                                                                                                                  //\n                                                                                                                    //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                  // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);   // 12\n                                                                                                                    //\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                    // 15\n};                                                                                                                  //\n                                                                                                                    //\nif (Meteor.isClient && Package.reload) {                                                                            // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                     //\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                    //\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                        // 21\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;                   // 22\n                                                                                                                    //\n  // On migration, assemble the data from all the dicts that have been                                              //\n  // registered.                                                                                                    //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                   // 18\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                              // 28\n    var dataToMigrate = {};                                                                                         // 29\n                                                                                                                    //\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {                                  // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                       // 32\n    }return [true, { dicts: dataToMigrate }];                                                                       //\n  });                                                                                                               //\n}                                                                                                                   //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\nrequire(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/packages/reactive-dict/reactive-dict.js","/packages/reactive-dict/migration.js"],"names":[],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (key, value) {\n    var self = this;\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}}]