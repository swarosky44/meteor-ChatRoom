[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar SHA256 = Package.sha.SHA256;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar BigInteger, SRP;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/srp/biginteger.js                                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/// METEOR WRAPPER                                                                                                  // 1\nBigInteger = (function () {                                                                                         // 2\n                                                                                                                    // 3\n                                                                                                                    // 4\n/// BEGIN jsbn.js                                                                                                   // 5\n                                                                                                                    // 6\n/*                                                                                                                  // 7\n * Copyright (c) 2003-2005  Tom Wu                                                                                  // 8\n * All Rights Reserved.                                                                                             // 9\n *                                                                                                                  // 10\n * Permission is hereby granted, free of charge, to any person obtaining                                            // 11\n * a copy of this software and associated documentation files (the                                                  // 12\n * \"Software\"), to deal in the Software without restriction, including                                              // 13\n * without limitation the rights to use, copy, modify, merge, publish,                                              // 14\n * distribute, sublicense, and/or sell copies of the Software, and to                                               // 15\n * permit persons to whom the Software is furnished to do so, subject to                                            // 16\n * the following conditions:                                                                                        // 17\n *                                                                                                                  // 18\n * The above copyright notice and this permission notice shall be                                                   // 19\n * included in all copies or substantial portions of the Software.                                                  // 20\n *                                                                                                                  // 21\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,                                               // 22\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY                                                 // 23\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.                                                 // 24\n *                                                                                                                  // 25\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,                                                  // 26\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER                                         // 27\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF                                           // 28\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT                                           // 29\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                                // 30\n *                                                                                                                  // 31\n * In addition, the following condition applies:                                                                    // 32\n *                                                                                                                  // 33\n * All redistributions must retain an intact copy of this copyright notice                                          // 34\n * and disclaimer.                                                                                                  // 35\n */                                                                                                                 // 36\n                                                                                                                    // 37\n// Basic JavaScript BN library - subset useful for RSA encryption.                                                  // 38\n                                                                                                                    // 39\n// Bits per digit                                                                                                   // 40\nvar dbits;                                                                                                          // 41\n                                                                                                                    // 42\n// JavaScript engine analysis                                                                                       // 43\nvar canary = 0xdeadbeefcafe;                                                                                        // 44\nvar j_lm = ((canary&0xffffff)==0xefcafe);                                                                           // 45\n                                                                                                                    // 46\n// (public) Constructor                                                                                             // 47\nfunction BigInteger(a,b,c) {                                                                                        // 48\n  if(a != null)                                                                                                     // 49\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);                                                                // 50\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);                                              // 51\n    else this.fromString(a,b);                                                                                      // 52\n}                                                                                                                   // 53\n                                                                                                                    // 54\n// return new, unset BigInteger                                                                                     // 55\nfunction nbi() { return new BigInteger(null); }                                                                     // 56\n                                                                                                                    // 57\n// am: Compute w_j += (x*this_i), propagate carries,                                                                // 58\n// c is initial carry, returns final carry.                                                                         // 59\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue                                                                      // 60\n// We need to select the fastest one that works in this environment.                                                // 61\n                                                                                                                    // 62\n// am1: use a single mult and divide to get the high bits,                                                          // 63\n// max digit bits should be 26 because                                                                              // 64\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)                                                                // 65\nfunction am1(i,x,w,j,c,n) {                                                                                         // 66\n  while(--n >= 0) {                                                                                                 // 67\n    var v = x*this[i++]+w[j]+c;                                                                                     // 68\n    c = Math.floor(v/0x4000000);                                                                                    // 69\n    w[j++] = v&0x3ffffff;                                                                                           // 70\n  }                                                                                                                 // 71\n  return c;                                                                                                         // 72\n}                                                                                                                   // 73\n// am2 avoids a big mult-and-extract completely.                                                                    // 74\n// Max digit bits should be <= 30 because we do bitwise ops                                                         // 75\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)                                                                   // 76\nfunction am2(i,x,w,j,c,n) {                                                                                         // 77\n  var xl = x&0x7fff, xh = x>>15;                                                                                    // 78\n  while(--n >= 0) {                                                                                                 // 79\n    var l = this[i]&0x7fff;                                                                                         // 80\n    var h = this[i++]>>15;                                                                                          // 81\n    var m = xh*l+h*xl;                                                                                              // 82\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);                                                                  // 83\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);                                                                            // 84\n    w[j++] = l&0x3fffffff;                                                                                          // 85\n  }                                                                                                                 // 86\n  return c;                                                                                                         // 87\n}                                                                                                                   // 88\n// Alternately, set max digit bits to 28 since some                                                                 // 89\n// browsers slow down when dealing with 32-bit numbers.                                                             // 90\nfunction am3(i,x,w,j,c,n) {                                                                                         // 91\n  var xl = x&0x3fff, xh = x>>14;                                                                                    // 92\n  while(--n >= 0) {                                                                                                 // 93\n    var l = this[i]&0x3fff;                                                                                         // 94\n    var h = this[i++]>>14;                                                                                          // 95\n    var m = xh*l+h*xl;                                                                                              // 96\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;                                                                               // 97\n    c = (l>>28)+(m>>14)+xh*h;                                                                                       // 98\n    w[j++] = l&0xfffffff;                                                                                           // 99\n  }                                                                                                                 // 100\n  return c;                                                                                                         // 101\n}                                                                                                                   // 102\n                                                                                                                    // 103\n/* XXX METEOR XXX                                                                                                   // 104\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {                                                  // 105\n  BigInteger.prototype.am = am2;                                                                                    // 106\n  dbits = 30;                                                                                                       // 107\n}                                                                                                                   // 108\nelse if(j_lm && (navigator.appName != \"Netscape\")) {                                                                // 109\n  BigInteger.prototype.am = am1;                                                                                    // 110\n  dbits = 26;                                                                                                       // 111\n}                                                                                                                   // 112\nelse                                                                                                                // 113\n*/                                                                                                                  // 114\n                                                                                                                    // 115\n{ // Mozilla/Netscape seems to prefer am3                                                                           // 116\n  BigInteger.prototype.am = am3;                                                                                    // 117\n  dbits = 28;                                                                                                       // 118\n}                                                                                                                   // 119\n                                                                                                                    // 120\nBigInteger.prototype.DB = dbits;                                                                                    // 121\nBigInteger.prototype.DM = ((1<<dbits)-1);                                                                           // 122\nBigInteger.prototype.DV = (1<<dbits);                                                                               // 123\n                                                                                                                    // 124\nvar BI_FP = 52;                                                                                                     // 125\nBigInteger.prototype.FV = Math.pow(2,BI_FP);                                                                        // 126\nBigInteger.prototype.F1 = BI_FP-dbits;                                                                              // 127\nBigInteger.prototype.F2 = 2*dbits-BI_FP;                                                                            // 128\n                                                                                                                    // 129\n// Digit conversions                                                                                                // 130\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";                                                                 // 131\nvar BI_RC = new Array();                                                                                            // 132\nvar rr,vv;                                                                                                          // 133\nrr = \"0\".charCodeAt(0);                                                                                             // 134\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;                                                                        // 135\nrr = \"a\".charCodeAt(0);                                                                                             // 136\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;                                                                       // 137\nrr = \"A\".charCodeAt(0);                                                                                             // 138\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;                                                                       // 139\n                                                                                                                    // 140\nfunction int2char(n) { return BI_RM.charAt(n); }                                                                    // 141\nfunction intAt(s,i) {                                                                                               // 142\n  var c = BI_RC[s.charCodeAt(i)];                                                                                   // 143\n  return (c==null)?-1:c;                                                                                            // 144\n}                                                                                                                   // 145\n                                                                                                                    // 146\n// (protected) copy this to r                                                                                       // 147\nfunction bnpCopyTo(r) {                                                                                             // 148\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];                                                                // 149\n  r.t = this.t;                                                                                                     // 150\n  r.s = this.s;                                                                                                     // 151\n}                                                                                                                   // 152\n                                                                                                                    // 153\n// (protected) set from integer value x, -DV <= x < DV                                                              // 154\nfunction bnpFromInt(x) {                                                                                            // 155\n  this.t = 1;                                                                                                       // 156\n  this.s = (x<0)?-1:0;                                                                                              // 157\n  if(x > 0) this[0] = x;                                                                                            // 158\n  else if(x < -1) this[0] = x+DV;                                                                                   // 159\n  else this.t = 0;                                                                                                  // 160\n}                                                                                                                   // 161\n                                                                                                                    // 162\n// return bigint initialized to value                                                                               // 163\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }                                                          // 164\n                                                                                                                    // 165\n// (protected) set from string and radix                                                                            // 166\nfunction bnpFromString(s,b) {                                                                                       // 167\n  var k;                                                                                                            // 168\n  if(b == 16) k = 4;                                                                                                // 169\n  else if(b == 8) k = 3;                                                                                            // 170\n  else if(b == 256) k = 8; // byte array                                                                            // 171\n  else if(b == 2) k = 1;                                                                                            // 172\n  else if(b == 32) k = 5;                                                                                           // 173\n  else if(b == 4) k = 2;                                                                                            // 174\n  else { this.fromRadix(s,b); return; }                                                                             // 175\n  this.t = 0;                                                                                                       // 176\n  this.s = 0;                                                                                                       // 177\n  var i = s.length, mi = false, sh = 0;                                                                             // 178\n  while(--i >= 0) {                                                                                                 // 179\n    var x = (k==8)?s[i]&0xff:intAt(s,i);                                                                            // 180\n    if(x < 0) {                                                                                                     // 181\n      if(s.charAt(i) == \"-\") mi = true;                                                                             // 182\n      continue;                                                                                                     // 183\n    }                                                                                                               // 184\n    mi = false;                                                                                                     // 185\n    if(sh == 0)                                                                                                     // 186\n      this[this.t++] = x;                                                                                           // 187\n    else if(sh+k > this.DB) {                                                                                       // 188\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;                                                              // 189\n      this[this.t++] = (x>>(this.DB-sh));                                                                           // 190\n    }                                                                                                               // 191\n    else                                                                                                            // 192\n      this[this.t-1] |= x<<sh;                                                                                      // 193\n    sh += k;                                                                                                        // 194\n    if(sh >= this.DB) sh -= this.DB;                                                                                // 195\n  }                                                                                                                 // 196\n  if(k == 8 && (s[0]&0x80) != 0) {                                                                                  // 197\n    this.s = -1;                                                                                                    // 198\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;                                                         // 199\n  }                                                                                                                 // 200\n  this.clamp();                                                                                                     // 201\n  if(mi) BigInteger.ZERO.subTo(this,this);                                                                          // 202\n}                                                                                                                   // 203\n                                                                                                                    // 204\n// (protected) clamp off excess high words                                                                          // 205\nfunction bnpClamp() {                                                                                               // 206\n  var c = this.s&this.DM;                                                                                           // 207\n  while(this.t > 0 && this[this.t-1] == c) --this.t;                                                                // 208\n}                                                                                                                   // 209\n                                                                                                                    // 210\n// (public) return string representation in given radix                                                             // 211\nfunction bnToString(b) {                                                                                            // 212\n  if(this.s < 0) return \"-\"+this.negate().toString(b);                                                              // 213\n  var k;                                                                                                            // 214\n  if(b == 16) k = 4;                                                                                                // 215\n  else if(b == 8) k = 3;                                                                                            // 216\n  else if(b == 2) k = 1;                                                                                            // 217\n  else if(b == 32) k = 5;                                                                                           // 218\n  else if(b == 4) k = 2;                                                                                            // 219\n  else return this.toRadix(b);                                                                                      // 220\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;                                                              // 221\n  var p = this.DB-(i*this.DB)%k;                                                                                    // 222\n  if(i-- > 0) {                                                                                                     // 223\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }                                          // 224\n    while(i >= 0) {                                                                                                 // 225\n      if(p < k) {                                                                                                   // 226\n        d = (this[i]&((1<<p)-1))<<(k-p);                                                                            // 227\n        d |= this[--i]>>(p+=this.DB-k);                                                                             // 228\n      }                                                                                                             // 229\n      else {                                                                                                        // 230\n        d = (this[i]>>(p-=k))&km;                                                                                   // 231\n        if(p <= 0) { p += this.DB; --i; }                                                                           // 232\n      }                                                                                                             // 233\n      if(d > 0) m = true;                                                                                           // 234\n      if(m) r += int2char(d);                                                                                       // 235\n    }                                                                                                               // 236\n  }                                                                                                                 // 237\n  return m?r:\"0\";                                                                                                   // 238\n}                                                                                                                   // 239\n                                                                                                                    // 240\n// (public) -this                                                                                                   // 241\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }                                     // 242\n                                                                                                                    // 243\n// (public) |this|                                                                                                  // 244\nfunction bnAbs() { return (this.s<0)?this.negate():this; }                                                          // 245\n                                                                                                                    // 246\n// (public) return + if this > a, - if this < a, 0 if equal                                                         // 247\nfunction bnCompareTo(a) {                                                                                           // 248\n  var r = this.s-a.s;                                                                                               // 249\n  if(r != 0) return r;                                                                                              // 250\n  var i = this.t;                                                                                                   // 251\n  r = i-a.t;                                                                                                        // 252\n  if(r != 0) return r;                                                                                              // 253\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;                                                               // 254\n  return 0;                                                                                                         // 255\n}                                                                                                                   // 256\n                                                                                                                    // 257\n// returns bit length of the integer x                                                                              // 258\nfunction nbits(x) {                                                                                                 // 259\n  var r = 1, t;                                                                                                     // 260\n  if((t=x>>>16) != 0) { x = t; r += 16; }                                                                           // 261\n  if((t=x>>8) != 0) { x = t; r += 8; }                                                                              // 262\n  if((t=x>>4) != 0) { x = t; r += 4; }                                                                              // 263\n  if((t=x>>2) != 0) { x = t; r += 2; }                                                                              // 264\n  if((t=x>>1) != 0) { x = t; r += 1; }                                                                              // 265\n  return r;                                                                                                         // 266\n}                                                                                                                   // 267\n                                                                                                                    // 268\n// (public) return the number of bits in \"this\"                                                                     // 269\nfunction bnBitLength() {                                                                                            // 270\n  if(this.t <= 0) return 0;                                                                                         // 271\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));                                                 // 272\n}                                                                                                                   // 273\n                                                                                                                    // 274\n// (protected) r = this << n*DB                                                                                     // 275\nfunction bnpDLShiftTo(n,r) {                                                                                        // 276\n  var i;                                                                                                            // 277\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];                                                                  // 278\n  for(i = n-1; i >= 0; --i) r[i] = 0;                                                                               // 279\n  r.t = this.t+n;                                                                                                   // 280\n  r.s = this.s;                                                                                                     // 281\n}                                                                                                                   // 282\n                                                                                                                    // 283\n// (protected) r = this >> n*DB                                                                                     // 284\nfunction bnpDRShiftTo(n,r) {                                                                                        // 285\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];                                                                 // 286\n  r.t = Math.max(this.t-n,0);                                                                                       // 287\n  r.s = this.s;                                                                                                     // 288\n}                                                                                                                   // 289\n                                                                                                                    // 290\n// (protected) r = this << n                                                                                        // 291\nfunction bnpLShiftTo(n,r) {                                                                                         // 292\n  var bs = n%this.DB;                                                                                               // 293\n  var cbs = this.DB-bs;                                                                                             // 294\n  var bm = (1<<cbs)-1;                                                                                              // 295\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;                                                      // 296\n  for(i = this.t-1; i >= 0; --i) {                                                                                  // 297\n    r[i+ds+1] = (this[i]>>cbs)|c;                                                                                   // 298\n    c = (this[i]&bm)<<bs;                                                                                           // 299\n  }                                                                                                                 // 300\n  for(i = ds-1; i >= 0; --i) r[i] = 0;                                                                              // 301\n  r[ds] = c;                                                                                                        // 302\n  r.t = this.t+ds+1;                                                                                                // 303\n  r.s = this.s;                                                                                                     // 304\n  r.clamp();                                                                                                        // 305\n}                                                                                                                   // 306\n                                                                                                                    // 307\n// (protected) r = this >> n                                                                                        // 308\nfunction bnpRShiftTo(n,r) {                                                                                         // 309\n  r.s = this.s;                                                                                                     // 310\n  var ds = Math.floor(n/this.DB);                                                                                   // 311\n  if(ds >= this.t) { r.t = 0; return; }                                                                             // 312\n  var bs = n%this.DB;                                                                                               // 313\n  var cbs = this.DB-bs;                                                                                             // 314\n  var bm = (1<<bs)-1;                                                                                               // 315\n  r[0] = this[ds]>>bs;                                                                                              // 316\n  for(var i = ds+1; i < this.t; ++i) {                                                                              // 317\n    r[i-ds-1] |= (this[i]&bm)<<cbs;                                                                                 // 318\n    r[i-ds] = this[i]>>bs;                                                                                          // 319\n  }                                                                                                                 // 320\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;                                                                    // 321\n  r.t = this.t-ds;                                                                                                  // 322\n  r.clamp();                                                                                                        // 323\n}                                                                                                                   // 324\n                                                                                                                    // 325\n// (protected) r = this - a                                                                                         // 326\nfunction bnpSubTo(a,r) {                                                                                            // 327\n  var i = 0, c = 0, m = Math.min(a.t,this.t);                                                                       // 328\n  while(i < m) {                                                                                                    // 329\n    c += this[i]-a[i];                                                                                              // 330\n    r[i++] = c&this.DM;                                                                                             // 331\n    c >>= this.DB;                                                                                                  // 332\n  }                                                                                                                 // 333\n  if(a.t < this.t) {                                                                                                // 334\n    c -= a.s;                                                                                                       // 335\n    while(i < this.t) {                                                                                             // 336\n      c += this[i];                                                                                                 // 337\n      r[i++] = c&this.DM;                                                                                           // 338\n      c >>= this.DB;                                                                                                // 339\n    }                                                                                                               // 340\n    c += this.s;                                                                                                    // 341\n  }                                                                                                                 // 342\n  else {                                                                                                            // 343\n    c += this.s;                                                                                                    // 344\n    while(i < a.t) {                                                                                                // 345\n      c -= a[i];                                                                                                    // 346\n      r[i++] = c&this.DM;                                                                                           // 347\n      c >>= this.DB;                                                                                                // 348\n    }                                                                                                               // 349\n    c -= a.s;                                                                                                       // 350\n  }                                                                                                                 // 351\n  r.s = (c<0)?-1:0;                                                                                                 // 352\n  if(c < -1) r[i++] = this.DV+c;                                                                                    // 353\n  else if(c > 0) r[i++] = c;                                                                                        // 354\n  r.t = i;                                                                                                          // 355\n  r.clamp();                                                                                                        // 356\n}                                                                                                                   // 357\n                                                                                                                    // 358\n// (protected) r = this * a, r != this,a (HAC 14.12)                                                                // 359\n// \"this\" should be the larger one if appropriate.                                                                  // 360\nfunction bnpMultiplyTo(a,r) {                                                                                       // 361\n  var x = this.abs(), y = a.abs();                                                                                  // 362\n  var i = x.t;                                                                                                      // 363\n  r.t = i+y.t;                                                                                                      // 364\n  while(--i >= 0) r[i] = 0;                                                                                         // 365\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);                                                       // 366\n  r.s = 0;                                                                                                          // 367\n  r.clamp();                                                                                                        // 368\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);                                                                     // 369\n}                                                                                                                   // 370\n                                                                                                                    // 371\n// (protected) r = this^2, r != this (HAC 14.16)                                                                    // 372\nfunction bnpSquareTo(r) {                                                                                           // 373\n  var x = this.abs();                                                                                               // 374\n  var i = r.t = 2*x.t;                                                                                              // 375\n  while(--i >= 0) r[i] = 0;                                                                                         // 376\n  for(i = 0; i < x.t-1; ++i) {                                                                                      // 377\n    var c = x.am(i,x[i],r,2*i,0,1);                                                                                 // 378\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {                                                    // 379\n      r[i+x.t] -= x.DV;                                                                                             // 380\n      r[i+x.t+1] = 1;                                                                                               // 381\n    }                                                                                                               // 382\n  }                                                                                                                 // 383\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);                                                                   // 384\n  r.s = 0;                                                                                                          // 385\n  r.clamp();                                                                                                        // 386\n}                                                                                                                   // 387\n                                                                                                                    // 388\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)                                         // 389\n// r != q, this != m.  q or r may be null.                                                                          // 390\nfunction bnpDivRemTo(m,q,r) {                                                                                       // 391\n  var pm = m.abs();                                                                                                 // 392\n  if(pm.t <= 0) return;                                                                                             // 393\n  var pt = this.abs();                                                                                              // 394\n  if(pt.t < pm.t) {                                                                                                 // 395\n    if(q != null) q.fromInt(0);                                                                                     // 396\n    if(r != null) this.copyTo(r);                                                                                   // 397\n    return;                                                                                                         // 398\n  }                                                                                                                 // 399\n  if(r == null) r = nbi();                                                                                          // 400\n  var y = nbi(), ts = this.s, ms = m.s;                                                                             // 401\n  var nsh = this.DB-nbits(pm[pm.t-1]);\t// normalize modulus                                                         // 402\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }                                                           // 403\n  else { pm.copyTo(y); pt.copyTo(r); }                                                                              // 404\n  var ys = y.t;                                                                                                     // 405\n  var y0 = y[ys-1];                                                                                                 // 406\n  if(y0 == 0) return;                                                                                               // 407\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);                                                             // 408\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;                                                        // 409\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;                                                                     // 410\n  y.dlShiftTo(j,t);                                                                                                 // 411\n  if(r.compareTo(t) >= 0) {                                                                                         // 412\n    r[r.t++] = 1;                                                                                                   // 413\n    r.subTo(t,r);                                                                                                   // 414\n  }                                                                                                                 // 415\n  BigInteger.ONE.dlShiftTo(ys,t);                                                                                   // 416\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later                                                 // 417\n  while(y.t < ys) y[y.t++] = 0;                                                                                     // 418\n  while(--j >= 0) {                                                                                                 // 419\n    // Estimate quotient digit                                                                                      // 420\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);                                                // 421\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out                                                            // 422\n      y.dlShiftTo(j,t);                                                                                             // 423\n      r.subTo(t,r);                                                                                                 // 424\n      while(r[i] < --qd) r.subTo(t,r);                                                                              // 425\n    }                                                                                                               // 426\n  }                                                                                                                 // 427\n  if(q != null) {                                                                                                   // 428\n    r.drShiftTo(ys,q);                                                                                              // 429\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);                                                                        // 430\n  }                                                                                                                 // 431\n  r.t = ys;                                                                                                         // 432\n  r.clamp();                                                                                                        // 433\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder                                                           // 434\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);                                                                            // 435\n}                                                                                                                   // 436\n                                                                                                                    // 437\n// (public) this mod a                                                                                              // 438\nfunction bnMod(a) {                                                                                                 // 439\n  var r = nbi();                                                                                                    // 440\n  this.abs().divRemTo(a,null,r);                                                                                    // 441\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);                                                  // 442\n  return r;                                                                                                         // 443\n}                                                                                                                   // 444\n                                                                                                                    // 445\n// Modular reduction using \"classic\" algorithm                                                                      // 446\nfunction Classic(m) { this.m = m; }                                                                                 // 447\nfunction cConvert(x) {                                                                                              // 448\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);                                                     // 449\n  else return x;                                                                                                    // 450\n}                                                                                                                   // 451\nfunction cRevert(x) { return x; }                                                                                   // 452\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }                                                                  // 453\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                       // 454\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                             // 455\n                                                                                                                    // 456\nClassic.prototype.convert = cConvert;                                                                               // 457\nClassic.prototype.revert = cRevert;                                                                                 // 458\nClassic.prototype.reduce = cReduce;                                                                                 // 459\nClassic.prototype.mulTo = cMulTo;                                                                                   // 460\nClassic.prototype.sqrTo = cSqrTo;                                                                                   // 461\n                                                                                                                    // 462\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction                                                  // 463\n// justification:                                                                                                   // 464\n//         xy == 1 (mod m)                                                                                          // 465\n//         xy =  1+km                                                                                               // 466\n//   xy(2-xy) = (1+km)(1-km)                                                                                        // 467\n// x[y(2-xy)] = 1-k^2m^2                                                                                            // 468\n// x[y(2-xy)] == 1 (mod m^2)                                                                                        // 469\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2                                                                   // 470\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.                                            // 471\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.                                          // 472\nfunction bnpInvDigit() {                                                                                            // 473\n  if(this.t < 1) return 0;                                                                                          // 474\n  var x = this[0];                                                                                                  // 475\n  if((x&1) == 0) return 0;                                                                                          // 476\n  var y = x&3;\t\t// y == 1/x mod 2^2                                                                                 // 477\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4                                                                    // 478\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8                                                                  // 479\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16                                                  // 480\n  // last step - calculate inverse mod DV directly;                                                                 // 481\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints                                                // 482\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits                                                         // 483\n  // we really want the negative inverse, and -DV < y < DV                                                          // 484\n  return (y>0)?this.DV-y:-y;                                                                                        // 485\n}                                                                                                                   // 486\n                                                                                                                    // 487\n// Montgomery reduction                                                                                             // 488\nfunction Montgomery(m) {                                                                                            // 489\n  this.m = m;                                                                                                       // 490\n  this.mp = m.invDigit();                                                                                           // 491\n  this.mpl = this.mp&0x7fff;                                                                                        // 492\n  this.mph = this.mp>>15;                                                                                           // 493\n  this.um = (1<<(m.DB-15))-1;                                                                                       // 494\n  this.mt2 = 2*m.t;                                                                                                 // 495\n}                                                                                                                   // 496\n                                                                                                                    // 497\n// xR mod m                                                                                                         // 498\nfunction montConvert(x) {                                                                                           // 499\n  var r = nbi();                                                                                                    // 500\n  x.abs().dlShiftTo(this.m.t,r);                                                                                    // 501\n  r.divRemTo(this.m,null,r);                                                                                        // 502\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);                                                // 503\n  return r;                                                                                                         // 504\n}                                                                                                                   // 505\n                                                                                                                    // 506\n// x/R mod m                                                                                                        // 507\nfunction montRevert(x) {                                                                                            // 508\n  var r = nbi();                                                                                                    // 509\n  x.copyTo(r);                                                                                                      // 510\n  this.reduce(r);                                                                                                   // 511\n  return r;                                                                                                         // 512\n}                                                                                                                   // 513\n                                                                                                                    // 514\n// x = x/R mod m (HAC 14.32)                                                                                        // 515\nfunction montReduce(x) {                                                                                            // 516\n  while(x.t <= this.mt2)\t// pad x so am has enough room later                                                       // 517\n    x[x.t++] = 0;                                                                                                   // 518\n  for(var i = 0; i < this.m.t; ++i) {                                                                               // 519\n    // faster way of calculating u0 = x[i]*mp mod DV                                                                // 520\n    var j = x[i]&0x7fff;                                                                                            // 521\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;                                    // 522\n    // use am to combine the multiply-shift-add into one call                                                       // 523\n    j = i+this.m.t;                                                                                                 // 524\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);                                                                         // 525\n    // propagate carry                                                                                              // 526\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }                                                                 // 527\n  }                                                                                                                 // 528\n  x.clamp();                                                                                                        // 529\n  x.drShiftTo(this.m.t,x);                                                                                          // 530\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);                                                                   // 531\n}                                                                                                                   // 532\n                                                                                                                    // 533\n// r = \"x^2/R mod m\"; x != r                                                                                        // 534\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                          // 535\n                                                                                                                    // 536\n// r = \"xy/R mod m\"; x,y != r                                                                                       // 537\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                    // 538\n                                                                                                                    // 539\nMontgomery.prototype.convert = montConvert;                                                                         // 540\nMontgomery.prototype.revert = montRevert;                                                                           // 541\nMontgomery.prototype.reduce = montReduce;                                                                           // 542\nMontgomery.prototype.mulTo = montMulTo;                                                                             // 543\nMontgomery.prototype.sqrTo = montSqrTo;                                                                             // 544\n                                                                                                                    // 545\n// (protected) true iff this is even                                                                                // 546\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }                                               // 547\n                                                                                                                    // 548\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)                                             // 549\nfunction bnpExp(e,z) {                                                                                              // 550\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;                                                                // 551\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;                                                   // 552\n  g.copyTo(r);                                                                                                      // 553\n  while(--i >= 0) {                                                                                                 // 554\n    z.sqrTo(r,r2);                                                                                                  // 555\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);                                                                             // 556\n    else { var t = r; r = r2; r2 = t; }                                                                             // 557\n  }                                                                                                                 // 558\n  return z.revert(r);                                                                                               // 559\n}                                                                                                                   // 560\n                                                                                                                    // 561\n// (public) this^e % m, 0 <= e < 2^32                                                                               // 562\nfunction bnModPowInt(e,m) {                                                                                         // 563\n  var z;                                                                                                            // 564\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);                                         // 565\n  return this.exp(e,z);                                                                                             // 566\n}                                                                                                                   // 567\n                                                                                                                    // 568\n// protected                                                                                                        // 569\nBigInteger.prototype.copyTo = bnpCopyTo;                                                                            // 570\nBigInteger.prototype.fromInt = bnpFromInt;                                                                          // 571\nBigInteger.prototype.fromString = bnpFromString;                                                                    // 572\nBigInteger.prototype.clamp = bnpClamp;                                                                              // 573\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;                                                                      // 574\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;                                                                      // 575\nBigInteger.prototype.lShiftTo = bnpLShiftTo;                                                                        // 576\nBigInteger.prototype.rShiftTo = bnpRShiftTo;                                                                        // 577\nBigInteger.prototype.subTo = bnpSubTo;                                                                              // 578\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;                                                                    // 579\nBigInteger.prototype.squareTo = bnpSquareTo;                                                                        // 580\nBigInteger.prototype.divRemTo = bnpDivRemTo;                                                                        // 581\nBigInteger.prototype.invDigit = bnpInvDigit;                                                                        // 582\nBigInteger.prototype.isEven = bnpIsEven;                                                                            // 583\nBigInteger.prototype.exp = bnpExp;                                                                                  // 584\n                                                                                                                    // 585\n// public                                                                                                           // 586\nBigInteger.prototype.toString = bnToString;                                                                         // 587\nBigInteger.prototype.negate = bnNegate;                                                                             // 588\nBigInteger.prototype.abs = bnAbs;                                                                                   // 589\nBigInteger.prototype.compareTo = bnCompareTo;                                                                       // 590\nBigInteger.prototype.bitLength = bnBitLength;                                                                       // 591\nBigInteger.prototype.mod = bnMod;                                                                                   // 592\nBigInteger.prototype.modPowInt = bnModPowInt;                                                                       // 593\n                                                                                                                    // 594\n// \"constants\"                                                                                                      // 595\nBigInteger.ZERO = nbv(0);                                                                                           // 596\nBigInteger.ONE = nbv(1);                                                                                            // 597\n                                                                                                                    // 598\n                                                                                                                    // 599\n/// BEGIN jsbn2.js                                                                                                  // 600\n                                                                                                                    // 601\n/*                                                                                                                  // 602\n * Copyright (c) 2003-2005  Tom Wu                                                                                  // 603\n * All Rights Reserved.                                                                                             // 604\n *                                                                                                                  // 605\n * Permission is hereby granted, free of charge, to any person obtaining                                            // 606\n * a copy of this software and associated documentation files (the                                                  // 607\n * \"Software\"), to deal in the Software without restriction, including                                              // 608\n * without limitation the rights to use, copy, modify, merge, publish,                                              // 609\n * distribute, sublicense, and/or sell copies of the Software, and to                                               // 610\n * permit persons to whom the Software is furnished to do so, subject to                                            // 611\n * the following conditions:                                                                                        // 612\n *                                                                                                                  // 613\n * The above copyright notice and this permission notice shall be                                                   // 614\n * included in all copies or substantial portions of the Software.                                                  // 615\n *                                                                                                                  // 616\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,                                               // 617\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY                                                 // 618\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.                                                 // 619\n *                                                                                                                  // 620\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,                                                  // 621\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER                                         // 622\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF                                           // 623\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT                                           // 624\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                                // 625\n *                                                                                                                  // 626\n * In addition, the following condition applies:                                                                    // 627\n *                                                                                                                  // 628\n * All redistributions must retain an intact copy of this copyright notice                                          // 629\n * and disclaimer.                                                                                                  // 630\n */                                                                                                                 // 631\n                                                                                                                    // 632\n// Extended JavaScript BN functions, required for RSA private ops.                                                  // 633\n                                                                                                                    // 634\n// (public)                                                                                                         // 635\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }                                                     // 636\n                                                                                                                    // 637\n// (public) return value as integer                                                                                 // 638\nfunction bnIntValue() {                                                                                             // 639\n  if(this.s < 0) {                                                                                                  // 640\n    if(this.t == 1) return this[0]-this.DV;                                                                         // 641\n    else if(this.t == 0) return -1;                                                                                 // 642\n  }                                                                                                                 // 643\n  else if(this.t == 1) return this[0];                                                                              // 644\n  else if(this.t == 0) return 0;                                                                                    // 645\n  // assumes 16 < DB < 32                                                                                           // 646\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];                                                        // 647\n}                                                                                                                   // 648\n                                                                                                                    // 649\n// (public) return value as byte                                                                                    // 650\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }                                             // 651\n                                                                                                                    // 652\n// (public) return value as short (assumes DB>=16)                                                                  // 653\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }                                            // 654\n                                                                                                                    // 655\n// (protected) return x s.t. r^x < DV                                                                               // 656\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }                                       // 657\n                                                                                                                    // 658\n// (public) 0 if this == 0, 1 if this > 0                                                                           // 659\nfunction bnSigNum() {                                                                                               // 660\n  if(this.s < 0) return -1;                                                                                         // 661\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;                                                   // 662\n  else return 1;                                                                                                    // 663\n}                                                                                                                   // 664\n                                                                                                                    // 665\n// (protected) convert to radix string                                                                              // 666\nfunction bnpToRadix(b) {                                                                                            // 667\n  if(b == null) b = 10;                                                                                             // 668\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";                                                             // 669\n  var cs = this.chunkSize(b);                                                                                       // 670\n  var a = Math.pow(b,cs);                                                                                           // 671\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";                                                                     // 672\n  this.divRemTo(d,y,z);                                                                                             // 673\n  while(y.signum() > 0) {                                                                                           // 674\n    r = (a+z.intValue()).toString(b).substr(1) + r;                                                                 // 675\n    y.divRemTo(d,y,z);                                                                                              // 676\n  }                                                                                                                 // 677\n  return z.intValue().toString(b) + r;                                                                              // 678\n}                                                                                                                   // 679\n                                                                                                                    // 680\n// (protected) convert from radix string                                                                            // 681\nfunction bnpFromRadix(s,b) {                                                                                        // 682\n  this.fromInt(0);                                                                                                  // 683\n  if(b == null) b = 10;                                                                                             // 684\n  var cs = this.chunkSize(b);                                                                                       // 685\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;                                                                 // 686\n  for(var i = 0; i < s.length; ++i) {                                                                               // 687\n    var x = intAt(s,i);                                                                                             // 688\n    if(x < 0) {                                                                                                     // 689\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;                                                       // 690\n      continue;                                                                                                     // 691\n    }                                                                                                               // 692\n    w = b*w+x;                                                                                                      // 693\n    if(++j >= cs) {                                                                                                 // 694\n      this.dMultiply(d);                                                                                            // 695\n      this.dAddOffset(w,0);                                                                                         // 696\n      j = 0;                                                                                                        // 697\n      w = 0;                                                                                                        // 698\n    }                                                                                                               // 699\n  }                                                                                                                 // 700\n  if(j > 0) {                                                                                                       // 701\n    this.dMultiply(Math.pow(b,j));                                                                                  // 702\n    this.dAddOffset(w,0);                                                                                           // 703\n  }                                                                                                                 // 704\n  if(mi) BigInteger.ZERO.subTo(this,this);                                                                          // 705\n}                                                                                                                   // 706\n                                                                                                                    // 707\n// (protected) alternate constructor                                                                                // 708\nfunction bnpFromNumber(a,b,c) {                                                                                     // 709\n  if(\"number\" == typeof b) {                                                                                        // 710\n    // new BigInteger(int,int,RNG)                                                                                  // 711\n    if(a < 2) this.fromInt(1);                                                                                      // 712\n    else {                                                                                                          // 713\n      this.fromNumber(a,c);                                                                                         // 714\n      if(!this.testBit(a-1))\t// force MSB set                                                                       // 715\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);                                                   // 716\n      if(this.isEven()) this.dAddOffset(1,0); // force odd                                                          // 717\n      while(!this.isProbablePrime(b)) {                                                                             // 718\n        this.dAddOffset(2,0);                                                                                       // 719\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);                                    // 720\n      }                                                                                                             // 721\n    }                                                                                                               // 722\n  }                                                                                                                 // 723\n  else {                                                                                                            // 724\n    // new BigInteger(int,RNG)                                                                                      // 725\n    var x = new Array(), t = a&7;                                                                                   // 726\n    x.length = (a>>3)+1;                                                                                            // 727\n    b.nextBytes(x);                                                                                                 // 728\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;                                                                    // 729\n    this.fromString(x,256);                                                                                         // 730\n  }                                                                                                                 // 731\n}                                                                                                                   // 732\n                                                                                                                    // 733\n// (public) convert to bigendian byte array                                                                         // 734\nfunction bnToByteArray() {                                                                                          // 735\n  var i = this.t, r = new Array();                                                                                  // 736\n  r[0] = this.s;                                                                                                    // 737\n  var p = this.DB-(i*this.DB)%8, d, k = 0;                                                                          // 738\n  if(i-- > 0) {                                                                                                     // 739\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)                                                      // 740\n      r[k++] = d|(this.s<<(this.DB-p));                                                                             // 741\n    while(i >= 0) {                                                                                                 // 742\n      if(p < 8) {                                                                                                   // 743\n        d = (this[i]&((1<<p)-1))<<(8-p);                                                                            // 744\n        d |= this[--i]>>(p+=this.DB-8);                                                                             // 745\n      }                                                                                                             // 746\n      else {                                                                                                        // 747\n        d = (this[i]>>(p-=8))&0xff;                                                                                 // 748\n        if(p <= 0) { p += this.DB; --i; }                                                                           // 749\n      }                                                                                                             // 750\n      if((d&0x80) != 0) d |= -256;                                                                                  // 751\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;                                                                  // 752\n      if(k > 0 || d != this.s) r[k++] = d;                                                                          // 753\n    }                                                                                                               // 754\n  }                                                                                                                 // 755\n  return r;                                                                                                         // 756\n}                                                                                                                   // 757\n                                                                                                                    // 758\nfunction bnEquals(a) { return(this.compareTo(a)==0); }                                                              // 759\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }                                                           // 760\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }                                                           // 761\n                                                                                                                    // 762\n// (protected) r = this op a (bitwise)                                                                              // 763\nfunction bnpBitwiseTo(a,op,r) {                                                                                     // 764\n  var i, f, m = Math.min(a.t,this.t);                                                                               // 765\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);                                                                   // 766\n  if(a.t < this.t) {                                                                                                // 767\n    f = a.s&this.DM;                                                                                                // 768\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);                                                               // 769\n    r.t = this.t;                                                                                                   // 770\n  }                                                                                                                 // 771\n  else {                                                                                                            // 772\n    f = this.s&this.DM;                                                                                             // 773\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);                                                                     // 774\n    r.t = a.t;                                                                                                      // 775\n  }                                                                                                                 // 776\n  r.s = op(this.s,a.s);                                                                                             // 777\n  r.clamp();                                                                                                        // 778\n}                                                                                                                   // 779\n                                                                                                                    // 780\n// (public) this & a                                                                                                // 781\nfunction op_and(x,y) { return x&y; }                                                                                // 782\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }                                          // 783\n                                                                                                                    // 784\n// (public) this | a                                                                                                // 785\nfunction op_or(x,y) { return x|y; }                                                                                 // 786\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }                                            // 787\n                                                                                                                    // 788\n// (public) this ^ a                                                                                                // 789\nfunction op_xor(x,y) { return x^y; }                                                                                // 790\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }                                          // 791\n                                                                                                                    // 792\n// (public) this & ~a                                                                                               // 793\nfunction op_andnot(x,y) { return x&~y; }                                                                            // 794\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }                                    // 795\n                                                                                                                    // 796\n// (public) ~this                                                                                                   // 797\nfunction bnNot() {                                                                                                  // 798\n  var r = nbi();                                                                                                    // 799\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];                                                          // 800\n  r.t = this.t;                                                                                                     // 801\n  r.s = ~this.s;                                                                                                    // 802\n  return r;                                                                                                         // 803\n}                                                                                                                   // 804\n                                                                                                                    // 805\n// (public) this << n                                                                                               // 806\nfunction bnShiftLeft(n) {                                                                                           // 807\n  var r = nbi();                                                                                                    // 808\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);                                                           // 809\n  return r;                                                                                                         // 810\n}                                                                                                                   // 811\n                                                                                                                    // 812\n// (public) this >> n                                                                                               // 813\nfunction bnShiftRight(n) {                                                                                          // 814\n  var r = nbi();                                                                                                    // 815\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);                                                           // 816\n  return r;                                                                                                         // 817\n}                                                                                                                   // 818\n                                                                                                                    // 819\n// return index of lowest 1-bit in x, x < 2^31                                                                      // 820\nfunction lbit(x) {                                                                                                  // 821\n  if(x == 0) return -1;                                                                                             // 822\n  var r = 0;                                                                                                        // 823\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }                                                                        // 824\n  if((x&0xff) == 0) { x >>= 8; r += 8; }                                                                            // 825\n  if((x&0xf) == 0) { x >>= 4; r += 4; }                                                                             // 826\n  if((x&3) == 0) { x >>= 2; r += 2; }                                                                               // 827\n  if((x&1) == 0) ++r;                                                                                               // 828\n  return r;                                                                                                         // 829\n}                                                                                                                   // 830\n                                                                                                                    // 831\n// (public) returns index of lowest 1-bit (or -1 if none)                                                           // 832\nfunction bnGetLowestSetBit() {                                                                                      // 833\n  for(var i = 0; i < this.t; ++i)                                                                                   // 834\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);                                                                // 835\n  if(this.s < 0) return this.t*this.DB;                                                                             // 836\n  return -1;                                                                                                        // 837\n}                                                                                                                   // 838\n                                                                                                                    // 839\n// return number of 1 bits in x                                                                                     // 840\nfunction cbit(x) {                                                                                                  // 841\n  var r = 0;                                                                                                        // 842\n  while(x != 0) { x &= x-1; ++r; }                                                                                  // 843\n  return r;                                                                                                         // 844\n}                                                                                                                   // 845\n                                                                                                                    // 846\n// (public) return number of set bits                                                                               // 847\nfunction bnBitCount() {                                                                                             // 848\n  var r = 0, x = this.s&this.DM;                                                                                    // 849\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);                                                             // 850\n  return r;                                                                                                         // 851\n}                                                                                                                   // 852\n                                                                                                                    // 853\n// (public) true iff nth bit is set                                                                                 // 854\nfunction bnTestBit(n) {                                                                                             // 855\n  var j = Math.floor(n/this.DB);                                                                                    // 856\n  if(j >= this.t) return(this.s!=0);                                                                                // 857\n  return((this[j]&(1<<(n%this.DB)))!=0);                                                                            // 858\n}                                                                                                                   // 859\n                                                                                                                    // 860\n// (protected) this op (1<<n)                                                                                       // 861\nfunction bnpChangeBit(n,op) {                                                                                       // 862\n  var r = BigInteger.ONE.shiftLeft(n);                                                                              // 863\n  this.bitwiseTo(r,op,r);                                                                                           // 864\n  return r;                                                                                                         // 865\n}                                                                                                                   // 866\n                                                                                                                    // 867\n// (public) this | (1<<n)                                                                                           // 868\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }                                                            // 869\n                                                                                                                    // 870\n// (public) this & ~(1<<n)                                                                                          // 871\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }                                                      // 872\n                                                                                                                    // 873\n// (public) this ^ (1<<n)                                                                                           // 874\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }                                                          // 875\n                                                                                                                    // 876\n// (protected) r = this + a                                                                                         // 877\nfunction bnpAddTo(a,r) {                                                                                            // 878\n  var i = 0, c = 0, m = Math.min(a.t,this.t);                                                                       // 879\n  while(i < m) {                                                                                                    // 880\n    c += this[i]+a[i];                                                                                              // 881\n    r[i++] = c&this.DM;                                                                                             // 882\n    c >>= this.DB;                                                                                                  // 883\n  }                                                                                                                 // 884\n  if(a.t < this.t) {                                                                                                // 885\n    c += a.s;                                                                                                       // 886\n    while(i < this.t) {                                                                                             // 887\n      c += this[i];                                                                                                 // 888\n      r[i++] = c&this.DM;                                                                                           // 889\n      c >>= this.DB;                                                                                                // 890\n    }                                                                                                               // 891\n    c += this.s;                                                                                                    // 892\n  }                                                                                                                 // 893\n  else {                                                                                                            // 894\n    c += this.s;                                                                                                    // 895\n    while(i < a.t) {                                                                                                // 896\n      c += a[i];                                                                                                    // 897\n      r[i++] = c&this.DM;                                                                                           // 898\n      c >>= this.DB;                                                                                                // 899\n    }                                                                                                               // 900\n    c += a.s;                                                                                                       // 901\n  }                                                                                                                 // 902\n  r.s = (c<0)?-1:0;                                                                                                 // 903\n  if(c > 0) r[i++] = c;                                                                                             // 904\n  else if(c < -1) r[i++] = this.DV+c;                                                                               // 905\n  r.t = i;                                                                                                          // 906\n  r.clamp();                                                                                                        // 907\n}                                                                                                                   // 908\n                                                                                                                    // 909\n// (public) this + a                                                                                                // 910\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }                                                     // 911\n                                                                                                                    // 912\n// (public) this - a                                                                                                // 913\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }                                                // 914\n                                                                                                                    // 915\n// (public) this * a                                                                                                // 916\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }                                           // 917\n                                                                                                                    // 918\n// (public) this / a                                                                                                // 919\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }                                          // 920\n                                                                                                                    // 921\n// (public) this % a                                                                                                // 922\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }                                       // 923\n                                                                                                                    // 924\n// (public) [this/a,this%a]                                                                                         // 925\nfunction bnDivideAndRemainder(a) {                                                                                  // 926\n  var q = nbi(), r = nbi();                                                                                         // 927\n  this.divRemTo(a,q,r);                                                                                             // 928\n  return new Array(q,r);                                                                                            // 929\n}                                                                                                                   // 930\n                                                                                                                    // 931\n// (protected) this *= n, this >= 0, 1 < n < DV                                                                     // 932\nfunction bnpDMultiply(n) {                                                                                          // 933\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);                                                                    // 934\n  ++this.t;                                                                                                         // 935\n  this.clamp();                                                                                                     // 936\n}                                                                                                                   // 937\n                                                                                                                    // 938\n// (protected) this += n << w words, this >= 0                                                                      // 939\nfunction bnpDAddOffset(n,w) {                                                                                       // 940\n  while(this.t <= w) this[this.t++] = 0;                                                                            // 941\n  this[w] += n;                                                                                                     // 942\n  while(this[w] >= this.DV) {                                                                                       // 943\n    this[w] -= this.DV;                                                                                             // 944\n    if(++w >= this.t) this[this.t++] = 0;                                                                           // 945\n    ++this[w];                                                                                                      // 946\n  }                                                                                                                 // 947\n}                                                                                                                   // 948\n                                                                                                                    // 949\n// A \"null\" reducer                                                                                                 // 950\nfunction NullExp() {}                                                                                               // 951\nfunction nNop(x) { return x; }                                                                                      // 952\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }                                                                       // 953\nfunction nSqrTo(x,r) { x.squareTo(r); }                                                                             // 954\n                                                                                                                    // 955\nNullExp.prototype.convert = nNop;                                                                                   // 956\nNullExp.prototype.revert = nNop;                                                                                    // 957\nNullExp.prototype.mulTo = nMulTo;                                                                                   // 958\nNullExp.prototype.sqrTo = nSqrTo;                                                                                   // 959\n                                                                                                                    // 960\n// (public) this^e                                                                                                  // 961\nfunction bnPow(e) { return this.exp(e,new NullExp()); }                                                             // 962\n                                                                                                                    // 963\n// (protected) r = lower n words of \"this * a\", a.t <= n                                                            // 964\n// \"this\" should be the larger one if appropriate.                                                                  // 965\nfunction bnpMultiplyLowerTo(a,n,r) {                                                                                // 966\n  var i = Math.min(this.t+a.t,n);                                                                                   // 967\n  r.s = 0; // assumes a,this >= 0                                                                                   // 968\n  r.t = i;                                                                                                          // 969\n  while(i > 0) r[--i] = 0;                                                                                          // 970\n  var j;                                                                                                            // 971\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);                                       // 972\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);                                                   // 973\n  r.clamp();                                                                                                        // 974\n}                                                                                                                   // 975\n                                                                                                                    // 976\n// (protected) r = \"this * a\" without lower n words, n > 0                                                          // 977\n// \"this\" should be the larger one if appropriate.                                                                  // 978\nfunction bnpMultiplyUpperTo(a,n,r) {                                                                                // 979\n  --n;                                                                                                              // 980\n  var i = r.t = this.t+a.t-n;                                                                                       // 981\n  r.s = 0; // assumes a,this >= 0                                                                                   // 982\n  while(--i >= 0) r[i] = 0;                                                                                         // 983\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)                                                                       // 984\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);                                                             // 985\n  r.clamp();                                                                                                        // 986\n  r.drShiftTo(1,r);                                                                                                 // 987\n}                                                                                                                   // 988\n                                                                                                                    // 989\n// Barrett modular reduction                                                                                        // 990\nfunction Barrett(m) {                                                                                               // 991\n  // setup Barrett                                                                                                  // 992\n  this.r2 = nbi();                                                                                                  // 993\n  this.q3 = nbi();                                                                                                  // 994\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);                                                                          // 995\n  this.mu = this.r2.divide(m);                                                                                      // 996\n  this.m = m;                                                                                                       // 997\n}                                                                                                                   // 998\n                                                                                                                    // 999\nfunction barrettConvert(x) {                                                                                        // 1000\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);                                                             // 1001\n  else if(x.compareTo(this.m) < 0) return x;                                                                        // 1002\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }                                                    // 1003\n}                                                                                                                   // 1004\n                                                                                                                    // 1005\nfunction barrettRevert(x) { return x; }                                                                             // 1006\n                                                                                                                    // 1007\n// x = x mod m (HAC 14.42)                                                                                          // 1008\nfunction barrettReduce(x) {                                                                                         // 1009\n  x.drShiftTo(this.m.t-1,this.r2);                                                                                  // 1010\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }                                                             // 1011\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);                                                              // 1012\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);                                                               // 1013\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);                                                       // 1014\n  x.subTo(this.r2,x);                                                                                               // 1015\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);                                                                // 1016\n}                                                                                                                   // 1017\n                                                                                                                    // 1018\n// r = x^2 mod m; x != r                                                                                            // 1019\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                       // 1020\n                                                                                                                    // 1021\n// r = x*y mod m; x,y != r                                                                                          // 1022\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                 // 1023\n                                                                                                                    // 1024\nBarrett.prototype.convert = barrettConvert;                                                                         // 1025\nBarrett.prototype.revert = barrettRevert;                                                                           // 1026\nBarrett.prototype.reduce = barrettReduce;                                                                           // 1027\nBarrett.prototype.mulTo = barrettMulTo;                                                                             // 1028\nBarrett.prototype.sqrTo = barrettSqrTo;                                                                             // 1029\n                                                                                                                    // 1030\n// (public) this^e % m (HAC 14.85)                                                                                  // 1031\nfunction bnModPow(e,m) {                                                                                            // 1032\n  var i = e.bitLength(), k, r = nbv(1), z;                                                                          // 1033\n  if(i <= 0) return r;                                                                                              // 1034\n  else if(i < 18) k = 1;                                                                                            // 1035\n  else if(i < 48) k = 3;                                                                                            // 1036\n  else if(i < 144) k = 4;                                                                                           // 1037\n  else if(i < 768) k = 5;                                                                                           // 1038\n  else k = 6;                                                                                                       // 1039\n  if(i < 8)                                                                                                         // 1040\n    z = new Classic(m);                                                                                             // 1041\n  else if(m.isEven())                                                                                               // 1042\n    z = new Barrett(m);                                                                                             // 1043\n  else                                                                                                              // 1044\n    z = new Montgomery(m);                                                                                          // 1045\n                                                                                                                    // 1046\n  // precomputation                                                                                                 // 1047\n  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;                                                              // 1048\n  g[1] = z.convert(this);                                                                                           // 1049\n  if(k > 1) {                                                                                                       // 1050\n    var g2 = nbi();                                                                                                 // 1051\n    z.sqrTo(g[1],g2);                                                                                               // 1052\n    while(n <= km) {                                                                                                // 1053\n      g[n] = nbi();                                                                                                 // 1054\n      z.mulTo(g2,g[n-2],g[n]);                                                                                      // 1055\n      n += 2;                                                                                                       // 1056\n    }                                                                                                               // 1057\n  }                                                                                                                 // 1058\n                                                                                                                    // 1059\n  var j = e.t-1, w, is1 = true, r2 = nbi(), t;                                                                      // 1060\n  i = nbits(e[j])-1;                                                                                                // 1061\n  while(j >= 0) {                                                                                                   // 1062\n    if(i >= k1) w = (e[j]>>(i-k1))&km;                                                                              // 1063\n    else {                                                                                                          // 1064\n      w = (e[j]&((1<<(i+1))-1))<<(k1-i);                                                                            // 1065\n      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);                                                                        // 1066\n    }                                                                                                               // 1067\n                                                                                                                    // 1068\n    n = k;                                                                                                          // 1069\n    while((w&1) == 0) { w >>= 1; --n; }                                                                             // 1070\n    if((i -= n) < 0) { i += this.DB; --j; }                                                                         // 1071\n    if(is1) {\t// ret == 1, don't bother squaring or multiplying it                                                  // 1072\n      g[w].copyTo(r);                                                                                               // 1073\n      is1 = false;                                                                                                  // 1074\n    }                                                                                                               // 1075\n    else {                                                                                                          // 1076\n      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }                                                        // 1077\n      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }                                                      // 1078\n      z.mulTo(r2,g[w],r);                                                                                           // 1079\n    }                                                                                                               // 1080\n                                                                                                                    // 1081\n    while(j >= 0 && (e[j]&(1<<i)) == 0) {                                                                           // 1082\n      z.sqrTo(r,r2); t = r; r = r2; r2 = t;                                                                         // 1083\n      if(--i < 0) { i = this.DB-1; --j; }                                                                           // 1084\n    }                                                                                                               // 1085\n  }                                                                                                                 // 1086\n  return z.revert(r);                                                                                               // 1087\n}                                                                                                                   // 1088\n                                                                                                                    // 1089\n// (public) gcd(this,a) (HAC 14.54)                                                                                 // 1090\nfunction bnGCD(a) {                                                                                                 // 1091\n  var x = (this.s<0)?this.negate():this.clone();                                                                    // 1092\n  var y = (a.s<0)?a.negate():a.clone();                                                                             // 1093\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }                                                               // 1094\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();                                                             // 1095\n  if(g < 0) return x;                                                                                               // 1096\n  if(i < g) g = i;                                                                                                  // 1097\n  if(g > 0) {                                                                                                       // 1098\n    x.rShiftTo(g,x);                                                                                                // 1099\n    y.rShiftTo(g,y);                                                                                                // 1100\n  }                                                                                                                 // 1101\n  while(x.signum() > 0) {                                                                                           // 1102\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);                                                              // 1103\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);                                                              // 1104\n    if(x.compareTo(y) >= 0) {                                                                                       // 1105\n      x.subTo(y,x);                                                                                                 // 1106\n      x.rShiftTo(1,x);                                                                                              // 1107\n    }                                                                                                               // 1108\n    else {                                                                                                          // 1109\n      y.subTo(x,y);                                                                                                 // 1110\n      y.rShiftTo(1,y);                                                                                              // 1111\n    }                                                                                                               // 1112\n  }                                                                                                                 // 1113\n  if(g > 0) y.lShiftTo(g,y);                                                                                        // 1114\n  return y;                                                                                                         // 1115\n}                                                                                                                   // 1116\n                                                                                                                    // 1117\n// (protected) this % n, n < 2^26                                                                                   // 1118\nfunction bnpModInt(n) {                                                                                             // 1119\n  if(n <= 0) return 0;                                                                                              // 1120\n  var d = this.DV%n, r = (this.s<0)?n-1:0;                                                                          // 1121\n  if(this.t > 0)                                                                                                    // 1122\n    if(d == 0) r = this[0]%n;                                                                                       // 1123\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;                                                    // 1124\n  return r;                                                                                                         // 1125\n}                                                                                                                   // 1126\n                                                                                                                    // 1127\n// (public) 1/this % m (HAC 14.61)                                                                                  // 1128\nfunction bnModInverse(m) {                                                                                          // 1129\n  var ac = m.isEven();                                                                                              // 1130\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;                                              // 1131\n  var u = m.clone(), v = this.clone();                                                                              // 1132\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);                                                               // 1133\n  while(u.signum() != 0) {                                                                                          // 1134\n    while(u.isEven()) {                                                                                             // 1135\n      u.rShiftTo(1,u);                                                                                              // 1136\n      if(ac) {                                                                                                      // 1137\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }                                           // 1138\n        a.rShiftTo(1,a);                                                                                            // 1139\n      }                                                                                                             // 1140\n      else if(!b.isEven()) b.subTo(m,b);                                                                            // 1141\n      b.rShiftTo(1,b);                                                                                              // 1142\n    }                                                                                                               // 1143\n    while(v.isEven()) {                                                                                             // 1144\n      v.rShiftTo(1,v);                                                                                              // 1145\n      if(ac) {                                                                                                      // 1146\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }                                           // 1147\n        c.rShiftTo(1,c);                                                                                            // 1148\n      }                                                                                                             // 1149\n      else if(!d.isEven()) d.subTo(m,d);                                                                            // 1150\n      d.rShiftTo(1,d);                                                                                              // 1151\n    }                                                                                                               // 1152\n    if(u.compareTo(v) >= 0) {                                                                                       // 1153\n      u.subTo(v,u);                                                                                                 // 1154\n      if(ac) a.subTo(c,a);                                                                                          // 1155\n      b.subTo(d,b);                                                                                                 // 1156\n    }                                                                                                               // 1157\n    else {                                                                                                          // 1158\n      v.subTo(u,v);                                                                                                 // 1159\n      if(ac) c.subTo(a,c);                                                                                          // 1160\n      d.subTo(b,d);                                                                                                 // 1161\n    }                                                                                                               // 1162\n  }                                                                                                                 // 1163\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;                                                      // 1164\n  if(d.compareTo(m) >= 0) return d.subtract(m);                                                                     // 1165\n  if(d.signum() < 0) d.addTo(m,d); else return d;                                                                   // 1166\n  if(d.signum() < 0) return d.add(m); else return d;                                                                // 1167\n}                                                                                                                   // 1168\n                                                                                                                    // 1169\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];                                                                  // 1171\n                                                                                                                    // 1172\n// (public) test primality with certainty >= 1-.5^t                                                                 // 1173\nfunction bnIsProbablePrime(t) {                                                                                     // 1174\n  var i, x = this.abs();                                                                                            // 1175\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {                                                           // 1176\n    for(i = 0; i < lowprimes.length; ++i)                                                                           // 1177\n      if(x[0] == lowprimes[i]) return true;                                                                         // 1178\n    return false;                                                                                                   // 1179\n  }                                                                                                                 // 1180\n  if(x.isEven()) return false;                                                                                      // 1181\n  i = 1;                                                                                                            // 1182\n  while(i < lowprimes.length) {                                                                                     // 1183\n    var m = lowprimes[i], j = i+1;                                                                                  // 1184\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];                                                   // 1185\n    m = x.modInt(m);                                                                                                // 1186\n    while(i < j) if(m%lowprimes[i++] == 0) return false;                                                            // 1187\n  }                                                                                                                 // 1188\n  return x.millerRabin(t);                                                                                          // 1189\n}                                                                                                                   // 1190\n                                                                                                                    // 1191\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)                                                      // 1192\nfunction bnpMillerRabin(t) {                                                                                        // 1193\n  var n1 = this.subtract(BigInteger.ONE);                                                                           // 1194\n  var k = n1.getLowestSetBit();                                                                                     // 1195\n  if(k <= 0) return false;                                                                                          // 1196\n  var r = n1.shiftRight(k);                                                                                         // 1197\n  t = (t+1)>>1;                                                                                                     // 1198\n  if(t > lowprimes.length) t = lowprimes.length;                                                                    // 1199\n  var a = nbi();                                                                                                    // 1200\n  for(var i = 0; i < t; ++i) {                                                                                      // 1201\n    a.fromInt(lowprimes[i]);                                                                                        // 1202\n    var y = a.modPow(r,this);                                                                                       // 1203\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {                                                  // 1204\n      var j = 1;                                                                                                    // 1205\n      while(j++ < k && y.compareTo(n1) != 0) {                                                                      // 1206\n        y = y.modPowInt(2,this);                                                                                    // 1207\n        if(y.compareTo(BigInteger.ONE) == 0) return false;                                                          // 1208\n      }                                                                                                             // 1209\n      if(y.compareTo(n1) != 0) return false;                                                                        // 1210\n    }                                                                                                               // 1211\n  }                                                                                                                 // 1212\n  return true;                                                                                                      // 1213\n}                                                                                                                   // 1214\n                                                                                                                    // 1215\n// protected                                                                                                        // 1216\nBigInteger.prototype.chunkSize = bnpChunkSize;                                                                      // 1217\nBigInteger.prototype.toRadix = bnpToRadix;                                                                          // 1218\nBigInteger.prototype.fromRadix = bnpFromRadix;                                                                      // 1219\nBigInteger.prototype.fromNumber = bnpFromNumber;                                                                    // 1220\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;                                                                      // 1221\nBigInteger.prototype.changeBit = bnpChangeBit;                                                                      // 1222\nBigInteger.prototype.addTo = bnpAddTo;                                                                              // 1223\nBigInteger.prototype.dMultiply = bnpDMultiply;                                                                      // 1224\nBigInteger.prototype.dAddOffset = bnpDAddOffset;                                                                    // 1225\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;                                                          // 1226\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;                                                          // 1227\nBigInteger.prototype.modInt = bnpModInt;                                                                            // 1228\nBigInteger.prototype.millerRabin = bnpMillerRabin;                                                                  // 1229\n                                                                                                                    // 1230\n// public                                                                                                           // 1231\nBigInteger.prototype.clone = bnClone;                                                                               // 1232\nBigInteger.prototype.intValue = bnIntValue;                                                                         // 1233\nBigInteger.prototype.byteValue = bnByteValue;                                                                       // 1234\nBigInteger.prototype.shortValue = bnShortValue;                                                                     // 1235\nBigInteger.prototype.signum = bnSigNum;                                                                             // 1236\nBigInteger.prototype.toByteArray = bnToByteArray;                                                                   // 1237\nBigInteger.prototype.equals = bnEquals;                                                                             // 1238\nBigInteger.prototype.min = bnMin;                                                                                   // 1239\nBigInteger.prototype.max = bnMax;                                                                                   // 1240\nBigInteger.prototype.and = bnAnd;                                                                                   // 1241\nBigInteger.prototype.or = bnOr;                                                                                     // 1242\nBigInteger.prototype.xor = bnXor;                                                                                   // 1243\nBigInteger.prototype.andNot = bnAndNot;                                                                             // 1244\nBigInteger.prototype.not = bnNot;                                                                                   // 1245\nBigInteger.prototype.shiftLeft = bnShiftLeft;                                                                       // 1246\nBigInteger.prototype.shiftRight = bnShiftRight;                                                                     // 1247\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;                                                           // 1248\nBigInteger.prototype.bitCount = bnBitCount;                                                                         // 1249\nBigInteger.prototype.testBit = bnTestBit;                                                                           // 1250\nBigInteger.prototype.setBit = bnSetBit;                                                                             // 1251\nBigInteger.prototype.clearBit = bnClearBit;                                                                         // 1252\nBigInteger.prototype.flipBit = bnFlipBit;                                                                           // 1253\nBigInteger.prototype.add = bnAdd;                                                                                   // 1254\nBigInteger.prototype.subtract = bnSubtract;                                                                         // 1255\nBigInteger.prototype.multiply = bnMultiply;                                                                         // 1256\nBigInteger.prototype.divide = bnDivide;                                                                             // 1257\nBigInteger.prototype.remainder = bnRemainder;                                                                       // 1258\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;                                                     // 1259\nBigInteger.prototype.modPow = bnModPow;                                                                             // 1260\nBigInteger.prototype.modInverse = bnModInverse;                                                                     // 1261\nBigInteger.prototype.pow = bnPow;                                                                                   // 1262\nBigInteger.prototype.gcd = bnGCD;                                                                                   // 1263\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;                                                           // 1264\n                                                                                                                    // 1265\n// BigInteger interfaces not implemented in jsbn:                                                                   // 1266\n                                                                                                                    // 1267\n// BigInteger(int signum, byte[] magnitude)                                                                         // 1268\n// double doubleValue()                                                                                             // 1269\n// float floatValue()                                                                                               // 1270\n// int hashCode()                                                                                                   // 1271\n// long longValue()                                                                                                 // 1272\n// static BigInteger valueOf(long val)                                                                              // 1273\n                                                                                                                    // 1274\n/// METEOR WRAPPER                                                                                                  // 1275\nreturn BigInteger;                                                                                                  // 1276\n})();                                                                                                               // 1277\n                                                                                                                    // 1278\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/srp/srp.js                                                                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// This package contains just enough of the original SRP code to                                                    // 1\n// support the backwards-compatibility upgrade path.                                                                // 2\n//                                                                                                                  // 3\n// An SRP (and possibly also accounts-srp) package should eventually be                                             // 4\n// available in Atmosphere so that users can continue to use SRP if they                                            // 5\n// want to.                                                                                                         // 6\n                                                                                                                    // 7\nSRP = {};                                                                                                           // 8\n                                                                                                                    // 9\n/**                                                                                                                 // 10\n * Generate a new SRP verifier. Password is the plaintext password.                                                 // 11\n *                                                                                                                  // 12\n * options is optional and can include:                                                                             // 13\n * - identity: String. The SRP username to user. Mostly this is passed                                              // 14\n *   in for testing.  Random UUID if not provided.                                                                  // 15\n * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.\n * - salt: String. A salt to use.  Mostly this is passed in for                                                     // 17\n *   testing.  Random UUID if not provided.                                                                         // 18\n * - SRP parameters (see _defaults and paramsFromOptions below)                                                     // 19\n */                                                                                                                 // 20\nSRP.generateVerifier = function (password, options) {                                                               // 21\n  var params = paramsFromOptions(options);                                                                          // 22\n                                                                                                                    // 23\n  var salt = (options && options.salt) || Random.secret();                                                          // 24\n                                                                                                                    // 25\n  var identity;                                                                                                     // 26\n  var hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;                                     // 27\n  if (!hashedIdentityAndPassword) {                                                                                 // 28\n    identity = (options && options.identity) || Random.secret();                                                    // 29\n    hashedIdentityAndPassword = params.hash(identity + \":\" + password);                                             // 30\n  }                                                                                                                 // 31\n                                                                                                                    // 32\n  var x = params.hash(salt + hashedIdentityAndPassword);                                                            // 33\n  var xi = new BigInteger(x, 16);                                                                                   // 34\n  var v = params.g.modPow(xi, params.N);                                                                            // 35\n                                                                                                                    // 36\n  return {                                                                                                          // 37\n    identity: identity,                                                                                             // 38\n    salt: salt,                                                                                                     // 39\n    verifier: v.toString(16)                                                                                        // 40\n  };                                                                                                                // 41\n};                                                                                                                  // 42\n                                                                                                                    // 43\n// For use with check().                                                                                            // 44\nSRP.matchVerifier = {                                                                                               // 45\n  identity: String,                                                                                                 // 46\n  salt: String,                                                                                                     // 47\n  verifier: String                                                                                                  // 48\n};                                                                                                                  // 49\n                                                                                                                    // 50\n                                                                                                                    // 51\n/**                                                                                                                 // 52\n * Default parameter values for SRP.                                                                                // 53\n *                                                                                                                  // 54\n */                                                                                                                 // 55\nvar _defaults = {                                                                                                   // 56\n  hash: function (x) { return SHA256(x).toLowerCase(); },                                                           // 57\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")                                                                                            // 59\n};                                                                                                                  // 60\n_defaults.k = new BigInteger(                                                                                       // 61\n  _defaults.hash(                                                                                                   // 62\n    _defaults.N.toString(16) +                                                                                      // 63\n      _defaults.g.toString(16)),                                                                                    // 64\n  16);                                                                                                              // 65\n                                                                                                                    // 66\n/**                                                                                                                 // 67\n * Process an options hash to create SRP parameters.                                                                // 68\n *                                                                                                                  // 69\n * Options can include:                                                                                             // 70\n * - hash: Function. Defaults to SHA256.                                                                            // 71\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054                                              // 72\n * - g: String or BigInteger. Defaults to 2.                                                                        // 73\n * - k: String or BigInteger. Defaults to hash(N, g)                                                                // 74\n */                                                                                                                 // 75\nvar paramsFromOptions = function (options) {                                                                        // 76\n  if (!options) // fast path                                                                                        // 77\n    return _defaults;                                                                                               // 78\n                                                                                                                    // 79\n  var ret = _.extend({}, _defaults);                                                                                // 80\n                                                                                                                    // 81\n  _.each(['N', 'g', 'k'], function (p) {                                                                            // 82\n    if (options[p]) {                                                                                               // 83\n      if (typeof options[p] === \"string\")                                                                           // 84\n        ret[p] = new BigInteger(options[p], 16);                                                                    // 85\n      else if (options[p] instanceof BigInteger)                                                                    // 86\n        ret[p] = options[p];                                                                                        // 87\n      else                                                                                                          // 88\n        throw new Error(\"Invalid parameter: \" + p);                                                                 // 89\n    }                                                                                                               // 90\n  });                                                                                                               // 91\n                                                                                                                    // 92\n  if (options.hash)                                                                                                 // 93\n    ret.hash = function (x) { return options.hash(x).toLowerCase(); };                                              // 94\n                                                                                                                    // 95\n  if (!options.k && (options.N || options.g || options.hash)) {                                                     // 96\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));                                                      // 97\n  }                                                                                                                 // 98\n                                                                                                                    // 99\n  return ret;                                                                                                       // 100\n};                                                                                                                  // 101\n                                                                                                                    // 102\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.srp = {}, {\n  SRP: SRP\n});\n\n})();\n","servePath":"/packages/srp.js"}]