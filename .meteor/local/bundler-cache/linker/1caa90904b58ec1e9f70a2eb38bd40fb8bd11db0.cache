[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\n\n/* Package-scope variables */\nvar Date, parseInt, parseFloat, originalStringReplace;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"es5-shim\":{\"client.js\":[\"./import_globals.js\",\"es5-shim/es5-shim.js\",\"es5-shim/es5-sham.js\",\"./console.js\",\"./export_globals.js\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/client.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./import_globals.js\");                                                                                        // 1\nrequire(\"es5-shim/es5-shim.js\");                                                                                       // 2\nrequire(\"es5-shim/es5-sham.js\");                                                                                       // 3\nrequire(\"./console.js\");                                                                                               // 4\nrequire(\"./export_globals.js\");                                                                                        // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"console.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/console.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\n                                                                                                                       // 2\nfunction wrap(method) {                                                                                                // 3\n  var original = console[method];                                                                                      // 4\n  if (original && typeof original === \"object\") {                                                                      // 5\n    // Turn callable console method objects into actual functions.                                                     // 6\n    console[method] = function () {                                                                                    // 7\n      return Function.prototype.apply.call(                                                                            // 8\n        original, console, arguments                                                                                   // 9\n      );                                                                                                               // 10\n    };                                                                                                                 // 11\n  }                                                                                                                    // 12\n}                                                                                                                      // 13\n                                                                                                                       // 14\nif (typeof console === \"object\" &&                                                                                     // 15\n    // In older Internet Explorers, methods like console.log are actually                                              // 16\n    // callable objects rather than functions.                                                                         // 17\n    typeof console.log === \"object\") {                                                                                 // 18\n  for (var method in console) {                                                                                        // 19\n    // In most browsers, this hasOwn check will fail for all console                                                   // 20\n    // methods anyway, but fortunately in IE8 the method objects we care                                               // 21\n    // about are own properties.                                                                                       // 22\n    if (hasOwn.call(console, method)) {                                                                                // 23\n      wrap(method);                                                                                                    // 24\n    }                                                                                                                  // 25\n  }                                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"export_globals.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/export_globals.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (global.Date !== Date) {                                                                                            // 1\n  global.Date = Date;                                                                                                  // 2\n}                                                                                                                      // 3\n                                                                                                                       // 4\nif (global.parseInt !== parseInt) {                                                                                    // 5\n  global.parseInt = parseInt;                                                                                          // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (global.parseFloat !== parseFloat) {                                                                                // 9\n  global.parseFloat = parseFloat;                                                                                      // 10\n}                                                                                                                      // 11\n                                                                                                                       // 12\nvar Sp = String.prototype;                                                                                             // 13\nif (Sp.replace !== originalStringReplace) {                                                                            // 14\n  // Restore the original value of String#replace, because the es5-shim                                                // 15\n  // reimplementation is buggy. See also import_globals.js.                                                            // 16\n  Sp.replace = originalStringReplace;                                                                                  // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"import_globals.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/import_globals.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Because the es5-{shim,sham}.js code assigns to Date and parseInt,                                                   // 1\n// Meteor treats them as package variables, and so declares them as                                                    // 2\n// variables in package scope, which causes some references to Date and                                                // 3\n// parseInt in the shim/sham code to refer to those undefined package                                                  // 4\n// variables. The simplest solution seems to be to initialize the package                                              // 5\n// variables to their appropriate global values.                                                                       // 6\nDate = global.Date;                                                                                                    // 7\nparseInt = global.parseInt;                                                                                            // 8\nparseFloat = global.parseFloat;                                                                                        // 9\n                                                                                                                       // 10\n// Save the original String#replace method, because es5-shim's                                                         // 11\n// reimplementation of it causes problems in markdown/showdown.js.                                                     // 12\n// This original method will be restored in export_globals.js.                                                         // 13\noriginalStringReplace = String.prototype.replace;                                                                      // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"es5-shim\":{\"es5-shim.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/es5-shim/node_modules/es5-shim/es5-shim.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * https://github.com/es-shims/es5-shim                                                                                // 2\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                  // 3\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                        // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n// vim: ts=4 sts=4 sw=4 expandtab                                                                                      // 7\n                                                                                                                       // 8\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                   // 9\n;                                                                                                                      // 10\n                                                                                                                       // 11\n// UMD (Universal Module Definition)                                                                                   // 12\n// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                             // 13\n(function (root, factory) {                                                                                            // 14\n    'use strict';                                                                                                      // 15\n                                                                                                                       // 16\n    /* global define, exports, module */                                                                               // 17\n    if (typeof define === 'function' && define.amd) {                                                                  // 18\n        // AMD. Register as an anonymous module.                                                                       // 19\n        define(factory);                                                                                               // 20\n    } else if (typeof exports === 'object') {                                                                          // 21\n        // Node. Does not work with strict CommonJS, but                                                               // 22\n        // only CommonJS-like enviroments that support module.exports,                                                 // 23\n        // like Node.                                                                                                  // 24\n        module.exports = factory();                                                                                    // 25\n    } else {                                                                                                           // 26\n        // Browser globals (root is window)                                                                            // 27\n        root.returnExports = factory();                                                                                // 28\n    }                                                                                                                  // 29\n}(this, function () {                                                                                                  // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Brings an environment as close to ECMAScript 5 compliance                                                           // 33\n * as is possible with the facilities of erstwhile engines.                                                            // 34\n *                                                                                                                     // 35\n * Annotated ES5: http://es5.github.com/ (specific links below)                                                        // 36\n * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf                                 // 37\n * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/                    // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\n// Shortcut to an often accessed properties, in order to avoid multiple                                                // 41\n// dereference that costs universally. This also holds a reference to known-good                                       // 42\n// functions.                                                                                                          // 43\nvar $Array = Array;                                                                                                    // 44\nvar ArrayPrototype = $Array.prototype;                                                                                 // 45\nvar $Object = Object;                                                                                                  // 46\nvar ObjectPrototype = $Object.prototype;                                                                               // 47\nvar $Function = Function;                                                                                              // 48\nvar FunctionPrototype = $Function.prototype;                                                                           // 49\nvar $String = String;                                                                                                  // 50\nvar StringPrototype = $String.prototype;                                                                               // 51\nvar $Number = Number;                                                                                                  // 52\nvar NumberPrototype = $Number.prototype;                                                                               // 53\nvar array_slice = ArrayPrototype.slice;                                                                                // 54\nvar array_splice = ArrayPrototype.splice;                                                                              // 55\nvar array_push = ArrayPrototype.push;                                                                                  // 56\nvar array_unshift = ArrayPrototype.unshift;                                                                            // 57\nvar array_concat = ArrayPrototype.concat;                                                                              // 58\nvar array_join = ArrayPrototype.join;                                                                                  // 59\nvar call = FunctionPrototype.call;                                                                                     // 60\nvar apply = FunctionPrototype.apply;                                                                                   // 61\nvar max = Math.max;                                                                                                    // 62\nvar min = Math.min;                                                                                                    // 63\n                                                                                                                       // 64\n// Having a toString local variable name breaks in Opera so use to_string.                                             // 65\nvar to_string = ObjectPrototype.toString;                                                                              // 66\n                                                                                                                       // 67\n/* global Symbol */                                                                                                    // 68\n/* eslint-disable one-var-declaration-per-line, no-redeclare */                                                        // 69\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';                           // 70\nvar isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\\/\\/.*\\n/g, ''); var multiStripped = singleStripped.replace(/\\/\\*[.\\s\\S]*\\*\\//g, ''); var spaceStripped = multiStripped.replace(/\\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\n                                                                                                                       // 72\nvar isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };\nvar isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };\n/* eslint-enable one-var-declaration-per-line, no-redeclare */                                                         // 75\n                                                                                                                       // 76\n/* inlined from http://npmjs.com/define-properties */                                                                  // 77\nvar supportsDescriptors = $Object.defineProperty && (function () {                                                     // 78\n    try {                                                                                                              // 79\n        var obj = {};                                                                                                  // 80\n        $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });                                           // 81\n        for (var _ in obj) { return false; }                                                                           // 82\n        return obj.x === obj;                                                                                          // 83\n    } catch (e) { /* this is ES3 */                                                                                    // 84\n        return false;                                                                                                  // 85\n    }                                                                                                                  // 86\n}());                                                                                                                  // 87\nvar defineProperties = (function (has) {                                                                               // 88\n  // Define configurable, writable, and non-enumerable props                                                           // 89\n  // if they don't exist.                                                                                              // 90\n  var defineProperty;                                                                                                  // 91\n  if (supportsDescriptors) {                                                                                           // 92\n      defineProperty = function (object, name, method, forceAssign) {                                                  // 93\n          if (!forceAssign && (name in object)) { return; }                                                            // 94\n          $Object.defineProperty(object, name, {                                                                       // 95\n              configurable: true,                                                                                      // 96\n              enumerable: false,                                                                                       // 97\n              writable: true,                                                                                          // 98\n              value: method                                                                                            // 99\n          });                                                                                                          // 100\n      };                                                                                                               // 101\n  } else {                                                                                                             // 102\n      defineProperty = function (object, name, method, forceAssign) {                                                  // 103\n          if (!forceAssign && (name in object)) { return; }                                                            // 104\n          object[name] = method;                                                                                       // 105\n      };                                                                                                               // 106\n  }                                                                                                                    // 107\n  return function defineProperties(object, map, forceAssign) {                                                         // 108\n      for (var name in map) {                                                                                          // 109\n          if (has.call(map, name)) {                                                                                   // 110\n            defineProperty(object, name, map[name], forceAssign);                                                      // 111\n          }                                                                                                            // 112\n      }                                                                                                                // 113\n  };                                                                                                                   // 114\n}(ObjectPrototype.hasOwnProperty));                                                                                    // 115\n                                                                                                                       // 116\n//                                                                                                                     // 117\n// Util                                                                                                                // 118\n// ======                                                                                                              // 119\n//                                                                                                                     // 120\n                                                                                                                       // 121\n/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */                                      // 122\nvar isPrimitive = function isPrimitive(input) {                                                                        // 123\n    var type = typeof input;                                                                                           // 124\n    return input === null || (type !== 'object' && type !== 'function');                                               // 125\n};                                                                                                                     // 126\n                                                                                                                       // 127\nvar isActualNaN = $Number.isNaN || function (x) { return x !== x; };                                                   // 128\n                                                                                                                       // 129\nvar ES = {                                                                                                             // 130\n    // ES5 9.4                                                                                                         // 131\n    // http://es5.github.com/#x9.4                                                                                     // 132\n    // http://jsperf.com/to-integer                                                                                    // 133\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */                                         // 134\n    ToInteger: function ToInteger(num) {                                                                               // 135\n        var n = +num;                                                                                                  // 136\n        if (isActualNaN(n)) {                                                                                          // 137\n            n = 0;                                                                                                     // 138\n        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {                                                       // 139\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                               // 140\n        }                                                                                                              // 141\n        return n;                                                                                                      // 142\n    },                                                                                                                 // 143\n                                                                                                                       // 144\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */                                       // 145\n    ToPrimitive: function ToPrimitive(input) {                                                                         // 146\n        var val, valueOf, toStr;                                                                                       // 147\n        if (isPrimitive(input)) {                                                                                      // 148\n            return input;                                                                                              // 149\n        }                                                                                                              // 150\n        valueOf = input.valueOf;                                                                                       // 151\n        if (isCallable(valueOf)) {                                                                                     // 152\n            val = valueOf.call(input);                                                                                 // 153\n            if (isPrimitive(val)) {                                                                                    // 154\n                return val;                                                                                            // 155\n            }                                                                                                          // 156\n        }                                                                                                              // 157\n        toStr = input.toString;                                                                                        // 158\n        if (isCallable(toStr)) {                                                                                       // 159\n            val = toStr.call(input);                                                                                   // 160\n            if (isPrimitive(val)) {                                                                                    // 161\n                return val;                                                                                            // 162\n            }                                                                                                          // 163\n        }                                                                                                              // 164\n        throw new TypeError();                                                                                         // 165\n    },                                                                                                                 // 166\n                                                                                                                       // 167\n    // ES5 9.9                                                                                                         // 168\n    // http://es5.github.com/#x9.9                                                                                     // 169\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */                                          // 170\n    ToObject: function (o) {                                                                                           // 171\n        if (o == null) { // this matches both null and undefined                                                       // 172\n            throw new TypeError(\"can't convert \" + o + ' to object');                                                  // 173\n        }                                                                                                              // 174\n        return $Object(o);                                                                                             // 175\n    },                                                                                                                 // 176\n                                                                                                                       // 177\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */                                          // 178\n    ToUint32: function ToUint32(x) {                                                                                   // 179\n        return x >>> 0;                                                                                                // 180\n    }                                                                                                                  // 181\n};                                                                                                                     // 182\n                                                                                                                       // 183\n//                                                                                                                     // 184\n// Function                                                                                                            // 185\n// ========                                                                                                            // 186\n//                                                                                                                     // 187\n                                                                                                                       // 188\n// ES-5 15.3.4.5                                                                                                       // 189\n// http://es5.github.com/#x15.3.4.5                                                                                    // 190\n                                                                                                                       // 191\nvar Empty = function Empty() {};                                                                                       // 192\n                                                                                                                       // 193\ndefineProperties(FunctionPrototype, {                                                                                  // 194\n    bind: function bind(that) { // .length is 1                                                                        // 195\n        // 1. Let Target be the this value.                                                                            // 196\n        var target = this;                                                                                             // 197\n        // 2. If IsCallable(Target) is false, throw a TypeError exception.                                             // 198\n        if (!isCallable(target)) {                                                                                     // 199\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);                           // 200\n        }                                                                                                              // 201\n        // 3. Let A be a new (possibly empty) internal list of all of the                                              // 202\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.                                        // 203\n        // XXX slicedArgs will stand in for \"A\" if used                                                                // 204\n        var args = array_slice.call(arguments, 1); // for normal call                                                  // 205\n        // 4. Let F be a new native ECMAScript object.                                                                 // 206\n        // 11. Set the [[Prototype]] internal property of F to the standard                                            // 207\n        //   built-in Function prototype object as specified in 15.3.3.1.                                              // 208\n        // 12. Set the [[Call]] internal property of F as described in                                                 // 209\n        //   15.3.4.5.1.                                                                                               // 210\n        // 13. Set the [[Construct]] internal property of F as described in                                            // 211\n        //   15.3.4.5.2.                                                                                               // 212\n        // 14. Set the [[HasInstance]] internal property of F as described in                                          // 213\n        //   15.3.4.5.3.                                                                                               // 214\n        var bound;                                                                                                     // 215\n        var binder = function () {                                                                                     // 216\n                                                                                                                       // 217\n            if (this instanceof bound) {                                                                               // 218\n                // 15.3.4.5.2 [[Construct]]                                                                            // 219\n                // When the [[Construct]] internal method of a function object,                                        // 220\n                // F that was created using the bind function is called with a                                         // 221\n                // list of arguments ExtraArgs, the following steps are taken:                                         // 222\n                // 1. Let target be the value of F's [[TargetFunction]]                                                // 223\n                //   internal property.                                                                                // 224\n                // 2. If target has no [[Construct]] internal method, a                                                // 225\n                //   TypeError exception is thrown.                                                                    // 226\n                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal                                         // 227\n                //   property.                                                                                         // 228\n                // 4. Let args be a new list containing the same values as the                                         // 229\n                //   list boundArgs in the same order followed by the same                                             // 230\n                //   values as the list ExtraArgs in the same order.                                                   // 231\n                // 5. Return the result of calling the [[Construct]] internal                                          // 232\n                //   method of target providing args as the arguments.                                                 // 233\n                                                                                                                       // 234\n                var result = apply.call(                                                                               // 235\n                    target,                                                                                            // 236\n                    this,                                                                                              // 237\n                    array_concat.call(args, array_slice.call(arguments))                                               // 238\n                );                                                                                                     // 239\n                if ($Object(result) === result) {                                                                      // 240\n                    return result;                                                                                     // 241\n                }                                                                                                      // 242\n                return this;                                                                                           // 243\n                                                                                                                       // 244\n            } else {                                                                                                   // 245\n                // 15.3.4.5.1 [[Call]]                                                                                 // 246\n                // When the [[Call]] internal method of a function object, F,                                          // 247\n                // which was created using the bind function is called with a                                          // 248\n                // this value and a list of arguments ExtraArgs, the following                                         // 249\n                // steps are taken:                                                                                    // 250\n                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal                                         // 251\n                //   property.                                                                                         // 252\n                // 2. Let boundThis be the value of F's [[BoundThis]] internal                                         // 253\n                //   property.                                                                                         // 254\n                // 3. Let target be the value of F's [[TargetFunction]] internal                                       // 255\n                //   property.                                                                                         // 256\n                // 4. Let args be a new list containing the same values as the                                         // 257\n                //   list boundArgs in the same order followed by the same                                             // 258\n                //   values as the list ExtraArgs in the same order.                                                   // 259\n                // 5. Return the result of calling the [[Call]] internal method                                        // 260\n                //   of target providing boundThis as the this value and                                               // 261\n                //   providing args as the arguments.                                                                  // 262\n                                                                                                                       // 263\n                // equiv: target.call(this, ...boundArgs, ...args)                                                     // 264\n                return apply.call(                                                                                     // 265\n                    target,                                                                                            // 266\n                    that,                                                                                              // 267\n                    array_concat.call(args, array_slice.call(arguments))                                               // 268\n                );                                                                                                     // 269\n                                                                                                                       // 270\n            }                                                                                                          // 271\n                                                                                                                       // 272\n        };                                                                                                             // 273\n                                                                                                                       // 274\n        // 15. If the [[Class]] internal property of Target is \"Function\", then                                        // 275\n        //     a. Let L be the length property of Target minus the length of A.                                        // 276\n        //     b. Set the length own property of F to either 0 or L, whichever is                                      // 277\n        //       larger.                                                                                               // 278\n        // 16. Else set the length own property of F to 0.                                                             // 279\n                                                                                                                       // 280\n        var boundLength = max(0, target.length - args.length);                                                         // 281\n                                                                                                                       // 282\n        // 17. Set the attributes of the length own property of F to the values                                        // 283\n        //   specified in 15.3.5.1.                                                                                    // 284\n        var boundArgs = [];                                                                                            // 285\n        for (var i = 0; i < boundLength; i++) {                                                                        // 286\n            array_push.call(boundArgs, '$' + i);                                                                       // 287\n        }                                                                                                              // 288\n                                                                                                                       // 289\n        // XXX Build a dynamic function with desired amount of arguments is the only                                   // 290\n        // way to set the length property of a function.                                                               // 291\n        // In environments where Content Security Policies enabled (Chrome extensions,                                 // 292\n        // for ex.) all use of eval or Function costructor throws an exception.                                        // 293\n        // However in all of these environments Function.prototype.bind exists                                         // 294\n        // and so this code will never be executed.                                                                    // 295\n        bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);\n                                                                                                                       // 297\n        if (target.prototype) {                                                                                        // 298\n            Empty.prototype = target.prototype;                                                                        // 299\n            bound.prototype = new Empty();                                                                             // 300\n            // Clean up dangling references.                                                                           // 301\n            Empty.prototype = null;                                                                                    // 302\n        }                                                                                                              // 303\n                                                                                                                       // 304\n        // TODO                                                                                                        // 305\n        // 18. Set the [[Extensible]] internal property of F to true.                                                  // 306\n                                                                                                                       // 307\n        // TODO                                                                                                        // 308\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).                                         // 309\n        // 20. Call the [[DefineOwnProperty]] internal method of F with                                                // 310\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:                                        // 311\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and                                             // 312\n        //   false.                                                                                                    // 313\n        // 21. Call the [[DefineOwnProperty]] internal method of F with                                                // 314\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,                                              // 315\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},                                        // 316\n        //   and false.                                                                                                // 317\n                                                                                                                       // 318\n        // TODO                                                                                                        // 319\n        // NOTE Function objects created using Function.prototype.bind do not                                          // 320\n        // have a prototype property or the [[Code]], [[FormalParameters]], and                                        // 321\n        // [[Scope]] internal properties.                                                                              // 322\n        // XXX can't delete prototype in pure-js.                                                                      // 323\n                                                                                                                       // 324\n        // 22. Return F.                                                                                               // 325\n        return bound;                                                                                                  // 326\n    }                                                                                                                  // 327\n});                                                                                                                    // 328\n                                                                                                                       // 329\n// _Please note: Shortcuts are defined after `Function.prototype.bind` as we                                           // 330\n// use it in defining shortcuts.                                                                                       // 331\nvar owns = call.bind(ObjectPrototype.hasOwnProperty);                                                                  // 332\nvar toStr = call.bind(ObjectPrototype.toString);                                                                       // 333\nvar arraySlice = call.bind(array_slice);                                                                               // 334\nvar arraySliceApply = apply.bind(array_slice);                                                                         // 335\nvar strSlice = call.bind(StringPrototype.slice);                                                                       // 336\nvar strSplit = call.bind(StringPrototype.split);                                                                       // 337\nvar strIndexOf = call.bind(StringPrototype.indexOf);                                                                   // 338\nvar pushCall = call.bind(array_push);                                                                                  // 339\nvar isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);                                                          // 340\nvar arraySort = call.bind(ArrayPrototype.sort);                                                                        // 341\n                                                                                                                       // 342\n//                                                                                                                     // 343\n// Array                                                                                                               // 344\n// =====                                                                                                               // 345\n//                                                                                                                     // 346\n                                                                                                                       // 347\nvar isArray = $Array.isArray || function isArray(obj) {                                                                // 348\n    return toStr(obj) === '[object Array]';                                                                            // 349\n};                                                                                                                     // 350\n                                                                                                                       // 351\n// ES5 15.4.4.12                                                                                                       // 352\n// http://es5.github.com/#x15.4.4.13                                                                                   // 353\n// Return len+argCount.                                                                                                // 354\n// [bugfix, ielt8]                                                                                                     // 355\n// IE < 8 bug: [].unshift(0) === undefined but should be \"1\"                                                           // 356\nvar hasUnshiftReturnValueBug = [].unshift(0) !== 1;                                                                    // 357\ndefineProperties(ArrayPrototype, {                                                                                     // 358\n    unshift: function () {                                                                                             // 359\n        array_unshift.apply(this, arguments);                                                                          // 360\n        return this.length;                                                                                            // 361\n    }                                                                                                                  // 362\n}, hasUnshiftReturnValueBug);                                                                                          // 363\n                                                                                                                       // 364\n// ES5 15.4.3.2                                                                                                        // 365\n// http://es5.github.com/#x15.4.3.2                                                                                    // 366\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray                                  // 367\ndefineProperties($Array, { isArray: isArray });                                                                        // 368\n                                                                                                                       // 369\n// The IsCallable() check in the Array functions                                                                       // 370\n// has been replaced with a strict check on the                                                                        // 371\n// internal class of the object to trap cases where                                                                    // 372\n// the provided function was actually a regular                                                                        // 373\n// expression literal, which in V8 and                                                                                 // 374\n// JavaScriptCore is a typeof \"function\".  Only in                                                                     // 375\n// V8 are regular expression literals permitted as                                                                     // 376\n// reduce parameters, so it is desirable in the                                                                        // 377\n// general case for the shim to match the more                                                                         // 378\n// strict and common behavior of rejecting regular                                                                     // 379\n// expressions.                                                                                                        // 380\n                                                                                                                       // 381\n// ES5 15.4.4.18                                                                                                       // 382\n// http://es5.github.com/#x15.4.4.18                                                                                   // 383\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach                                  // 384\n                                                                                                                       // 385\n// Check failure of by-index access of string characters (IE < 9)                                                      // 386\n// and failure of `0 in boxedString` (Rhino)                                                                           // 387\nvar boxedString = $Object('a');                                                                                        // 388\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);                                                       // 389\n                                                                                                                       // 390\nvar properlyBoxesContext = function properlyBoxed(method) {                                                            // 391\n    // Check node 0.6.21 bug where third parameter is not boxed                                                        // 392\n    var properlyBoxesNonStrict = true;                                                                                 // 393\n    var properlyBoxesStrict = true;                                                                                    // 394\n    var threwException = false;                                                                                        // 395\n    if (method) {                                                                                                      // 396\n        try {                                                                                                          // 397\n            method.call('foo', function (_, __, context) {                                                             // 398\n                if (typeof context !== 'object') { properlyBoxesNonStrict = false; }                                   // 399\n            });                                                                                                        // 400\n                                                                                                                       // 401\n            method.call([1], function () {                                                                             // 402\n                'use strict';                                                                                          // 403\n                                                                                                                       // 404\n                properlyBoxesStrict = typeof this === 'string';                                                        // 405\n            }, 'x');                                                                                                   // 406\n        } catch (e) {                                                                                                  // 407\n            threwException = true;                                                                                     // 408\n        }                                                                                                              // 409\n    }                                                                                                                  // 410\n    return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;                               // 411\n};                                                                                                                     // 412\n                                                                                                                       // 413\ndefineProperties(ArrayPrototype, {                                                                                     // 414\n    forEach: function forEach(callbackfn/*, thisArg*/) {                                                               // 415\n        var object = ES.ToObject(this);                                                                                // 416\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 417\n        var i = -1;                                                                                                    // 418\n        var length = ES.ToUint32(self.length);                                                                         // 419\n        var T;                                                                                                         // 420\n        if (arguments.length > 1) {                                                                                    // 421\n          T = arguments[1];                                                                                            // 422\n        }                                                                                                              // 423\n                                                                                                                       // 424\n        // If no callback function or if callback is not a callable function                                           // 425\n        if (!isCallable(callbackfn)) {                                                                                 // 426\n            throw new TypeError('Array.prototype.forEach callback must be a function');                                // 427\n        }                                                                                                              // 428\n                                                                                                                       // 429\n        while (++i < length) {                                                                                         // 430\n            if (i in self) {                                                                                           // 431\n                // Invoke the callback function with call, passing arguments:                                          // 432\n                // context, property value, property key, thisArg object                                               // 433\n                if (typeof T === 'undefined') {                                                                        // 434\n                    callbackfn(self[i], i, object);                                                                    // 435\n                } else {                                                                                               // 436\n                    callbackfn.call(T, self[i], i, object);                                                            // 437\n                }                                                                                                      // 438\n            }                                                                                                          // 439\n        }                                                                                                              // 440\n    }                                                                                                                  // 441\n}, !properlyBoxesContext(ArrayPrototype.forEach));                                                                     // 442\n                                                                                                                       // 443\n// ES5 15.4.4.19                                                                                                       // 444\n// http://es5.github.com/#x15.4.4.19                                                                                   // 445\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map                                    // 446\ndefineProperties(ArrayPrototype, {                                                                                     // 447\n    map: function map(callbackfn/*, thisArg*/) {                                                                       // 448\n        var object = ES.ToObject(this);                                                                                // 449\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 450\n        var length = ES.ToUint32(self.length);                                                                         // 451\n        var result = $Array(length);                                                                                   // 452\n        var T;                                                                                                         // 453\n        if (arguments.length > 1) {                                                                                    // 454\n            T = arguments[1];                                                                                          // 455\n        }                                                                                                              // 456\n                                                                                                                       // 457\n        // If no callback function or if callback is not a callable function                                           // 458\n        if (!isCallable(callbackfn)) {                                                                                 // 459\n            throw new TypeError('Array.prototype.map callback must be a function');                                    // 460\n        }                                                                                                              // 461\n                                                                                                                       // 462\n        for (var i = 0; i < length; i++) {                                                                             // 463\n            if (i in self) {                                                                                           // 464\n                if (typeof T === 'undefined') {                                                                        // 465\n                    result[i] = callbackfn(self[i], i, object);                                                        // 466\n                } else {                                                                                               // 467\n                    result[i] = callbackfn.call(T, self[i], i, object);                                                // 468\n                }                                                                                                      // 469\n            }                                                                                                          // 470\n        }                                                                                                              // 471\n        return result;                                                                                                 // 472\n    }                                                                                                                  // 473\n}, !properlyBoxesContext(ArrayPrototype.map));                                                                         // 474\n                                                                                                                       // 475\n// ES5 15.4.4.20                                                                                                       // 476\n// http://es5.github.com/#x15.4.4.20                                                                                   // 477\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter                                 // 478\ndefineProperties(ArrayPrototype, {                                                                                     // 479\n    filter: function filter(callbackfn/*, thisArg*/) {                                                                 // 480\n        var object = ES.ToObject(this);                                                                                // 481\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 482\n        var length = ES.ToUint32(self.length);                                                                         // 483\n        var result = [];                                                                                               // 484\n        var value;                                                                                                     // 485\n        var T;                                                                                                         // 486\n        if (arguments.length > 1) {                                                                                    // 487\n            T = arguments[1];                                                                                          // 488\n        }                                                                                                              // 489\n                                                                                                                       // 490\n        // If no callback function or if callback is not a callable function                                           // 491\n        if (!isCallable(callbackfn)) {                                                                                 // 492\n            throw new TypeError('Array.prototype.filter callback must be a function');                                 // 493\n        }                                                                                                              // 494\n                                                                                                                       // 495\n        for (var i = 0; i < length; i++) {                                                                             // 496\n            if (i in self) {                                                                                           // 497\n                value = self[i];                                                                                       // 498\n                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {  // 499\n                    pushCall(result, value);                                                                           // 500\n                }                                                                                                      // 501\n            }                                                                                                          // 502\n        }                                                                                                              // 503\n        return result;                                                                                                 // 504\n    }                                                                                                                  // 505\n}, !properlyBoxesContext(ArrayPrototype.filter));                                                                      // 506\n                                                                                                                       // 507\n// ES5 15.4.4.16                                                                                                       // 508\n// http://es5.github.com/#x15.4.4.16                                                                                   // 509\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every                                    // 510\ndefineProperties(ArrayPrototype, {                                                                                     // 511\n    every: function every(callbackfn/*, thisArg*/) {                                                                   // 512\n        var object = ES.ToObject(this);                                                                                // 513\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 514\n        var length = ES.ToUint32(self.length);                                                                         // 515\n        var T;                                                                                                         // 516\n        if (arguments.length > 1) {                                                                                    // 517\n            T = arguments[1];                                                                                          // 518\n        }                                                                                                              // 519\n                                                                                                                       // 520\n        // If no callback function or if callback is not a callable function                                           // 521\n        if (!isCallable(callbackfn)) {                                                                                 // 522\n            throw new TypeError('Array.prototype.every callback must be a function');                                  // 523\n        }                                                                                                              // 524\n                                                                                                                       // 525\n        for (var i = 0; i < length; i++) {                                                                             // 526\n            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return false;                                                                                          // 528\n            }                                                                                                          // 529\n        }                                                                                                              // 530\n        return true;                                                                                                   // 531\n    }                                                                                                                  // 532\n}, !properlyBoxesContext(ArrayPrototype.every));                                                                       // 533\n                                                                                                                       // 534\n// ES5 15.4.4.17                                                                                                       // 535\n// http://es5.github.com/#x15.4.4.17                                                                                   // 536\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some                                     // 537\ndefineProperties(ArrayPrototype, {                                                                                     // 538\n    some: function some(callbackfn/*, thisArg */) {                                                                    // 539\n        var object = ES.ToObject(this);                                                                                // 540\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 541\n        var length = ES.ToUint32(self.length);                                                                         // 542\n        var T;                                                                                                         // 543\n        if (arguments.length > 1) {                                                                                    // 544\n            T = arguments[1];                                                                                          // 545\n        }                                                                                                              // 546\n                                                                                                                       // 547\n        // If no callback function or if callback is not a callable function                                           // 548\n        if (!isCallable(callbackfn)) {                                                                                 // 549\n            throw new TypeError('Array.prototype.some callback must be a function');                                   // 550\n        }                                                                                                              // 551\n                                                                                                                       // 552\n        for (var i = 0; i < length; i++) {                                                                             // 553\n            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return true;                                                                                           // 555\n            }                                                                                                          // 556\n        }                                                                                                              // 557\n        return false;                                                                                                  // 558\n    }                                                                                                                  // 559\n}, !properlyBoxesContext(ArrayPrototype.some));                                                                        // 560\n                                                                                                                       // 561\n// ES5 15.4.4.21                                                                                                       // 562\n// http://es5.github.com/#x15.4.4.21                                                                                   // 563\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce                                 // 564\nvar reduceCoercesToObject = false;                                                                                     // 565\nif (ArrayPrototype.reduce) {                                                                                           // 566\n    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}                                                                                                                      // 568\ndefineProperties(ArrayPrototype, {                                                                                     // 569\n    reduce: function reduce(callbackfn/*, initialValue*/) {                                                            // 570\n        var object = ES.ToObject(this);                                                                                // 571\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 572\n        var length = ES.ToUint32(self.length);                                                                         // 573\n                                                                                                                       // 574\n        // If no callback function or if callback is not a callable function                                           // 575\n        if (!isCallable(callbackfn)) {                                                                                 // 576\n            throw new TypeError('Array.prototype.reduce callback must be a function');                                 // 577\n        }                                                                                                              // 578\n                                                                                                                       // 579\n        // no value to return if no initial value and an empty array                                                   // 580\n        if (length === 0 && arguments.length === 1) {                                                                  // 581\n            throw new TypeError('reduce of empty array with no initial value');                                        // 582\n        }                                                                                                              // 583\n                                                                                                                       // 584\n        var i = 0;                                                                                                     // 585\n        var result;                                                                                                    // 586\n        if (arguments.length >= 2) {                                                                                   // 587\n            result = arguments[1];                                                                                     // 588\n        } else {                                                                                                       // 589\n            do {                                                                                                       // 590\n                if (i in self) {                                                                                       // 591\n                    result = self[i++];                                                                                // 592\n                    break;                                                                                             // 593\n                }                                                                                                      // 594\n                                                                                                                       // 595\n                // if array contains no values, no initial value to return                                             // 596\n                if (++i >= length) {                                                                                   // 597\n                    throw new TypeError('reduce of empty array with no initial value');                                // 598\n                }                                                                                                      // 599\n            } while (true);                                                                                            // 600\n        }                                                                                                              // 601\n                                                                                                                       // 602\n        for (; i < length; i++) {                                                                                      // 603\n            if (i in self) {                                                                                           // 604\n                result = callbackfn(result, self[i], i, object);                                                       // 605\n            }                                                                                                          // 606\n        }                                                                                                              // 607\n                                                                                                                       // 608\n        return result;                                                                                                 // 609\n    }                                                                                                                  // 610\n}, !reduceCoercesToObject);                                                                                            // 611\n                                                                                                                       // 612\n// ES5 15.4.4.22                                                                                                       // 613\n// http://es5.github.com/#x15.4.4.22                                                                                   // 614\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight                            // 615\nvar reduceRightCoercesToObject = false;                                                                                // 616\nif (ArrayPrototype.reduceRight) {                                                                                      // 617\n    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}                                                                                                                      // 619\ndefineProperties(ArrayPrototype, {                                                                                     // 620\n    reduceRight: function reduceRight(callbackfn/*, initial*/) {                                                       // 621\n        var object = ES.ToObject(this);                                                                                // 622\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 623\n        var length = ES.ToUint32(self.length);                                                                         // 624\n                                                                                                                       // 625\n        // If no callback function or if callback is not a callable function                                           // 626\n        if (!isCallable(callbackfn)) {                                                                                 // 627\n            throw new TypeError('Array.prototype.reduceRight callback must be a function');                            // 628\n        }                                                                                                              // 629\n                                                                                                                       // 630\n        // no value to return if no initial value, empty array                                                         // 631\n        if (length === 0 && arguments.length === 1) {                                                                  // 632\n            throw new TypeError('reduceRight of empty array with no initial value');                                   // 633\n        }                                                                                                              // 634\n                                                                                                                       // 635\n        var result;                                                                                                    // 636\n        var i = length - 1;                                                                                            // 637\n        if (arguments.length >= 2) {                                                                                   // 638\n            result = arguments[1];                                                                                     // 639\n        } else {                                                                                                       // 640\n            do {                                                                                                       // 641\n                if (i in self) {                                                                                       // 642\n                    result = self[i--];                                                                                // 643\n                    break;                                                                                             // 644\n                }                                                                                                      // 645\n                                                                                                                       // 646\n                // if array contains no values, no initial value to return                                             // 647\n                if (--i < 0) {                                                                                         // 648\n                    throw new TypeError('reduceRight of empty array with no initial value');                           // 649\n                }                                                                                                      // 650\n            } while (true);                                                                                            // 651\n        }                                                                                                              // 652\n                                                                                                                       // 653\n        if (i < 0) {                                                                                                   // 654\n            return result;                                                                                             // 655\n        }                                                                                                              // 656\n                                                                                                                       // 657\n        do {                                                                                                           // 658\n            if (i in self) {                                                                                           // 659\n                result = callbackfn(result, self[i], i, object);                                                       // 660\n            }                                                                                                          // 661\n        } while (i--);                                                                                                 // 662\n                                                                                                                       // 663\n        return result;                                                                                                 // 664\n    }                                                                                                                  // 665\n}, !reduceRightCoercesToObject);                                                                                       // 666\n                                                                                                                       // 667\n// ES5 15.4.4.14                                                                                                       // 668\n// http://es5.github.com/#x15.4.4.14                                                                                   // 669\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf                                  // 670\nvar hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;                                     // 671\ndefineProperties(ArrayPrototype, {                                                                                     // 672\n    indexOf: function indexOf(searchElement/*, fromIndex */) {                                                         // 673\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                             // 674\n        var length = ES.ToUint32(self.length);                                                                         // 675\n                                                                                                                       // 676\n        if (length === 0) {                                                                                            // 677\n            return -1;                                                                                                 // 678\n        }                                                                                                              // 679\n                                                                                                                       // 680\n        var i = 0;                                                                                                     // 681\n        if (arguments.length > 1) {                                                                                    // 682\n            i = ES.ToInteger(arguments[1]);                                                                            // 683\n        }                                                                                                              // 684\n                                                                                                                       // 685\n        // handle negative indices                                                                                     // 686\n        i = i >= 0 ? i : max(0, length + i);                                                                           // 687\n        for (; i < length; i++) {                                                                                      // 688\n            if (i in self && self[i] === searchElement) {                                                              // 689\n                return i;                                                                                              // 690\n            }                                                                                                          // 691\n        }                                                                                                              // 692\n        return -1;                                                                                                     // 693\n    }                                                                                                                  // 694\n}, hasFirefox2IndexOfBug);                                                                                             // 695\n                                                                                                                       // 696\n// ES5 15.4.4.15                                                                                                       // 697\n// http://es5.github.com/#x15.4.4.15                                                                                   // 698\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf                              // 699\nvar hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;                        // 700\ndefineProperties(ArrayPrototype, {                                                                                     // 701\n    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {                                                 // 702\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                             // 703\n        var length = ES.ToUint32(self.length);                                                                         // 704\n                                                                                                                       // 705\n        if (length === 0) {                                                                                            // 706\n            return -1;                                                                                                 // 707\n        }                                                                                                              // 708\n        var i = length - 1;                                                                                            // 709\n        if (arguments.length > 1) {                                                                                    // 710\n            i = min(i, ES.ToInteger(arguments[1]));                                                                    // 711\n        }                                                                                                              // 712\n        // handle negative indices                                                                                     // 713\n        i = i >= 0 ? i : length - Math.abs(i);                                                                         // 714\n        for (; i >= 0; i--) {                                                                                          // 715\n            if (i in self && searchElement === self[i]) {                                                              // 716\n                return i;                                                                                              // 717\n            }                                                                                                          // 718\n        }                                                                                                              // 719\n        return -1;                                                                                                     // 720\n    }                                                                                                                  // 721\n}, hasFirefox2LastIndexOfBug);                                                                                         // 722\n                                                                                                                       // 723\n// ES5 15.4.4.12                                                                                                       // 724\n// http://es5.github.com/#x15.4.4.12                                                                                   // 725\nvar spliceNoopReturnsEmptyArray = (function () {                                                                       // 726\n    var a = [1, 2];                                                                                                    // 727\n    var result = a.splice();                                                                                           // 728\n    return a.length === 2 && isArray(result) && result.length === 0;                                                   // 729\n}());                                                                                                                  // 730\ndefineProperties(ArrayPrototype, {                                                                                     // 731\n    // Safari 5.0 bug where .splice() returns undefined                                                                // 732\n    splice: function splice(start, deleteCount) {                                                                      // 733\n        if (arguments.length === 0) {                                                                                  // 734\n            return [];                                                                                                 // 735\n        } else {                                                                                                       // 736\n            return array_splice.apply(this, arguments);                                                                // 737\n        }                                                                                                              // 738\n    }                                                                                                                  // 739\n}, !spliceNoopReturnsEmptyArray);                                                                                      // 740\n                                                                                                                       // 741\nvar spliceWorksWithEmptyObject = (function () {                                                                        // 742\n    var obj = {};                                                                                                      // 743\n    ArrayPrototype.splice.call(obj, 0, 0, 1);                                                                          // 744\n    return obj.length === 1;                                                                                           // 745\n}());                                                                                                                  // 746\ndefineProperties(ArrayPrototype, {                                                                                     // 747\n    splice: function splice(start, deleteCount) {                                                                      // 748\n        if (arguments.length === 0) { return []; }                                                                     // 749\n        var args = arguments;                                                                                          // 750\n        this.length = max(ES.ToInteger(this.length), 0);                                                               // 751\n        if (arguments.length > 0 && typeof deleteCount !== 'number') {                                                 // 752\n            args = arraySlice(arguments);                                                                              // 753\n            if (args.length < 2) {                                                                                     // 754\n                pushCall(args, this.length - start);                                                                   // 755\n            } else {                                                                                                   // 756\n                args[1] = ES.ToInteger(deleteCount);                                                                   // 757\n            }                                                                                                          // 758\n        }                                                                                                              // 759\n        return array_splice.apply(this, args);                                                                         // 760\n    }                                                                                                                  // 761\n}, !spliceWorksWithEmptyObject);                                                                                       // 762\nvar spliceWorksWithLargeSparseArrays = (function () {                                                                  // 763\n    // Per https://github.com/es-shims/es5-shim/issues/295                                                             // 764\n    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater                                                     // 765\n    var arr = new $Array(1e5);                                                                                         // 766\n    // note: the index MUST be 8 or larger or the test will false pass                                                 // 767\n    arr[8] = 'x';                                                                                                      // 768\n    arr.splice(1, 1);                                                                                                  // 769\n    // note: this test must be defined *after* the indexOf shim                                                        // 770\n    // per https://github.com/es-shims/es5-shim/issues/313                                                             // 771\n    return arr.indexOf('x') === 7;                                                                                     // 772\n}());                                                                                                                  // 773\nvar spliceWorksWithSmallSparseArrays = (function () {                                                                  // 774\n    // Per https://github.com/es-shims/es5-shim/issues/295                                                             // 775\n    // Opera 12.15 breaks on this, no idea why.                                                                        // 776\n    var n = 256;                                                                                                       // 777\n    var arr = [];                                                                                                      // 778\n    arr[n] = 'a';                                                                                                      // 779\n    arr.splice(n + 1, 0, 'b');                                                                                         // 780\n    return arr[n] === 'a';                                                                                             // 781\n}());                                                                                                                  // 782\ndefineProperties(ArrayPrototype, {                                                                                     // 783\n    splice: function splice(start, deleteCount) {                                                                      // 784\n        var O = ES.ToObject(this);                                                                                     // 785\n        var A = [];                                                                                                    // 786\n        var len = ES.ToUint32(O.length);                                                                               // 787\n        var relativeStart = ES.ToInteger(start);                                                                       // 788\n        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);                 // 789\n        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);                             // 790\n                                                                                                                       // 791\n        var k = 0;                                                                                                     // 792\n        var from;                                                                                                      // 793\n        while (k < actualDeleteCount) {                                                                                // 794\n            from = $String(actualStart + k);                                                                           // 795\n            if (owns(O, from)) {                                                                                       // 796\n                A[k] = O[from];                                                                                        // 797\n            }                                                                                                          // 798\n            k += 1;                                                                                                    // 799\n        }                                                                                                              // 800\n                                                                                                                       // 801\n        var items = arraySlice(arguments, 2);                                                                          // 802\n        var itemCount = items.length;                                                                                  // 803\n        var to;                                                                                                        // 804\n        if (itemCount < actualDeleteCount) {                                                                           // 805\n            k = actualStart;                                                                                           // 806\n            var maxK = len - actualDeleteCount;                                                                        // 807\n            while (k < maxK) {                                                                                         // 808\n                from = $String(k + actualDeleteCount);                                                                 // 809\n                to = $String(k + itemCount);                                                                           // 810\n                if (owns(O, from)) {                                                                                   // 811\n                    O[to] = O[from];                                                                                   // 812\n                } else {                                                                                               // 813\n                    delete O[to];                                                                                      // 814\n                }                                                                                                      // 815\n                k += 1;                                                                                                // 816\n            }                                                                                                          // 817\n            k = len;                                                                                                   // 818\n            var minK = len - actualDeleteCount + itemCount;                                                            // 819\n            while (k > minK) {                                                                                         // 820\n                delete O[k - 1];                                                                                       // 821\n                k -= 1;                                                                                                // 822\n            }                                                                                                          // 823\n        } else if (itemCount > actualDeleteCount) {                                                                    // 824\n            k = len - actualDeleteCount;                                                                               // 825\n            while (k > actualStart) {                                                                                  // 826\n                from = $String(k + actualDeleteCount - 1);                                                             // 827\n                to = $String(k + itemCount - 1);                                                                       // 828\n                if (owns(O, from)) {                                                                                   // 829\n                    O[to] = O[from];                                                                                   // 830\n                } else {                                                                                               // 831\n                    delete O[to];                                                                                      // 832\n                }                                                                                                      // 833\n                k -= 1;                                                                                                // 834\n            }                                                                                                          // 835\n        }                                                                                                              // 836\n        k = actualStart;                                                                                               // 837\n        for (var i = 0; i < items.length; ++i) {                                                                       // 838\n            O[k] = items[i];                                                                                           // 839\n            k += 1;                                                                                                    // 840\n        }                                                                                                              // 841\n        O.length = len - actualDeleteCount + itemCount;                                                                // 842\n                                                                                                                       // 843\n        return A;                                                                                                      // 844\n    }                                                                                                                  // 845\n}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);                                            // 846\n                                                                                                                       // 847\nvar originalJoin = ArrayPrototype.join;                                                                                // 848\nvar hasStringJoinBug;                                                                                                  // 849\ntry {                                                                                                                  // 850\n    hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';                                              // 851\n} catch (e) {                                                                                                          // 852\n    hasStringJoinBug = true;                                                                                           // 853\n}                                                                                                                      // 854\nif (hasStringJoinBug) {                                                                                                // 855\n    defineProperties(ArrayPrototype, {                                                                                 // 856\n        join: function join(separator) {                                                                               // 857\n            var sep = typeof separator === 'undefined' ? ',' : separator;                                              // 858\n            return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);                                 // 859\n        }                                                                                                              // 860\n    }, hasStringJoinBug);                                                                                              // 861\n}                                                                                                                      // 862\n                                                                                                                       // 863\nvar hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';                                                            // 864\nif (hasJoinUndefinedBug) {                                                                                             // 865\n    defineProperties(ArrayPrototype, {                                                                                 // 866\n        join: function join(separator) {                                                                               // 867\n            var sep = typeof separator === 'undefined' ? ',' : separator;                                              // 868\n            return originalJoin.call(this, sep);                                                                       // 869\n        }                                                                                                              // 870\n    }, hasJoinUndefinedBug);                                                                                           // 871\n}                                                                                                                      // 872\n                                                                                                                       // 873\nvar pushShim = function push(item) {                                                                                   // 874\n    var O = ES.ToObject(this);                                                                                         // 875\n    var n = ES.ToUint32(O.length);                                                                                     // 876\n    var i = 0;                                                                                                         // 877\n    while (i < arguments.length) {                                                                                     // 878\n        O[n + i] = arguments[i];                                                                                       // 879\n        i += 1;                                                                                                        // 880\n    }                                                                                                                  // 881\n    O.length = n + i;                                                                                                  // 882\n    return n + i;                                                                                                      // 883\n};                                                                                                                     // 884\n                                                                                                                       // 885\nvar pushIsNotGeneric = (function () {                                                                                  // 886\n    var obj = {};                                                                                                      // 887\n    var result = Array.prototype.push.call(obj, undefined);                                                            // 888\n    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);                         // 889\n}());                                                                                                                  // 890\ndefineProperties(ArrayPrototype, {                                                                                     // 891\n    push: function push(item) {                                                                                        // 892\n        if (isArray(this)) {                                                                                           // 893\n            return array_push.apply(this, arguments);                                                                  // 894\n        }                                                                                                              // 895\n        return pushShim.apply(this, arguments);                                                                        // 896\n    }                                                                                                                  // 897\n}, pushIsNotGeneric);                                                                                                  // 898\n                                                                                                                       // 899\n// This fixes a very weird bug in Opera 10.6 when pushing `undefined                                                   // 900\nvar pushUndefinedIsWeird = (function () {                                                                              // 901\n    var arr = [];                                                                                                      // 902\n    var result = arr.push(undefined);                                                                                  // 903\n    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);                         // 904\n}());                                                                                                                  // 905\ndefineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);                                            // 906\n                                                                                                                       // 907\n// ES5 15.2.3.14                                                                                                       // 908\n// http://es5.github.io/#x15.4.4.10                                                                                    // 909\n// Fix boxed string bug                                                                                                // 910\ndefineProperties(ArrayPrototype, {                                                                                     // 911\n    slice: function (start, end) {                                                                                     // 912\n        var arr = isString(this) ? strSplit(this, '') : this;                                                          // 913\n        return arraySliceApply(arr, arguments);                                                                        // 914\n    }                                                                                                                  // 915\n}, splitString);                                                                                                       // 916\n                                                                                                                       // 917\nvar sortIgnoresNonFunctions = (function () {                                                                           // 918\n    try {                                                                                                              // 919\n        [1, 2].sort(null);                                                                                             // 920\n        [1, 2].sort({});                                                                                               // 921\n        return true;                                                                                                   // 922\n    } catch (e) { /**/ }                                                                                               // 923\n    return false;                                                                                                      // 924\n}());                                                                                                                  // 925\nvar sortThrowsOnRegex = (function () {                                                                                 // 926\n    // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`                                            // 927\n    try {                                                                                                              // 928\n        [1, 2].sort(/a/);                                                                                              // 929\n        return false;                                                                                                  // 930\n    } catch (e) { /**/ }                                                                                               // 931\n    return true;                                                                                                       // 932\n}());                                                                                                                  // 933\nvar sortIgnoresUndefined = (function () {                                                                              // 934\n    // applies in IE 8, for one.                                                                                       // 935\n    try {                                                                                                              // 936\n        [1, 2].sort(undefined);                                                                                        // 937\n        return true;                                                                                                   // 938\n    } catch (e) { /**/ }                                                                                               // 939\n    return false;                                                                                                      // 940\n}());                                                                                                                  // 941\ndefineProperties(ArrayPrototype, {                                                                                     // 942\n    sort: function sort(compareFn) {                                                                                   // 943\n        if (typeof compareFn === 'undefined') {                                                                        // 944\n            return arraySort(this);                                                                                    // 945\n        }                                                                                                              // 946\n        if (!isCallable(compareFn)) {                                                                                  // 947\n            throw new TypeError('Array.prototype.sort callback must be a function');                                   // 948\n        }                                                                                                              // 949\n        return arraySort(this, compareFn);                                                                             // 950\n    }                                                                                                                  // 951\n}, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);                                            // 952\n                                                                                                                       // 953\n//                                                                                                                     // 954\n// Object                                                                                                              // 955\n// ======                                                                                                              // 956\n//                                                                                                                     // 957\n                                                                                                                       // 958\n// ES5 15.2.3.14                                                                                                       // 959\n// http://es5.github.com/#x15.2.3.14                                                                                   // 960\n                                                                                                                       // 961\n// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation                                 // 962\nvar hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');                                         // 963\nvar hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');                                                // 964\nvar hasStringEnumBug = !owns('x', '0');                                                                                // 965\nvar equalsConstructorPrototype = function (o) {                                                                        // 966\n    var ctor = o.constructor;                                                                                          // 967\n    return ctor && ctor.prototype === o;                                                                               // 968\n};                                                                                                                     // 969\nvar blacklistedKeys = {                                                                                                // 970\n    $window: true,                                                                                                     // 971\n    $console: true,                                                                                                    // 972\n    $parent: true,                                                                                                     // 973\n    $self: true,                                                                                                       // 974\n    $frame: true,                                                                                                      // 975\n    $frames: true,                                                                                                     // 976\n    $frameElement: true,                                                                                               // 977\n    $webkitIndexedDB: true,                                                                                            // 978\n    $webkitStorageInfo: true,                                                                                          // 979\n    $external: true                                                                                                    // 980\n};                                                                                                                     // 981\nvar hasAutomationEqualityBug = (function () {                                                                          // 982\n    /* globals window */                                                                                               // 983\n    if (typeof window === 'undefined') { return false; }                                                               // 984\n    for (var k in window) {                                                                                            // 985\n        try {                                                                                                          // 986\n            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {\n                equalsConstructorPrototype(window[k]);                                                                 // 988\n            }                                                                                                          // 989\n        } catch (e) {                                                                                                  // 990\n            return true;                                                                                               // 991\n        }                                                                                                              // 992\n    }                                                                                                                  // 993\n    return false;                                                                                                      // 994\n}());                                                                                                                  // 995\nvar equalsConstructorPrototypeIfNotBuggy = function (object) {                                                         // 996\n    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }     // 997\n    try {                                                                                                              // 998\n        return equalsConstructorPrototype(object);                                                                     // 999\n    } catch (e) {                                                                                                      // 1000\n        return false;                                                                                                  // 1001\n    }                                                                                                                  // 1002\n};                                                                                                                     // 1003\nvar dontEnums = [                                                                                                      // 1004\n    'toString',                                                                                                        // 1005\n    'toLocaleString',                                                                                                  // 1006\n    'valueOf',                                                                                                         // 1007\n    'hasOwnProperty',                                                                                                  // 1008\n    'isPrototypeOf',                                                                                                   // 1009\n    'propertyIsEnumerable',                                                                                            // 1010\n    'constructor'                                                                                                      // 1011\n];                                                                                                                     // 1012\nvar dontEnumsLength = dontEnums.length;                                                                                // 1013\n                                                                                                                       // 1014\n// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js                                     // 1015\n// can be replaced with require('is-arguments') if we ever use a build process instead                                 // 1016\nvar isStandardArguments = function isArguments(value) {                                                                // 1017\n    return toStr(value) === '[object Arguments]';                                                                      // 1018\n};                                                                                                                     // 1019\nvar isLegacyArguments = function isArguments(value) {                                                                  // 1020\n    return value !== null &&                                                                                           // 1021\n        typeof value === 'object' &&                                                                                   // 1022\n        typeof value.length === 'number' &&                                                                            // 1023\n        value.length >= 0 &&                                                                                           // 1024\n        !isArray(value) &&                                                                                             // 1025\n        isCallable(value.callee);                                                                                      // 1026\n};                                                                                                                     // 1027\nvar isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;                            // 1028\n                                                                                                                       // 1029\ndefineProperties($Object, {                                                                                            // 1030\n    keys: function keys(object) {                                                                                      // 1031\n        var isFn = isCallable(object);                                                                                 // 1032\n        var isArgs = isArguments(object);                                                                              // 1033\n        var isObject = object !== null && typeof object === 'object';                                                  // 1034\n        var isStr = isObject && isString(object);                                                                      // 1035\n                                                                                                                       // 1036\n        if (!isObject && !isFn && !isArgs) {                                                                           // 1037\n            throw new TypeError('Object.keys called on a non-object');                                                 // 1038\n        }                                                                                                              // 1039\n                                                                                                                       // 1040\n        var theKeys = [];                                                                                              // 1041\n        var skipProto = hasProtoEnumBug && isFn;                                                                       // 1042\n        if ((isStr && hasStringEnumBug) || isArgs) {                                                                   // 1043\n            for (var i = 0; i < object.length; ++i) {                                                                  // 1044\n                pushCall(theKeys, $String(i));                                                                         // 1045\n            }                                                                                                          // 1046\n        }                                                                                                              // 1047\n                                                                                                                       // 1048\n        if (!isArgs) {                                                                                                 // 1049\n            for (var name in object) {                                                                                 // 1050\n                if (!(skipProto && name === 'prototype') && owns(object, name)) {                                      // 1051\n                    pushCall(theKeys, $String(name));                                                                  // 1052\n                }                                                                                                      // 1053\n            }                                                                                                          // 1054\n        }                                                                                                              // 1055\n                                                                                                                       // 1056\n        if (hasDontEnumBug) {                                                                                          // 1057\n            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);                                        // 1058\n            for (var j = 0; j < dontEnumsLength; j++) {                                                                // 1059\n                var dontEnum = dontEnums[j];                                                                           // 1060\n                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {                      // 1061\n                    pushCall(theKeys, dontEnum);                                                                       // 1062\n                }                                                                                                      // 1063\n            }                                                                                                          // 1064\n        }                                                                                                              // 1065\n        return theKeys;                                                                                                // 1066\n    }                                                                                                                  // 1067\n});                                                                                                                    // 1068\n                                                                                                                       // 1069\nvar keysWorksWithArguments = $Object.keys && (function () {                                                            // 1070\n    // Safari 5.0 bug                                                                                                  // 1071\n    return $Object.keys(arguments).length === 2;                                                                       // 1072\n}(1, 2));                                                                                                              // 1073\nvar keysHasArgumentsLengthBug = $Object.keys && (function () {                                                         // 1074\n    var argKeys = $Object.keys(arguments);                                                                             // 1075\n    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;                                         // 1076\n}(1));                                                                                                                 // 1077\nvar originalKeys = $Object.keys;                                                                                       // 1078\ndefineProperties($Object, {                                                                                            // 1079\n    keys: function keys(object) {                                                                                      // 1080\n        if (isArguments(object)) {                                                                                     // 1081\n            return originalKeys(arraySlice(object));                                                                   // 1082\n        } else {                                                                                                       // 1083\n            return originalKeys(object);                                                                               // 1084\n        }                                                                                                              // 1085\n    }                                                                                                                  // 1086\n}, !keysWorksWithArguments || keysHasArgumentsLengthBug);                                                              // 1087\n                                                                                                                       // 1088\n//                                                                                                                     // 1089\n// Date                                                                                                                // 1090\n// ====                                                                                                                // 1091\n//                                                                                                                     // 1092\n                                                                                                                       // 1093\nvar hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;                                         // 1094\nvar aNegativeTestDate = new Date(-1509842289600292);                                                                   // 1095\nvar aPositiveTestDate = new Date(1449662400000);                                                                       // 1096\nvar hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';                   // 1097\nvar hasToDateStringFormatBug;                                                                                          // 1098\nvar hasToStringFormatBug;                                                                                              // 1099\nvar timeZoneOffset = aNegativeTestDate.getTimezoneOffset();                                                            // 1100\nif (timeZoneOffset < -720) {                                                                                           // 1101\n    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';                               // 1102\n    hasToStringFormatBug = !(/^Thu Dec 10 2015 \\d\\d:\\d\\d:\\d\\d GMT[-\\+]\\d\\d\\d\\d(?: |$)/).test(aPositiveTestDate.toString());\n} else {                                                                                                               // 1104\n    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';                               // 1105\n    hasToStringFormatBug = !(/^Wed Dec 09 2015 \\d\\d:\\d\\d:\\d\\d GMT[-\\+]\\d\\d\\d\\d(?: |$)/).test(aPositiveTestDate.toString());\n}                                                                                                                      // 1107\n                                                                                                                       // 1108\nvar originalGetFullYear = call.bind(Date.prototype.getFullYear);                                                       // 1109\nvar originalGetMonth = call.bind(Date.prototype.getMonth);                                                             // 1110\nvar originalGetDate = call.bind(Date.prototype.getDate);                                                               // 1111\nvar originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);                                                 // 1112\nvar originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);                                                       // 1113\nvar originalGetUTCDate = call.bind(Date.prototype.getUTCDate);                                                         // 1114\nvar originalGetUTCDay = call.bind(Date.prototype.getUTCDay);                                                           // 1115\nvar originalGetUTCHours = call.bind(Date.prototype.getUTCHours);                                                       // 1116\nvar originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);                                                   // 1117\nvar originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);                                                   // 1118\nvar originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);                                         // 1119\nvar dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];                                                       // 1120\nvar monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];                  // 1121\nvar daysInMonth = function daysInMonth(month, year) {                                                                  // 1122\n    return originalGetDate(new Date(year, month, 0));                                                                  // 1123\n};                                                                                                                     // 1124\n                                                                                                                       // 1125\ndefineProperties(Date.prototype, {                                                                                     // 1126\n    getFullYear: function getFullYear() {                                                                              // 1127\n        if (!this || !(this instanceof Date)) {                                                                        // 1128\n            throw new TypeError('this is not a Date object.');                                                         // 1129\n        }                                                                                                              // 1130\n        var year = originalGetFullYear(this);                                                                          // 1131\n        if (year < 0 && originalGetMonth(this) > 11) {                                                                 // 1132\n            return year + 1;                                                                                           // 1133\n        }                                                                                                              // 1134\n        return year;                                                                                                   // 1135\n    },                                                                                                                 // 1136\n    getMonth: function getMonth() {                                                                                    // 1137\n        if (!this || !(this instanceof Date)) {                                                                        // 1138\n            throw new TypeError('this is not a Date object.');                                                         // 1139\n        }                                                                                                              // 1140\n        var year = originalGetFullYear(this);                                                                          // 1141\n        var month = originalGetMonth(this);                                                                            // 1142\n        if (year < 0 && month > 11) {                                                                                  // 1143\n            return 0;                                                                                                  // 1144\n        }                                                                                                              // 1145\n        return month;                                                                                                  // 1146\n    },                                                                                                                 // 1147\n    getDate: function getDate() {                                                                                      // 1148\n        if (!this || !(this instanceof Date)) {                                                                        // 1149\n            throw new TypeError('this is not a Date object.');                                                         // 1150\n        }                                                                                                              // 1151\n        var year = originalGetFullYear(this);                                                                          // 1152\n        var month = originalGetMonth(this);                                                                            // 1153\n        var date = originalGetDate(this);                                                                              // 1154\n        if (year < 0 && month > 11) {                                                                                  // 1155\n            if (month === 12) {                                                                                        // 1156\n                return date;                                                                                           // 1157\n            }                                                                                                          // 1158\n            var days = daysInMonth(0, year + 1);                                                                       // 1159\n            return (days - date) + 1;                                                                                  // 1160\n        }                                                                                                              // 1161\n        return date;                                                                                                   // 1162\n    },                                                                                                                 // 1163\n    getUTCFullYear: function getUTCFullYear() {                                                                        // 1164\n        if (!this || !(this instanceof Date)) {                                                                        // 1165\n            throw new TypeError('this is not a Date object.');                                                         // 1166\n        }                                                                                                              // 1167\n        var year = originalGetUTCFullYear(this);                                                                       // 1168\n        if (year < 0 && originalGetUTCMonth(this) > 11) {                                                              // 1169\n            return year + 1;                                                                                           // 1170\n        }                                                                                                              // 1171\n        return year;                                                                                                   // 1172\n    },                                                                                                                 // 1173\n    getUTCMonth: function getUTCMonth() {                                                                              // 1174\n        if (!this || !(this instanceof Date)) {                                                                        // 1175\n            throw new TypeError('this is not a Date object.');                                                         // 1176\n        }                                                                                                              // 1177\n        var year = originalGetUTCFullYear(this);                                                                       // 1178\n        var month = originalGetUTCMonth(this);                                                                         // 1179\n        if (year < 0 && month > 11) {                                                                                  // 1180\n            return 0;                                                                                                  // 1181\n        }                                                                                                              // 1182\n        return month;                                                                                                  // 1183\n    },                                                                                                                 // 1184\n    getUTCDate: function getUTCDate() {                                                                                // 1185\n        if (!this || !(this instanceof Date)) {                                                                        // 1186\n            throw new TypeError('this is not a Date object.');                                                         // 1187\n        }                                                                                                              // 1188\n        var year = originalGetUTCFullYear(this);                                                                       // 1189\n        var month = originalGetUTCMonth(this);                                                                         // 1190\n        var date = originalGetUTCDate(this);                                                                           // 1191\n        if (year < 0 && month > 11) {                                                                                  // 1192\n            if (month === 12) {                                                                                        // 1193\n                return date;                                                                                           // 1194\n            }                                                                                                          // 1195\n            var days = daysInMonth(0, year + 1);                                                                       // 1196\n            return (days - date) + 1;                                                                                  // 1197\n        }                                                                                                              // 1198\n        return date;                                                                                                   // 1199\n    }                                                                                                                  // 1200\n}, hasNegativeMonthYearBug);                                                                                           // 1201\n                                                                                                                       // 1202\ndefineProperties(Date.prototype, {                                                                                     // 1203\n    toUTCString: function toUTCString() {                                                                              // 1204\n        if (!this || !(this instanceof Date)) {                                                                        // 1205\n            throw new TypeError('this is not a Date object.');                                                         // 1206\n        }                                                                                                              // 1207\n        var day = originalGetUTCDay(this);                                                                             // 1208\n        var date = originalGetUTCDate(this);                                                                           // 1209\n        var month = originalGetUTCMonth(this);                                                                         // 1210\n        var year = originalGetUTCFullYear(this);                                                                       // 1211\n        var hour = originalGetUTCHours(this);                                                                          // 1212\n        var minute = originalGetUTCMinutes(this);                                                                      // 1213\n        var second = originalGetUTCSeconds(this);                                                                      // 1214\n        return dayName[day] + ', ' +                                                                                   // 1215\n            (date < 10 ? '0' + date : date) + ' ' +                                                                    // 1216\n            monthName[month] + ' ' +                                                                                   // 1217\n            year + ' ' +                                                                                               // 1218\n            (hour < 10 ? '0' + hour : hour) + ':' +                                                                    // 1219\n            (minute < 10 ? '0' + minute : minute) + ':' +                                                              // 1220\n            (second < 10 ? '0' + second : second) + ' GMT';                                                            // 1221\n    }                                                                                                                  // 1222\n}, hasNegativeMonthYearBug || hasToUTCStringFormatBug);                                                                // 1223\n                                                                                                                       // 1224\n// Opera 12 has `,`                                                                                                    // 1225\ndefineProperties(Date.prototype, {                                                                                     // 1226\n    toDateString: function toDateString() {                                                                            // 1227\n        if (!this || !(this instanceof Date)) {                                                                        // 1228\n            throw new TypeError('this is not a Date object.');                                                         // 1229\n        }                                                                                                              // 1230\n        var day = this.getDay();                                                                                       // 1231\n        var date = this.getDate();                                                                                     // 1232\n        var month = this.getMonth();                                                                                   // 1233\n        var year = this.getFullYear();                                                                                 // 1234\n        return dayName[day] + ' ' +                                                                                    // 1235\n            monthName[month] + ' ' +                                                                                   // 1236\n            (date < 10 ? '0' + date : date) + ' ' +                                                                    // 1237\n            year;                                                                                                      // 1238\n    }                                                                                                                  // 1239\n}, hasNegativeMonthYearBug || hasToDateStringFormatBug);                                                               // 1240\n                                                                                                                       // 1241\n// can't use defineProperties here because of toString enumeration issue in IE <= 8                                    // 1242\nif (hasNegativeMonthYearBug || hasToStringFormatBug) {                                                                 // 1243\n    Date.prototype.toString = function toString() {                                                                    // 1244\n        if (!this || !(this instanceof Date)) {                                                                        // 1245\n            throw new TypeError('this is not a Date object.');                                                         // 1246\n        }                                                                                                              // 1247\n        var day = this.getDay();                                                                                       // 1248\n        var date = this.getDate();                                                                                     // 1249\n        var month = this.getMonth();                                                                                   // 1250\n        var year = this.getFullYear();                                                                                 // 1251\n        var hour = this.getHours();                                                                                    // 1252\n        var minute = this.getMinutes();                                                                                // 1253\n        var second = this.getSeconds();                                                                                // 1254\n        var timezoneOffset = this.getTimezoneOffset();                                                                 // 1255\n        var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);                                                   // 1256\n        var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);                                                 // 1257\n        return dayName[day] + ' ' +                                                                                    // 1258\n            monthName[month] + ' ' +                                                                                   // 1259\n            (date < 10 ? '0' + date : date) + ' ' +                                                                    // 1260\n            year + ' ' +                                                                                               // 1261\n            (hour < 10 ? '0' + hour : hour) + ':' +                                                                    // 1262\n            (minute < 10 ? '0' + minute : minute) + ':' +                                                              // 1263\n            (second < 10 ? '0' + second : second) + ' GMT' +                                                           // 1264\n            (timezoneOffset > 0 ? '-' : '+') +                                                                         // 1265\n            (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +                                                     // 1266\n            (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);                                                // 1267\n    };                                                                                                                 // 1268\n    if (supportsDescriptors) {                                                                                         // 1269\n        $Object.defineProperty(Date.prototype, 'toString', {                                                           // 1270\n            configurable: true,                                                                                        // 1271\n            enumerable: false,                                                                                         // 1272\n            writable: true                                                                                             // 1273\n        });                                                                                                            // 1274\n    }                                                                                                                  // 1275\n}                                                                                                                      // 1276\n                                                                                                                       // 1277\n// ES5 15.9.5.43                                                                                                       // 1278\n// http://es5.github.com/#x15.9.5.43                                                                                   // 1279\n// This function returns a String value represent the instance in time                                                 // 1280\n// represented by this Date object. The format of the String is the Date Time                                          // 1281\n// string format defined in 15.9.1.15. All fields are present in the String.                                           // 1282\n// The time zone is always UTC, denoted by the suffix Z. If the time value of                                          // 1283\n// this object is not a finite Number a RangeError exception is thrown.                                                // 1284\nvar negativeDate = -62198755200000;                                                                                    // 1285\nvar negativeYearString = '-000001';                                                                                    // 1286\nvar hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;\nvar hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';      // 1288\n                                                                                                                       // 1289\nvar getTime = call.bind(Date.prototype.getTime);                                                                       // 1290\n                                                                                                                       // 1291\ndefineProperties(Date.prototype, {                                                                                     // 1292\n    toISOString: function toISOString() {                                                                              // 1293\n        if (!isFinite(this) || !isFinite(getTime(this))) {                                                             // 1294\n            // Adope Photoshop requires the second check.                                                              // 1295\n            throw new RangeError('Date.prototype.toISOString called on non-finite value.');                            // 1296\n        }                                                                                                              // 1297\n                                                                                                                       // 1298\n        var year = originalGetUTCFullYear(this);                                                                       // 1299\n                                                                                                                       // 1300\n        var month = originalGetUTCMonth(this);                                                                         // 1301\n        // see https://github.com/es-shims/es5-shim/issues/111                                                         // 1302\n        year += Math.floor(month / 12);                                                                                // 1303\n        month = (month % 12 + 12) % 12;                                                                                // 1304\n                                                                                                                       // 1305\n        // the date time string format is specified in 15.9.1.15.                                                      // 1306\n        var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];\n        year = (                                                                                                       // 1308\n            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +                                                              // 1309\n            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)                                  // 1310\n        );                                                                                                             // 1311\n                                                                                                                       // 1312\n        for (var i = 0; i < result.length; ++i) {                                                                      // 1313\n          // pad months, days, hours, minutes, and seconds to have two digits.                                         // 1314\n          result[i] = strSlice('00' + result[i], -2);                                                                  // 1315\n        }                                                                                                              // 1316\n        // pad milliseconds to have three digits.                                                                      // 1317\n        return (                                                                                                       // 1318\n            year + '-' + arraySlice(result, 0, 2).join('-') +                                                          // 1319\n            'T' + arraySlice(result, 2).join(':') + '.' +                                                              // 1320\n            strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'                                               // 1321\n        );                                                                                                             // 1322\n    }                                                                                                                  // 1323\n}, hasNegativeDateBug || hasSafari51DateBug);                                                                          // 1324\n                                                                                                                       // 1325\n// ES5 15.9.5.44                                                                                                       // 1326\n// http://es5.github.com/#x15.9.5.44                                                                                   // 1327\n// This function provides a String representation of a Date object for use by                                          // 1328\n// JSON.stringify (15.12.3).                                                                                           // 1329\nvar dateToJSONIsSupported = (function () {                                                                             // 1330\n    try {                                                                                                              // 1331\n        return Date.prototype.toJSON &&                                                                                // 1332\n            new Date(NaN).toJSON() === null &&                                                                         // 1333\n            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&                                      // 1334\n            Date.prototype.toJSON.call({ // generic                                                                    // 1335\n                toISOString: function () { return true; }                                                              // 1336\n            });                                                                                                        // 1337\n    } catch (e) {                                                                                                      // 1338\n        return false;                                                                                                  // 1339\n    }                                                                                                                  // 1340\n}());                                                                                                                  // 1341\nif (!dateToJSONIsSupported) {                                                                                          // 1342\n    Date.prototype.toJSON = function toJSON(key) {                                                                     // 1343\n        // When the toJSON method is called with argument key, the following                                           // 1344\n        // steps are taken:                                                                                            // 1345\n                                                                                                                       // 1346\n        // 1.  Let O be the result of calling ToObject, giving it the this                                             // 1347\n        // value as its argument.                                                                                      // 1348\n        // 2. Let tv be ES.ToPrimitive(O, hint Number).                                                                // 1349\n        var O = $Object(this);                                                                                         // 1350\n        var tv = ES.ToPrimitive(O);                                                                                    // 1351\n        // 3. If tv is a Number and is not finite, return null.                                                        // 1352\n        if (typeof tv === 'number' && !isFinite(tv)) {                                                                 // 1353\n            return null;                                                                                               // 1354\n        }                                                                                                              // 1355\n        // 4. Let toISO be the result of calling the [[Get]] internal method of                                        // 1356\n        // O with argument \"toISOString\".                                                                              // 1357\n        var toISO = O.toISOString;                                                                                     // 1358\n        // 5. If IsCallable(toISO) is false, throw a TypeError exception.                                              // 1359\n        if (!isCallable(toISO)) {                                                                                      // 1360\n            throw new TypeError('toISOString property is not callable');                                               // 1361\n        }                                                                                                              // 1362\n        // 6. Return the result of calling the [[Call]] internal method of                                             // 1363\n        //  toISO with O as the this value and an empty argument list.                                                 // 1364\n        return toISO.call(O);                                                                                          // 1365\n                                                                                                                       // 1366\n        // NOTE 1 The argument is ignored.                                                                             // 1367\n                                                                                                                       // 1368\n        // NOTE 2 The toJSON function is intentionally generic; it does not                                            // 1369\n        // require that its this value be a Date object. Therefore, it can be                                          // 1370\n        // transferred to other kinds of objects for use as a method. However,                                         // 1371\n        // it does require that any such object have a toISOString method. An                                          // 1372\n        // object is free to use the argument key to filter its                                                        // 1373\n        // stringification.                                                                                            // 1374\n    };                                                                                                                 // 1375\n}                                                                                                                      // 1376\n                                                                                                                       // 1377\n// ES5 15.9.4.2                                                                                                        // 1378\n// http://es5.github.com/#x15.9.4.2                                                                                    // 1379\n// based on work shared by Daniel Friesen (dantman)                                                                    // 1380\n// http://gist.github.com/303249                                                                                       // 1381\nvar supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;                                        // 1382\nvar acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));\nvar doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));                                            // 1384\nif (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {                                         // 1385\n    // XXX global assignment won't work in embeddings that use                                                         // 1386\n    // an alternate object for the context.                                                                            // 1387\n    /* global Date: true */                                                                                            // 1388\n    /* eslint-disable no-undef */                                                                                      // 1389\n    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;                                                                    // 1390\n    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());        // 1391\n    /* eslint-disable no-implicit-globals */                                                                           // 1392\n    Date = (function (NativeDate) {                                                                                    // 1393\n    /* eslint-enable no-implicit-globals */                                                                            // 1394\n    /* eslint-enable no-undef */                                                                                       // 1395\n        // Date.length === 7                                                                                           // 1396\n        var DateShim = function Date(Y, M, D, h, m, s, ms) {                                                           // 1397\n            var length = arguments.length;                                                                             // 1398\n            var date;                                                                                                  // 1399\n            if (this instanceof NativeDate) {                                                                          // 1400\n                var seconds = s;                                                                                       // 1401\n                var millis = ms;                                                                                       // 1402\n                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {                               // 1403\n                    // work around a Safari 8/9 bug where it treats the seconds as signed                              // 1404\n                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                      // 1405\n                    var sToShift = Math.floor(msToShift / 1e3);                                                        // 1406\n                    seconds += sToShift;                                                                               // 1407\n                    millis -= sToShift * 1e3;                                                                          // 1408\n                }                                                                                                      // 1409\n                date = length === 1 && $String(Y) === Y ? // isString(Y)                                               // 1410\n                    // We explicitly pass it through parse:                                                            // 1411\n                    new NativeDate(DateShim.parse(Y)) :                                                                // 1412\n                    // We have to manually make calls depending on argument                                            // 1413\n                    // length here                                                                                     // 1414\n                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :                                     // 1415\n                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :                                             // 1416\n                    length >= 5 ? new NativeDate(Y, M, D, h, m) :                                                      // 1417\n                    length >= 4 ? new NativeDate(Y, M, D, h) :                                                         // 1418\n                    length >= 3 ? new NativeDate(Y, M, D) :                                                            // 1419\n                    length >= 2 ? new NativeDate(Y, M) :                                                               // 1420\n                    length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :                                   // 1421\n                                  new NativeDate();                                                                    // 1422\n            } else {                                                                                                   // 1423\n                date = NativeDate.apply(this, arguments);                                                              // 1424\n            }                                                                                                          // 1425\n            if (!isPrimitive(date)) {                                                                                  // 1426\n              // Prevent mixups with unfixed Date object                                                               // 1427\n              defineProperties(date, { constructor: DateShim }, true);                                                 // 1428\n            }                                                                                                          // 1429\n            return date;                                                                                               // 1430\n        };                                                                                                             // 1431\n                                                                                                                       // 1432\n        // 15.9.1.15 Date Time String Format.                                                                          // 1433\n        var isoDateExpression = new RegExp('^' +                                                                       // 1434\n            '(\\\\d{4}|[+-]\\\\d{6})' + // four-digit year capture or sign +                                               // 1435\n                                      // 6-digit extended year                                                         // 1436\n            '(?:-(\\\\d{2})' + // optional month capture                                                                 // 1437\n            '(?:-(\\\\d{2})' + // optional day capture                                                                   // 1438\n            '(?:' + // capture hours:minutes:seconds.milliseconds                                                      // 1439\n                'T(\\\\d{2})' + // hours capture                                                                         // 1440\n                ':(\\\\d{2})' + // minutes capture                                                                       // 1441\n                '(?:' + // optional :seconds.milliseconds                                                              // 1442\n                    ':(\\\\d{2})' + // seconds capture                                                                   // 1443\n                    '(?:(\\\\.\\\\d{1,}))?' + // milliseconds capture                                                      // 1444\n                ')?' +                                                                                                 // 1445\n            '(' + // capture UTC offset component                                                                      // 1446\n                'Z|' + // UTC capture                                                                                  // 1447\n                '(?:' + // offset specifier +/-hours:minutes                                                           // 1448\n                    '([-+])' + // sign capture                                                                         // 1449\n                    '(\\\\d{2})' + // hours offset capture                                                               // 1450\n                    ':(\\\\d{2})' + // minutes offset capture                                                            // 1451\n                ')' +                                                                                                  // 1452\n            ')?)?)?)?' +                                                                                               // 1453\n        '$');                                                                                                          // 1454\n                                                                                                                       // 1455\n        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];                                     // 1456\n                                                                                                                       // 1457\n        var dayFromMonth = function dayFromMonth(year, month) {                                                        // 1458\n            var t = month > 1 ? 1 : 0;                                                                                 // 1459\n            return (                                                                                                   // 1460\n                months[month] +                                                                                        // 1461\n                Math.floor((year - 1969 + t) / 4) -                                                                    // 1462\n                Math.floor((year - 1901 + t) / 100) +                                                                  // 1463\n                Math.floor((year - 1601 + t) / 400) +                                                                  // 1464\n                365 * (year - 1970)                                                                                    // 1465\n            );                                                                                                         // 1466\n        };                                                                                                             // 1467\n                                                                                                                       // 1468\n        var toUTC = function toUTC(t) {                                                                                // 1469\n            var s = 0;                                                                                                 // 1470\n            var ms = t;                                                                                                // 1471\n            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {                                                  // 1472\n                // work around a Safari 8/9 bug where it treats the seconds as signed                                  // 1473\n                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                          // 1474\n                var sToShift = Math.floor(msToShift / 1e3);                                                            // 1475\n                s += sToShift;                                                                                         // 1476\n                ms -= sToShift * 1e3;                                                                                  // 1477\n            }                                                                                                          // 1478\n            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));                                                   // 1479\n        };                                                                                                             // 1480\n                                                                                                                       // 1481\n        // Copy any custom methods a 3rd party library may have added                                                  // 1482\n        for (var key in NativeDate) {                                                                                  // 1483\n            if (owns(NativeDate, key)) {                                                                               // 1484\n                DateShim[key] = NativeDate[key];                                                                       // 1485\n            }                                                                                                          // 1486\n        }                                                                                                              // 1487\n                                                                                                                       // 1488\n        // Copy \"native\" methods explicitly; they may be non-enumerable                                                // 1489\n        defineProperties(DateShim, {                                                                                   // 1490\n            now: NativeDate.now,                                                                                       // 1491\n            UTC: NativeDate.UTC                                                                                        // 1492\n        }, true);                                                                                                      // 1493\n        DateShim.prototype = NativeDate.prototype;                                                                     // 1494\n        defineProperties(DateShim.prototype, {                                                                         // 1495\n            constructor: DateShim                                                                                      // 1496\n        }, true);                                                                                                      // 1497\n                                                                                                                       // 1498\n        // Upgrade Date.parse to handle simplified ISO 8601 strings                                                    // 1499\n        var parseShim = function parse(string) {                                                                       // 1500\n            var match = isoDateExpression.exec(string);                                                                // 1501\n            if (match) {                                                                                               // 1502\n                // parse months, days, hours, minutes, seconds, and milliseconds                                       // 1503\n                // provide default values if necessary                                                                 // 1504\n                // parse the UTC offset component                                                                      // 1505\n                var year = $Number(match[1]),                                                                          // 1506\n                    month = $Number(match[2] || 1) - 1,                                                                // 1507\n                    day = $Number(match[3] || 1) - 1,                                                                  // 1508\n                    hour = $Number(match[4] || 0),                                                                     // 1509\n                    minute = $Number(match[5] || 0),                                                                   // 1510\n                    second = $Number(match[6] || 0),                                                                   // 1511\n                    millisecond = Math.floor($Number(match[7] || 0) * 1000),                                           // 1512\n                    // When time zone is missed, local offset should be used                                           // 1513\n                    // (ES 5.1 bug)                                                                                    // 1514\n                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112                                             // 1515\n                    isLocalTime = Boolean(match[4] && !match[8]),                                                      // 1516\n                    signOffset = match[9] === '-' ? 1 : -1,                                                            // 1517\n                    hourOffset = $Number(match[10] || 0),                                                              // 1518\n                    minuteOffset = $Number(match[11] || 0),                                                            // 1519\n                    result;                                                                                            // 1520\n                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;                   // 1521\n                if (                                                                                                   // 1522\n                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&                                            // 1523\n                    minute < 60 && second < 60 && millisecond < 1000 &&                                                // 1524\n                    month > -1 && month < 12 && hourOffset < 24 &&                                                     // 1525\n                    minuteOffset < 60 && // detect invalid offsets                                                     // 1526\n                    day > -1 &&                                                                                        // 1527\n                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))                                  // 1528\n                ) {                                                                                                    // 1529\n                    result = (                                                                                         // 1530\n                        (dayFromMonth(year, month) + day) * 24 +                                                       // 1531\n                        hour +                                                                                         // 1532\n                        hourOffset * signOffset                                                                        // 1533\n                    ) * 60;                                                                                            // 1534\n                    result = (                                                                                         // 1535\n                        (result + minute + minuteOffset * signOffset) * 60 +                                           // 1536\n                        second                                                                                         // 1537\n                    ) * 1000 + millisecond;                                                                            // 1538\n                    if (isLocalTime) {                                                                                 // 1539\n                        result = toUTC(result);                                                                        // 1540\n                    }                                                                                                  // 1541\n                    if (-8.64e15 <= result && result <= 8.64e15) {                                                     // 1542\n                        return result;                                                                                 // 1543\n                    }                                                                                                  // 1544\n                }                                                                                                      // 1545\n                return NaN;                                                                                            // 1546\n            }                                                                                                          // 1547\n            return NativeDate.parse.apply(this, arguments);                                                            // 1548\n        };                                                                                                             // 1549\n        defineProperties(DateShim, { parse: parseShim });                                                              // 1550\n                                                                                                                       // 1551\n        return DateShim;                                                                                               // 1552\n    }(Date));                                                                                                          // 1553\n    /* global Date: false */                                                                                           // 1554\n}                                                                                                                      // 1555\n                                                                                                                       // 1556\n// ES5 15.9.4.4                                                                                                        // 1557\n// http://es5.github.com/#x15.9.4.4                                                                                    // 1558\nif (!Date.now) {                                                                                                       // 1559\n    Date.now = function now() {                                                                                        // 1560\n        return new Date().getTime();                                                                                   // 1561\n    };                                                                                                                 // 1562\n}                                                                                                                      // 1563\n                                                                                                                       // 1564\n//                                                                                                                     // 1565\n// Number                                                                                                              // 1566\n// ======                                                                                                              // 1567\n//                                                                                                                     // 1568\n                                                                                                                       // 1569\n// ES5.1 15.7.4.5                                                                                                      // 1570\n// http://es5.github.com/#x15.7.4.5                                                                                    // 1571\nvar hasToFixedBugs = NumberPrototype.toFixed && (                                                                      // 1572\n  (0.00008).toFixed(3) !== '0.000' ||                                                                                  // 1573\n  (0.9).toFixed(0) !== '1' ||                                                                                          // 1574\n  (1.255).toFixed(2) !== '1.25' ||                                                                                     // 1575\n  (1000000000000000128).toFixed(0) !== '1000000000000000128'                                                           // 1576\n);                                                                                                                     // 1577\n                                                                                                                       // 1578\nvar toFixedHelpers = {                                                                                                 // 1579\n  base: 1e7,                                                                                                           // 1580\n  size: 6,                                                                                                             // 1581\n  data: [0, 0, 0, 0, 0, 0],                                                                                            // 1582\n  multiply: function multiply(n, c) {                                                                                  // 1583\n      var i = -1;                                                                                                      // 1584\n      var c2 = c;                                                                                                      // 1585\n      while (++i < toFixedHelpers.size) {                                                                              // 1586\n          c2 += n * toFixedHelpers.data[i];                                                                            // 1587\n          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;                                                           // 1588\n          c2 = Math.floor(c2 / toFixedHelpers.base);                                                                   // 1589\n      }                                                                                                                // 1590\n  },                                                                                                                   // 1591\n  divide: function divide(n) {                                                                                         // 1592\n      var i = toFixedHelpers.size;                                                                                     // 1593\n      var c = 0;                                                                                                       // 1594\n      while (--i >= 0) {                                                                                               // 1595\n          c += toFixedHelpers.data[i];                                                                                 // 1596\n          toFixedHelpers.data[i] = Math.floor(c / n);                                                                  // 1597\n          c = (c % n) * toFixedHelpers.base;                                                                           // 1598\n      }                                                                                                                // 1599\n  },                                                                                                                   // 1600\n  numToString: function numToString() {                                                                                // 1601\n      var i = toFixedHelpers.size;                                                                                     // 1602\n      var s = '';                                                                                                      // 1603\n      while (--i >= 0) {                                                                                               // 1604\n          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {                                                   // 1605\n              var t = $String(toFixedHelpers.data[i]);                                                                 // 1606\n              if (s === '') {                                                                                          // 1607\n                  s = t;                                                                                               // 1608\n              } else {                                                                                                 // 1609\n                  s += strSlice('0000000', 0, 7 - t.length) + t;                                                       // 1610\n              }                                                                                                        // 1611\n          }                                                                                                            // 1612\n      }                                                                                                                // 1613\n      return s;                                                                                                        // 1614\n  },                                                                                                                   // 1615\n  pow: function pow(x, n, acc) {                                                                                       // 1616\n      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));                        // 1617\n  },                                                                                                                   // 1618\n  log: function log(x) {                                                                                               // 1619\n      var n = 0;                                                                                                       // 1620\n      var x2 = x;                                                                                                      // 1621\n      while (x2 >= 4096) {                                                                                             // 1622\n          n += 12;                                                                                                     // 1623\n          x2 /= 4096;                                                                                                  // 1624\n      }                                                                                                                // 1625\n      while (x2 >= 2) {                                                                                                // 1626\n          n += 1;                                                                                                      // 1627\n          x2 /= 2;                                                                                                     // 1628\n      }                                                                                                                // 1629\n      return n;                                                                                                        // 1630\n  }                                                                                                                    // 1631\n};                                                                                                                     // 1632\n                                                                                                                       // 1633\nvar toFixedShim = function toFixed(fractionDigits) {                                                                   // 1634\n    var f, x, s, m, e, z, j, k;                                                                                        // 1635\n                                                                                                                       // 1636\n    // Test for NaN and round fractionDigits down                                                                      // 1637\n    f = $Number(fractionDigits);                                                                                       // 1638\n    f = isActualNaN(f) ? 0 : Math.floor(f);                                                                            // 1639\n                                                                                                                       // 1640\n    if (f < 0 || f > 20) {                                                                                             // 1641\n        throw new RangeError('Number.toFixed called with invalid number of decimals');                                 // 1642\n    }                                                                                                                  // 1643\n                                                                                                                       // 1644\n    x = $Number(this);                                                                                                 // 1645\n                                                                                                                       // 1646\n    if (isActualNaN(x)) {                                                                                              // 1647\n        return 'NaN';                                                                                                  // 1648\n    }                                                                                                                  // 1649\n                                                                                                                       // 1650\n    // If it is too big or small, return the string value of the number                                                // 1651\n    if (x <= -1e21 || x >= 1e21) {                                                                                     // 1652\n        return $String(x);                                                                                             // 1653\n    }                                                                                                                  // 1654\n                                                                                                                       // 1655\n    s = '';                                                                                                            // 1656\n                                                                                                                       // 1657\n    if (x < 0) {                                                                                                       // 1658\n        s = '-';                                                                                                       // 1659\n        x = -x;                                                                                                        // 1660\n    }                                                                                                                  // 1661\n                                                                                                                       // 1662\n    m = '0';                                                                                                           // 1663\n                                                                                                                       // 1664\n    if (x > 1e-21) {                                                                                                   // 1665\n        // 1e-21 < x < 1e21                                                                                            // 1666\n        // -70 < log2(x) < 70                                                                                          // 1667\n        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;                                                 // 1668\n        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));                              // 1669\n        z *= 0x10000000000000; // Math.pow(2, 52);                                                                     // 1670\n        e = 52 - e;                                                                                                    // 1671\n                                                                                                                       // 1672\n        // -18 < e < 122                                                                                               // 1673\n        // x = z / 2 ^ e                                                                                               // 1674\n        if (e > 0) {                                                                                                   // 1675\n            toFixedHelpers.multiply(0, z);                                                                             // 1676\n            j = f;                                                                                                     // 1677\n                                                                                                                       // 1678\n            while (j >= 7) {                                                                                           // 1679\n                toFixedHelpers.multiply(1e7, 0);                                                                       // 1680\n                j -= 7;                                                                                                // 1681\n            }                                                                                                          // 1682\n                                                                                                                       // 1683\n            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);                                                  // 1684\n            j = e - 1;                                                                                                 // 1685\n                                                                                                                       // 1686\n            while (j >= 23) {                                                                                          // 1687\n                toFixedHelpers.divide(1 << 23);                                                                        // 1688\n                j -= 23;                                                                                               // 1689\n            }                                                                                                          // 1690\n                                                                                                                       // 1691\n            toFixedHelpers.divide(1 << j);                                                                             // 1692\n            toFixedHelpers.multiply(1, 1);                                                                             // 1693\n            toFixedHelpers.divide(2);                                                                                  // 1694\n            m = toFixedHelpers.numToString();                                                                          // 1695\n        } else {                                                                                                       // 1696\n            toFixedHelpers.multiply(0, z);                                                                             // 1697\n            toFixedHelpers.multiply(1 << (-e), 0);                                                                     // 1698\n            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);                           // 1699\n        }                                                                                                              // 1700\n    }                                                                                                                  // 1701\n                                                                                                                       // 1702\n    if (f > 0) {                                                                                                       // 1703\n        k = m.length;                                                                                                  // 1704\n                                                                                                                       // 1705\n        if (k <= f) {                                                                                                  // 1706\n            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;                                               // 1707\n        } else {                                                                                                       // 1708\n            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);                                                  // 1709\n        }                                                                                                              // 1710\n    } else {                                                                                                           // 1711\n        m = s + m;                                                                                                     // 1712\n    }                                                                                                                  // 1713\n                                                                                                                       // 1714\n    return m;                                                                                                          // 1715\n};                                                                                                                     // 1716\ndefineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);                                           // 1717\n                                                                                                                       // 1718\nvar hasToPrecisionUndefinedBug = (function () {                                                                        // 1719\n    try {                                                                                                              // 1720\n        return 1.0.toPrecision(undefined) === '1';                                                                     // 1721\n    } catch (e) {                                                                                                      // 1722\n        return true;                                                                                                   // 1723\n    }                                                                                                                  // 1724\n}());                                                                                                                  // 1725\nvar originalToPrecision = NumberPrototype.toPrecision;                                                                 // 1726\ndefineProperties(NumberPrototype, {                                                                                    // 1727\n    toPrecision: function toPrecision(precision) {                                                                     // 1728\n        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);\n    }                                                                                                                  // 1730\n}, hasToPrecisionUndefinedBug);                                                                                        // 1731\n                                                                                                                       // 1732\n//                                                                                                                     // 1733\n// String                                                                                                              // 1734\n// ======                                                                                                              // 1735\n//                                                                                                                     // 1736\n                                                                                                                       // 1737\n// ES5 15.5.4.14                                                                                                       // 1738\n// http://es5.github.com/#x15.5.4.14                                                                                   // 1739\n                                                                                                                       // 1740\n// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]                                                    // 1741\n// Many browsers do not split properly with regular expressions or they                                                // 1742\n// do not perform the split correctly under obscure conditions.                                                        // 1743\n// See http://blog.stevenlevithan.com/archives/cross-browser-split                                                     // 1744\n// I've tested in many browsers and this seems to cover the deviant ones:                                              // 1745\n//    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]                                                               // 1746\n//    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]                                                  // 1747\n//    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not                                             // 1748\n//       [undefined, \"t\", undefined, \"e\", ...]                                                                         // 1749\n//    ''.split(/.?/) should be [], not [\"\"]                                                                            // 1750\n//    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]                                                             // 1751\n                                                                                                                       // 1752\nif (                                                                                                                   // 1753\n    'ab'.split(/(?:ab)*/).length !== 2 ||                                                                              // 1754\n    '.'.split(/(.?)(.?)/).length !== 4 ||                                                                              // 1755\n    'tesst'.split(/(s)*/)[1] === 't' ||                                                                                // 1756\n    'test'.split(/(?:)/, -1).length !== 4 ||                                                                           // 1757\n    ''.split(/.?/).length ||                                                                                           // 1758\n    '.'.split(/()()/).length > 1                                                                                       // 1759\n) {                                                                                                                    // 1760\n    (function () {                                                                                                     // 1761\n        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group\n        var maxSafe32BitInt = Math.pow(2, 32) - 1;                                                                     // 1763\n                                                                                                                       // 1764\n        StringPrototype.split = function (separator, limit) {                                                          // 1765\n            var string = String(this);                                                                                 // 1766\n            if (typeof separator === 'undefined' && limit === 0) {                                                     // 1767\n                return [];                                                                                             // 1768\n            }                                                                                                          // 1769\n                                                                                                                       // 1770\n            // If `separator` is not a regex, use native split                                                         // 1771\n            if (!isRegex(separator)) {                                                                                 // 1772\n                return strSplit(this, separator, limit);                                                               // 1773\n            }                                                                                                          // 1774\n                                                                                                                       // 1775\n            var output = [];                                                                                           // 1776\n            var flags = (separator.ignoreCase ? 'i' : '') +                                                            // 1777\n                        (separator.multiline ? 'm' : '') +                                                             // 1778\n                        (separator.unicode ? 'u' : '') + // in ES6                                                     // 1779\n                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6                                           // 1780\n                lastLastIndex = 0,                                                                                     // 1781\n                // Make `global` and avoid `lastIndex` issues by working with a copy                                   // 1782\n                separator2, match, lastIndex, lastLength;                                                              // 1783\n            var separatorCopy = new RegExp(separator.source, flags + 'g');                                             // 1784\n            if (!compliantExecNpcg) {                                                                                  // 1785\n                // Doesn't need flags gy, but they don't hurt                                                          // 1786\n                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);                               // 1787\n            }                                                                                                          // 1788\n            /* Values for `limit`, per the spec:                                                                       // 1789\n             * If undefined: 4294967295 // maxSafe32BitInt                                                             // 1790\n             * If 0, Infinity, or NaN: 0                                                                               // 1791\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;             // 1792\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))                                            // 1793\n             * If other: Type-convert, then use the above rules                                                        // 1794\n             */                                                                                                        // 1795\n            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);                      // 1796\n            match = separatorCopy.exec(string);                                                                        // 1797\n            while (match) {                                                                                            // 1798\n                // `separatorCopy.lastIndex` is not reliable cross-browser                                             // 1799\n                lastIndex = match.index + match[0].length;                                                             // 1800\n                if (lastIndex > lastLastIndex) {                                                                       // 1801\n                    pushCall(output, strSlice(string, lastLastIndex, match.index));                                    // 1802\n                    // Fix browsers whose `exec` methods don't consistently return `undefined` for                     // 1803\n                    // nonparticipating capturing groups                                                               // 1804\n                    if (!compliantExecNpcg && match.length > 1) {                                                      // 1805\n                        /* eslint-disable no-loop-func */                                                              // 1806\n                        match[0].replace(separator2, function () {                                                     // 1807\n                            for (var i = 1; i < arguments.length - 2; i++) {                                           // 1808\n                                if (typeof arguments[i] === 'undefined') {                                             // 1809\n                                    match[i] = void 0;                                                                 // 1810\n                                }                                                                                      // 1811\n                            }                                                                                          // 1812\n                        });                                                                                            // 1813\n                        /* eslint-enable no-loop-func */                                                               // 1814\n                    }                                                                                                  // 1815\n                    if (match.length > 1 && match.index < string.length) {                                             // 1816\n                        array_push.apply(output, arraySlice(match, 1));                                                // 1817\n                    }                                                                                                  // 1818\n                    lastLength = match[0].length;                                                                      // 1819\n                    lastLastIndex = lastIndex;                                                                         // 1820\n                    if (output.length >= splitLimit) {                                                                 // 1821\n                        break;                                                                                         // 1822\n                    }                                                                                                  // 1823\n                }                                                                                                      // 1824\n                if (separatorCopy.lastIndex === match.index) {                                                         // 1825\n                    separatorCopy.lastIndex++; // Avoid an infinite loop                                               // 1826\n                }                                                                                                      // 1827\n                match = separatorCopy.exec(string);                                                                    // 1828\n            }                                                                                                          // 1829\n            if (lastLastIndex === string.length) {                                                                     // 1830\n                if (lastLength || !separatorCopy.test('')) {                                                           // 1831\n                    pushCall(output, '');                                                                              // 1832\n                }                                                                                                      // 1833\n            } else {                                                                                                   // 1834\n                pushCall(output, strSlice(string, lastLastIndex));                                                     // 1835\n            }                                                                                                          // 1836\n            return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;                            // 1837\n        };                                                                                                             // 1838\n    }());                                                                                                              // 1839\n                                                                                                                       // 1840\n// [bugfix, chrome]                                                                                                    // 1841\n// If separator is undefined, then the result array contains just one String,                                          // 1842\n// which is the this value (converted to a String). If limit is not undefined,                                         // 1843\n// then the output array is truncated so that it contains no more than limit                                           // 1844\n// elements.                                                                                                           // 1845\n// \"0\".split(undefined, 0) -> []                                                                                       // 1846\n} else if ('0'.split(void 0, 0).length) {                                                                              // 1847\n    StringPrototype.split = function split(separator, limit) {                                                         // 1848\n        if (typeof separator === 'undefined' && limit === 0) { return []; }                                            // 1849\n        return strSplit(this, separator, limit);                                                                       // 1850\n    };                                                                                                                 // 1851\n}                                                                                                                      // 1852\n                                                                                                                       // 1853\nvar str_replace = StringPrototype.replace;                                                                             // 1854\nvar replaceReportsGroupsCorrectly = (function () {                                                                     // 1855\n    var groups = [];                                                                                                   // 1856\n    'x'.replace(/x(.)?/g, function (match, group) {                                                                    // 1857\n        pushCall(groups, group);                                                                                       // 1858\n    });                                                                                                                // 1859\n    return groups.length === 1 && typeof groups[0] === 'undefined';                                                    // 1860\n}());                                                                                                                  // 1861\n                                                                                                                       // 1862\nif (!replaceReportsGroupsCorrectly) {                                                                                  // 1863\n    StringPrototype.replace = function replace(searchValue, replaceValue) {                                            // 1864\n        var isFn = isCallable(replaceValue);                                                                           // 1865\n        var hasCapturingGroups = isRegex(searchValue) && (/\\)[*?]/).test(searchValue.source);                          // 1866\n        if (!isFn || !hasCapturingGroups) {                                                                            // 1867\n            return str_replace.call(this, searchValue, replaceValue);                                                  // 1868\n        } else {                                                                                                       // 1869\n            var wrappedReplaceValue = function (match) {                                                               // 1870\n                var length = arguments.length;                                                                         // 1871\n                var originalLastIndex = searchValue.lastIndex;                                                         // 1872\n                searchValue.lastIndex = 0;                                                                             // 1873\n                var args = searchValue.exec(match) || [];                                                              // 1874\n                searchValue.lastIndex = originalLastIndex;                                                             // 1875\n                pushCall(args, arguments[length - 2], arguments[length - 1]);                                          // 1876\n                return replaceValue.apply(this, args);                                                                 // 1877\n            };                                                                                                         // 1878\n            return str_replace.call(this, searchValue, wrappedReplaceValue);                                           // 1879\n        }                                                                                                              // 1880\n    };                                                                                                                 // 1881\n}                                                                                                                      // 1882\n                                                                                                                       // 1883\n// ECMA-262, 3rd B.2.3                                                                                                 // 1884\n// Not an ECMAScript standard, although ECMAScript 3rd Edition has a                                                   // 1885\n// non-normative section suggesting uniform semantics and it should be                                                 // 1886\n// normalized across all browsers                                                                                      // 1887\n// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE                                             // 1888\nvar string_substr = StringPrototype.substr;                                                                            // 1889\nvar hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';                                                       // 1890\ndefineProperties(StringPrototype, {                                                                                    // 1891\n    substr: function substr(start, length) {                                                                           // 1892\n        var normalizedStart = start;                                                                                   // 1893\n        if (start < 0) {                                                                                               // 1894\n            normalizedStart = max(this.length + start, 0);                                                             // 1895\n        }                                                                                                              // 1896\n        return string_substr.call(this, normalizedStart, length);                                                      // 1897\n    }                                                                                                                  // 1898\n}, hasNegativeSubstrBug);                                                                                              // 1899\n                                                                                                                       // 1900\n// ES5 15.5.4.20                                                                                                       // 1901\n// whitespace from: http://es5.github.io/#x15.5.4.20                                                                   // 1902\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +                                          // 1903\n    '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +                                             // 1904\n    '\\u2029\\uFEFF';                                                                                                    // 1905\nvar zeroWidth = '\\u200b';                                                                                              // 1906\nvar wsRegexChars = '[' + ws + ']';                                                                                     // 1907\nvar trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');                                             // 1908\nvar trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');                                                    // 1909\nvar hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());                                   // 1910\ndefineProperties(StringPrototype, {                                                                                    // 1911\n    // http://blog.stevenlevithan.com/archives/faster-trim-javascript                                                  // 1912\n    // http://perfectionkills.com/whitespace-deviations/                                                               // 1913\n    trim: function trim() {                                                                                            // 1914\n        if (typeof this === 'undefined' || this === null) {                                                            // 1915\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1916\n        }                                                                                                              // 1917\n        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');                                  // 1918\n    }                                                                                                                  // 1919\n}, hasTrimWhitespaceBug);                                                                                              // 1920\nvar trim = call.bind(String.prototype.trim);                                                                           // 1921\n                                                                                                                       // 1922\nvar hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;                              // 1923\ndefineProperties(StringPrototype, {                                                                                    // 1924\n    lastIndexOf: function lastIndexOf(searchString) {                                                                  // 1925\n        if (typeof this === 'undefined' || this === null) {                                                            // 1926\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1927\n        }                                                                                                              // 1928\n        var S = $String(this);                                                                                         // 1929\n        var searchStr = $String(searchString);                                                                         // 1930\n        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;                                               // 1931\n        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);                                               // 1932\n        var start = min(max(pos, 0), S.length);                                                                        // 1933\n        var searchLen = searchStr.length;                                                                              // 1934\n        var k = start + searchLen;                                                                                     // 1935\n        while (k > 0) {                                                                                                // 1936\n            k = max(0, k - searchLen);                                                                                 // 1937\n            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);                                      // 1938\n            if (index !== -1) {                                                                                        // 1939\n                return k + index;                                                                                      // 1940\n            }                                                                                                          // 1941\n        }                                                                                                              // 1942\n        return -1;                                                                                                     // 1943\n    }                                                                                                                  // 1944\n}, hasLastIndexBug);                                                                                                   // 1945\n                                                                                                                       // 1946\nvar originalLastIndexOf = StringPrototype.lastIndexOf;                                                                 // 1947\ndefineProperties(StringPrototype, {                                                                                    // 1948\n    lastIndexOf: function lastIndexOf(searchString) {                                                                  // 1949\n        return originalLastIndexOf.apply(this, arguments);                                                             // 1950\n    }                                                                                                                  // 1951\n}, StringPrototype.lastIndexOf.length !== 1);                                                                          // 1952\n                                                                                                                       // 1953\n// ES-5 15.1.2.2                                                                                                       // 1954\n/* eslint-disable radix */                                                                                             // 1955\nif (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {                                                       // 1956\n/* eslint-enable radix */                                                                                              // 1957\n    /* global parseInt: true */                                                                                        // 1958\n    parseInt = (function (origParseInt) {                                                                              // 1959\n        var hexRegex = /^[\\-+]?0[xX]/;                                                                                 // 1960\n        return function parseInt(str, radix) {                                                                         // 1961\n            var string = trim(str);                                                                                    // 1962\n            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);                                  // 1963\n            return origParseInt(string, defaultedRadix);                                                               // 1964\n        };                                                                                                             // 1965\n    }(parseInt));                                                                                                      // 1966\n}                                                                                                                      // 1967\n                                                                                                                       // 1968\n// https://es5.github.io/#x15.1.2.3                                                                                    // 1969\nif (1 / parseFloat('-0') !== -Infinity) {                                                                              // 1970\n    /* global parseFloat: true */                                                                                      // 1971\n    parseFloat = (function (origParseFloat) {                                                                          // 1972\n        return function parseFloat(string) {                                                                           // 1973\n            var inputString = trim(string);                                                                            // 1974\n            var result = origParseFloat(inputString);                                                                  // 1975\n            return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;                                  // 1976\n        };                                                                                                             // 1977\n    }(parseFloat));                                                                                                    // 1978\n}                                                                                                                      // 1979\n                                                                                                                       // 1980\nif (String(new RangeError('test')) !== 'RangeError: test') {                                                           // 1981\n    var errorToStringShim = function toString() {                                                                      // 1982\n        if (typeof this === 'undefined' || this === null) {                                                            // 1983\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1984\n        }                                                                                                              // 1985\n        var name = this.name;                                                                                          // 1986\n        if (typeof name === 'undefined') {                                                                             // 1987\n            name = 'Error';                                                                                            // 1988\n        } else if (typeof name !== 'string') {                                                                         // 1989\n            name = $String(name);                                                                                      // 1990\n        }                                                                                                              // 1991\n        var msg = this.message;                                                                                        // 1992\n        if (typeof msg === 'undefined') {                                                                              // 1993\n            msg = '';                                                                                                  // 1994\n        } else if (typeof msg !== 'string') {                                                                          // 1995\n            msg = $String(msg);                                                                                        // 1996\n        }                                                                                                              // 1997\n        if (!name) {                                                                                                   // 1998\n            return msg;                                                                                                // 1999\n        }                                                                                                              // 2000\n        if (!msg) {                                                                                                    // 2001\n            return name;                                                                                               // 2002\n        }                                                                                                              // 2003\n        return name + ': ' + msg;                                                                                      // 2004\n    };                                                                                                                 // 2005\n    // can't use defineProperties here because of toString enumeration issue in IE <= 8                                // 2006\n    Error.prototype.toString = errorToStringShim;                                                                      // 2007\n}                                                                                                                      // 2008\n                                                                                                                       // 2009\nif (supportsDescriptors) {                                                                                             // 2010\n    var ensureNonEnumerable = function (obj, prop) {                                                                   // 2011\n        if (isEnum(obj, prop)) {                                                                                       // 2012\n            var desc = Object.getOwnPropertyDescriptor(obj, prop);                                                     // 2013\n            desc.enumerable = false;                                                                                   // 2014\n            Object.defineProperty(obj, prop, desc);                                                                    // 2015\n        }                                                                                                              // 2016\n    };                                                                                                                 // 2017\n    ensureNonEnumerable(Error.prototype, 'message');                                                                   // 2018\n    if (Error.prototype.message !== '') {                                                                              // 2019\n      Error.prototype.message = '';                                                                                    // 2020\n    }                                                                                                                  // 2021\n    ensureNonEnumerable(Error.prototype, 'name');                                                                      // 2022\n}                                                                                                                      // 2023\n                                                                                                                       // 2024\nif (String(/a/mig) !== '/a/gim') {                                                                                     // 2025\n    var regexToString = function toString() {                                                                          // 2026\n        var str = '/' + this.source + '/';                                                                             // 2027\n        if (this.global) {                                                                                             // 2028\n            str += 'g';                                                                                                // 2029\n        }                                                                                                              // 2030\n        if (this.ignoreCase) {                                                                                         // 2031\n            str += 'i';                                                                                                // 2032\n        }                                                                                                              // 2033\n        if (this.multiline) {                                                                                          // 2034\n            str += 'm';                                                                                                // 2035\n        }                                                                                                              // 2036\n        return str;                                                                                                    // 2037\n    };                                                                                                                 // 2038\n    // can't use defineProperties here because of toString enumeration issue in IE <= 8                                // 2039\n    RegExp.prototype.toString = regexToString;                                                                         // 2040\n}                                                                                                                      // 2041\n                                                                                                                       // 2042\n}));                                                                                                                   // 2043\n                                                                                                                       // 2044\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es5-sham.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/es5-shim/node_modules/es5-shim/es5-sham.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * https://github.com/es-shims/es5-shim                                                                                // 2\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                  // 3\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                        // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n// vim: ts=4 sts=4 sw=4 expandtab                                                                                      // 7\n                                                                                                                       // 8\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                   // 9\n;                                                                                                                      // 10\n                                                                                                                       // 11\n// UMD (Universal Module Definition)                                                                                   // 12\n// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                             // 13\n(function (root, factory) {                                                                                            // 14\n    'use strict';                                                                                                      // 15\n                                                                                                                       // 16\n    /* global define, exports, module */                                                                               // 17\n    if (typeof define === 'function' && define.amd) {                                                                  // 18\n        // AMD. Register as an anonymous module.                                                                       // 19\n        define(factory);                                                                                               // 20\n    } else if (typeof exports === 'object') {                                                                          // 21\n        // Node. Does not work with strict CommonJS, but                                                               // 22\n        // only CommonJS-like enviroments that support module.exports,                                                 // 23\n        // like Node.                                                                                                  // 24\n        module.exports = factory();                                                                                    // 25\n    } else {                                                                                                           // 26\n        // Browser globals (root is window)                                                                            // 27\n        root.returnExports = factory();                                                                                // 28\n  }                                                                                                                    // 29\n}(this, function () {                                                                                                  // 30\n                                                                                                                       // 31\nvar call = Function.call;                                                                                              // 32\nvar prototypeOfObject = Object.prototype;                                                                              // 33\nvar owns = call.bind(prototypeOfObject.hasOwnProperty);                                                                // 34\nvar isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);                                                  // 35\nvar toStr = call.bind(prototypeOfObject.toString);                                                                     // 36\n                                                                                                                       // 37\n// If JS engine supports accessors creating shortcuts.                                                                 // 38\nvar defineGetter;                                                                                                      // 39\nvar defineSetter;                                                                                                      // 40\nvar lookupGetter;                                                                                                      // 41\nvar lookupSetter;                                                                                                      // 42\nvar supportsAccessors = owns(prototypeOfObject, '__defineGetter__');                                                   // 43\nif (supportsAccessors) {                                                                                               // 44\n    /* eslint-disable no-underscore-dangle */                                                                          // 45\n    defineGetter = call.bind(prototypeOfObject.__defineGetter__);                                                      // 46\n    defineSetter = call.bind(prototypeOfObject.__defineSetter__);                                                      // 47\n    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);                                                      // 48\n    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);                                                      // 49\n    /* eslint-enable no-underscore-dangle */                                                                           // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n// ES5 15.2.3.2                                                                                                        // 53\n// http://es5.github.com/#x15.2.3.2                                                                                    // 54\nif (!Object.getPrototypeOf) {                                                                                          // 55\n    // https://github.com/es-shims/es5-shim/issues#issue/2                                                             // 56\n    // http://ejohn.org/blog/objectgetprototypeof/                                                                     // 57\n    // recommended by fschaefer on github                                                                              // 58\n    //                                                                                                                 // 59\n    // sure, and webreflection says ^_^                                                                                // 60\n    // ... this will nerever possibly return null                                                                      // 61\n    // ... Opera Mini breaks here with infinite loops                                                                  // 62\n    Object.getPrototypeOf = function getPrototypeOf(object) {                                                          // 63\n        /* eslint-disable no-proto */                                                                                  // 64\n        var proto = object.__proto__;                                                                                  // 65\n        /* eslint-enable no-proto */                                                                                   // 66\n        if (proto || proto === null) {                                                                                 // 67\n            return proto;                                                                                              // 68\n        } else if (toStr(object.constructor) === '[object Function]') {                                                // 69\n            return object.constructor.prototype;                                                                       // 70\n        } else if (object instanceof Object) {                                                                         // 71\n          return prototypeOfObject;                                                                                    // 72\n        } else {                                                                                                       // 73\n          // Correctly return null for Objects created with `Object.create(null)`                                      // 74\n          // (shammed or native) or `{ __proto__: null}`.  Also returns null for                                       // 75\n          // cross-realm objects on browsers that lack `__proto__` support (like                                       // 76\n          // IE <11), but that's the best we can do.                                                                   // 77\n          return null;                                                                                                 // 78\n        }                                                                                                              // 79\n    };                                                                                                                 // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n// ES5 15.2.3.3                                                                                                        // 83\n// http://es5.github.com/#x15.2.3.3                                                                                    // 84\n                                                                                                                       // 85\nvar doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {                             // 86\n    try {                                                                                                              // 87\n        object.sentinel = 0;                                                                                           // 88\n        return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;                                        // 89\n    } catch (exception) {                                                                                              // 90\n        return false;                                                                                                  // 91\n    }                                                                                                                  // 92\n};                                                                                                                     // 93\n                                                                                                                       // 94\n// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.                              // 95\nif (Object.defineProperty) {                                                                                           // 96\n    var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});                                  // 97\n    var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||                                        // 98\n    doesGetOwnPropertyDescriptorWork(document.createElement('div'));                                                   // 99\n    if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {                               // 100\n        var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;                                        // 101\n    }                                                                                                                  // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\nif (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {                                            // 105\n    var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';                                   // 106\n                                                                                                                       // 107\n    /* eslint-disable no-proto */                                                                                      // 108\n    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {                            // 109\n        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {                         // 110\n            throw new TypeError(ERR_NON_OBJECT + object);                                                              // 111\n        }                                                                                                              // 112\n                                                                                                                       // 113\n        // make a valiant attempt to use the real getOwnPropertyDescriptor                                             // 114\n        // for I8's DOM elements.                                                                                      // 115\n        if (getOwnPropertyDescriptorFallback) {                                                                        // 116\n            try {                                                                                                      // 117\n                return getOwnPropertyDescriptorFallback.call(Object, object, property);                                // 118\n            } catch (exception) {                                                                                      // 119\n                // try the shim if the real one doesn't work                                                           // 120\n            }                                                                                                          // 121\n        }                                                                                                              // 122\n                                                                                                                       // 123\n        var descriptor;                                                                                                // 124\n                                                                                                                       // 125\n        // If object does not owns property return undefined immediately.                                              // 126\n        if (!owns(object, property)) {                                                                                 // 127\n            return descriptor;                                                                                         // 128\n        }                                                                                                              // 129\n                                                                                                                       // 130\n        // If object has a property then it's for sure `configurable`, and                                             // 131\n        // probably `enumerable`. Detect enumerability though.                                                         // 132\n        descriptor = {                                                                                                 // 133\n            enumerable: isEnumerable(object, property),                                                                // 134\n            configurable: true                                                                                         // 135\n        };                                                                                                             // 136\n                                                                                                                       // 137\n        // If JS engine supports accessor properties then property may be a                                            // 138\n        // getter or setter.                                                                                           // 139\n        if (supportsAccessors) {                                                                                       // 140\n            // Unfortunately `__lookupGetter__` will return a getter even                                              // 141\n            // if object has own non getter property along with a same named                                           // 142\n            // inherited getter. To avoid misbehavior we temporary remove                                              // 143\n            // `__proto__` so that `__lookupGetter__` will return getter only                                          // 144\n            // if it's owned by an object.                                                                             // 145\n            var prototype = object.__proto__;                                                                          // 146\n            var notPrototypeOfObject = object !== prototypeOfObject;                                                   // 147\n            // avoid recursion problem, breaking in Opera Mini when                                                    // 148\n            // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')                                           // 149\n            // or any other Object.prototype accessor                                                                  // 150\n            if (notPrototypeOfObject) {                                                                                // 151\n                object.__proto__ = prototypeOfObject;                                                                  // 152\n            }                                                                                                          // 153\n                                                                                                                       // 154\n            var getter = lookupGetter(object, property);                                                               // 155\n            var setter = lookupSetter(object, property);                                                               // 156\n                                                                                                                       // 157\n            if (notPrototypeOfObject) {                                                                                // 158\n                // Once we have getter and setter we can put values back.                                              // 159\n                object.__proto__ = prototype;                                                                          // 160\n            }                                                                                                          // 161\n                                                                                                                       // 162\n            if (getter || setter) {                                                                                    // 163\n                if (getter) {                                                                                          // 164\n                    descriptor.get = getter;                                                                           // 165\n                }                                                                                                      // 166\n                if (setter) {                                                                                          // 167\n                    descriptor.set = setter;                                                                           // 168\n                }                                                                                                      // 169\n                // If it was accessor property we're done and return here                                              // 170\n                // in order to avoid adding `value` to the descriptor.                                                 // 171\n                return descriptor;                                                                                     // 172\n            }                                                                                                          // 173\n        }                                                                                                              // 174\n                                                                                                                       // 175\n        // If we got this far we know that object has an own property that is                                          // 176\n        // not an accessor so we set it as a value and return descriptor.                                              // 177\n        descriptor.value = object[property];                                                                           // 178\n        descriptor.writable = true;                                                                                    // 179\n        return descriptor;                                                                                             // 180\n    };                                                                                                                 // 181\n    /* eslint-enable no-proto */                                                                                       // 182\n}                                                                                                                      // 183\n                                                                                                                       // 184\n// ES5 15.2.3.4                                                                                                        // 185\n// http://es5.github.com/#x15.2.3.4                                                                                    // 186\nif (!Object.getOwnPropertyNames) {                                                                                     // 187\n    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {                                                // 188\n        return Object.keys(object);                                                                                    // 189\n    };                                                                                                                 // 190\n}                                                                                                                      // 191\n                                                                                                                       // 192\n// ES5 15.2.3.5                                                                                                        // 193\n// http://es5.github.com/#x15.2.3.5                                                                                    // 194\nif (!Object.create) {                                                                                                  // 195\n                                                                                                                       // 196\n    // Contributed by Brandon Benvie, October, 2012                                                                    // 197\n    var createEmpty;                                                                                                   // 198\n    var supportsProto = !({ __proto__: null } instanceof Object);                                                      // 199\n                        // the following produces false positives                                                      // 200\n                        // in Opera Mini => not a reliable check                                                       // 201\n                        // Object.prototype.__proto__ === null                                                         // 202\n                                                                                                                       // 203\n    // Check for document.domain and active x support                                                                  // 204\n    // No need to use active x approach when document.domain is not set                                                // 205\n    // see https://github.com/es-shims/es5-shim/issues/150                                                             // 206\n    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                      // 207\n    /* global ActiveXObject */                                                                                         // 208\n    var shouldUseActiveX = function shouldUseActiveX() {                                                               // 209\n        // return early if document.domain not set                                                                     // 210\n        if (!document.domain) {                                                                                        // 211\n            return false;                                                                                              // 212\n        }                                                                                                              // 213\n                                                                                                                       // 214\n        try {                                                                                                          // 215\n            return !!new ActiveXObject('htmlfile');                                                                    // 216\n        } catch (exception) {                                                                                          // 217\n            return false;                                                                                              // 218\n        }                                                                                                              // 219\n    };                                                                                                                 // 220\n                                                                                                                       // 221\n    // This supports IE8 when document.domain is used                                                                  // 222\n    // see https://github.com/es-shims/es5-shim/issues/150                                                             // 223\n    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                      // 224\n    var getEmptyViaActiveX = function getEmptyViaActiveX() {                                                           // 225\n        var empty;                                                                                                     // 226\n        var xDoc;                                                                                                      // 227\n                                                                                                                       // 228\n        xDoc = new ActiveXObject('htmlfile');                                                                          // 229\n                                                                                                                       // 230\n        xDoc.write('<script><\\/script>');                                                                              // 231\n        xDoc.close();                                                                                                  // 232\n                                                                                                                       // 233\n        empty = xDoc.parentWindow.Object.prototype;                                                                    // 234\n        xDoc = null;                                                                                                   // 235\n                                                                                                                       // 236\n        return empty;                                                                                                  // 237\n    };                                                                                                                 // 238\n                                                                                                                       // 239\n    // The original implementation using an iframe                                                                     // 240\n    // before the activex approach was added                                                                           // 241\n    // see https://github.com/es-shims/es5-shim/issues/150                                                             // 242\n    var getEmptyViaIFrame = function getEmptyViaIFrame() {                                                             // 243\n        var iframe = document.createElement('iframe');                                                                 // 244\n        var parent = document.body || document.documentElement;                                                        // 245\n        var empty;                                                                                                     // 246\n                                                                                                                       // 247\n        iframe.style.display = 'none';                                                                                 // 248\n        parent.appendChild(iframe);                                                                                    // 249\n        /* eslint-disable no-script-url */                                                                             // 250\n        iframe.src = 'javascript:';                                                                                    // 251\n        /* eslint-enable no-script-url */                                                                              // 252\n                                                                                                                       // 253\n        empty = iframe.contentWindow.Object.prototype;                                                                 // 254\n        parent.removeChild(iframe);                                                                                    // 255\n        iframe = null;                                                                                                 // 256\n                                                                                                                       // 257\n        return empty;                                                                                                  // 258\n    };                                                                                                                 // 259\n                                                                                                                       // 260\n    /* global document */                                                                                              // 261\n    if (supportsProto || typeof document === 'undefined') {                                                            // 262\n        createEmpty = function () {                                                                                    // 263\n            return { __proto__: null };                                                                                // 264\n        };                                                                                                             // 265\n    } else {                                                                                                           // 266\n        // In old IE __proto__ can't be used to manually set `null`, nor does                                          // 267\n        // any other method exist to make an object that inherits from nothing,                                        // 268\n        // aside from Object.prototype itself. Instead, create a new global                                            // 269\n        // object and *steal* its Object.prototype and strip it bare. This is                                          // 270\n        // used as the prototype to create nullary objects.                                                            // 271\n        createEmpty = function () {                                                                                    // 272\n            // Determine which approach to use                                                                         // 273\n            // see https://github.com/es-shims/es5-shim/issues/150                                                     // 274\n            var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();                               // 275\n                                                                                                                       // 276\n            delete empty.constructor;                                                                                  // 277\n            delete empty.hasOwnProperty;                                                                               // 278\n            delete empty.propertyIsEnumerable;                                                                         // 279\n            delete empty.isPrototypeOf;                                                                                // 280\n            delete empty.toLocaleString;                                                                               // 281\n            delete empty.toString;                                                                                     // 282\n            delete empty.valueOf;                                                                                      // 283\n                                                                                                                       // 284\n            var Empty = function Empty() {};                                                                           // 285\n            Empty.prototype = empty;                                                                                   // 286\n            // short-circuit future calls                                                                              // 287\n            createEmpty = function () {                                                                                // 288\n                return new Empty();                                                                                    // 289\n            };                                                                                                         // 290\n            return new Empty();                                                                                        // 291\n        };                                                                                                             // 292\n    }                                                                                                                  // 293\n                                                                                                                       // 294\n    Object.create = function create(prototype, properties) {                                                           // 295\n                                                                                                                       // 296\n        var object;                                                                                                    // 297\n        var Type = function Type() {}; // An empty constructor.                                                        // 298\n                                                                                                                       // 299\n        if (prototype === null) {                                                                                      // 300\n            object = createEmpty();                                                                                    // 301\n        } else {                                                                                                       // 302\n            if (typeof prototype !== 'object' && typeof prototype !== 'function') {                                    // 303\n                // In the native implementation `parent` can be `null`                                                 // 304\n                // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)                                    // 305\n                // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`                           // 306\n                // like they are in modern browsers. Using `Object.create` on DOM elements                             // 307\n                // is...err...probably inappropriate, but the native version allows for it.                            // 308\n                throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome           // 309\n            }                                                                                                          // 310\n            Type.prototype = prototype;                                                                                // 311\n            object = new Type();                                                                                       // 312\n            // IE has no built-in implementation of `Object.getPrototypeOf`                                            // 313\n            // neither `__proto__`, but this manually setting `__proto__` will                                         // 314\n            // guarantee that `Object.getPrototypeOf` will work as expected with                                       // 315\n            // objects created using `Object.create`                                                                   // 316\n            /* eslint-disable no-proto */                                                                              // 317\n            object.__proto__ = prototype;                                                                              // 318\n            /* eslint-enable no-proto */                                                                               // 319\n        }                                                                                                              // 320\n                                                                                                                       // 321\n        if (properties !== void 0) {                                                                                   // 322\n            Object.defineProperties(object, properties);                                                               // 323\n        }                                                                                                              // 324\n                                                                                                                       // 325\n        return object;                                                                                                 // 326\n    };                                                                                                                 // 327\n}                                                                                                                      // 328\n                                                                                                                       // 329\n// ES5 15.2.3.6                                                                                                        // 330\n// http://es5.github.com/#x15.2.3.6                                                                                    // 331\n                                                                                                                       // 332\n// Patch for WebKit and IE8 standard mode                                                                              // 333\n// Designed by hax <hax.github.com>                                                                                    // 334\n// related issue: https://github.com/es-shims/es5-shim/issues#issue/5                                                  // 335\n// IE8 Reference:                                                                                                      // 336\n//     http://msdn.microsoft.com/en-us/library/dd282900.aspx                                                           // 337\n//     http://msdn.microsoft.com/en-us/library/dd229916.aspx                                                           // 338\n// WebKit Bugs:                                                                                                        // 339\n//     https://bugs.webkit.org/show_bug.cgi?id=36423                                                                   // 340\n                                                                                                                       // 341\nvar doesDefinePropertyWork = function doesDefinePropertyWork(object) {                                                 // 342\n    try {                                                                                                              // 343\n        Object.defineProperty(object, 'sentinel', {});                                                                 // 344\n        return 'sentinel' in object;                                                                                   // 345\n    } catch (exception) {                                                                                              // 346\n        return false;                                                                                                  // 347\n    }                                                                                                                  // 348\n};                                                                                                                     // 349\n                                                                                                                       // 350\n// check whether defineProperty works if it's given. Otherwise,                                                        // 351\n// shim partially.                                                                                                     // 352\nif (Object.defineProperty) {                                                                                           // 353\n    var definePropertyWorksOnObject = doesDefinePropertyWork({});                                                      // 354\n    var definePropertyWorksOnDom = typeof document === 'undefined' ||                                                  // 355\n        doesDefinePropertyWork(document.createElement('div'));                                                         // 356\n    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {                                                   // 357\n        var definePropertyFallback = Object.defineProperty,                                                            // 358\n            definePropertiesFallback = Object.defineProperties;                                                        // 359\n    }                                                                                                                  // 360\n}                                                                                                                      // 361\n                                                                                                                       // 362\nif (!Object.defineProperty || definePropertyFallback) {                                                                // 363\n    var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';                                        // 364\n    var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';                                        // 365\n    var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';                // 366\n                                                                                                                       // 367\n    Object.defineProperty = function defineProperty(object, property, descriptor) {                                    // 368\n        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {                         // 369\n            throw new TypeError(ERR_NON_OBJECT_TARGET + object);                                                       // 370\n        }                                                                                                              // 371\n        if ((typeof descriptor !== 'object' && typeof descriptor !== 'function') || descriptor === null) {             // 372\n            throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);                                               // 373\n        }                                                                                                              // 374\n        // make a valiant attempt to use the real defineProperty                                                       // 375\n        // for I8's DOM elements.                                                                                      // 376\n        if (definePropertyFallback) {                                                                                  // 377\n            try {                                                                                                      // 378\n                return definePropertyFallback.call(Object, object, property, descriptor);                              // 379\n            } catch (exception) {                                                                                      // 380\n                // try the shim if the real one doesn't work                                                           // 381\n            }                                                                                                          // 382\n        }                                                                                                              // 383\n                                                                                                                       // 384\n        // If it's a data property.                                                                                    // 385\n        if ('value' in descriptor) {                                                                                   // 386\n            // fail silently if 'writable', 'enumerable', or 'configurable'                                            // 387\n            // are requested but not supported                                                                         // 388\n            /*                                                                                                         // 389\n            // alternate approach:                                                                                     // 390\n            if ( // can't implement these features; allow false but not true                                           // 391\n                ('writable' in descriptor && !descriptor.writable) ||                                                  // 392\n                ('enumerable' in descriptor && !descriptor.enumerable) ||                                              // 393\n                ('configurable' in descriptor && !descriptor.configurable)                                             // 394\n            ))                                                                                                         // 395\n                throw new RangeError(                                                                                  // 396\n                    'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'\n                );                                                                                                     // 398\n            */                                                                                                         // 399\n                                                                                                                       // 400\n            if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {             // 401\n                // As accessors are supported only on engines implementing                                             // 402\n                // `__proto__` we can safely override `__proto__` while defining                                       // 403\n                // a property to make sure that we don't hit an inherited                                              // 404\n                // accessor.                                                                                           // 405\n                /* eslint-disable no-proto */                                                                          // 406\n                var prototype = object.__proto__;                                                                      // 407\n                object.__proto__ = prototypeOfObject;                                                                  // 408\n                // Deleting a property anyway since getter / setter may be                                             // 409\n                // defined on object itself.                                                                           // 410\n                delete object[property];                                                                               // 411\n                object[property] = descriptor.value;                                                                   // 412\n                // Setting original `__proto__` back now.                                                              // 413\n                object.__proto__ = prototype;                                                                          // 414\n                /* eslint-enable no-proto */                                                                           // 415\n            } else {                                                                                                   // 416\n                object[property] = descriptor.value;                                                                   // 417\n            }                                                                                                          // 418\n        } else {                                                                                                       // 419\n            if (!supportsAccessors && (('get' in descriptor) || ('set' in descriptor))) {                              // 420\n                throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);                                                      // 421\n            }                                                                                                          // 422\n            // If we got that far then getters and setters can be defined !!                                           // 423\n            if ('get' in descriptor) {                                                                                 // 424\n                defineGetter(object, property, descriptor.get);                                                        // 425\n            }                                                                                                          // 426\n            if ('set' in descriptor) {                                                                                 // 427\n                defineSetter(object, property, descriptor.set);                                                        // 428\n            }                                                                                                          // 429\n        }                                                                                                              // 430\n        return object;                                                                                                 // 431\n    };                                                                                                                 // 432\n}                                                                                                                      // 433\n                                                                                                                       // 434\n// ES5 15.2.3.7                                                                                                        // 435\n// http://es5.github.com/#x15.2.3.7                                                                                    // 436\nif (!Object.defineProperties || definePropertiesFallback) {                                                            // 437\n    Object.defineProperties = function defineProperties(object, properties) {                                          // 438\n        // make a valiant attempt to use the real defineProperties                                                     // 439\n        if (definePropertiesFallback) {                                                                                // 440\n            try {                                                                                                      // 441\n                return definePropertiesFallback.call(Object, object, properties);                                      // 442\n            } catch (exception) {                                                                                      // 443\n                // try the shim if the real one doesn't work                                                           // 444\n            }                                                                                                          // 445\n        }                                                                                                              // 446\n                                                                                                                       // 447\n        Object.keys(properties).forEach(function (property) {                                                          // 448\n            if (property !== '__proto__') {                                                                            // 449\n                Object.defineProperty(object, property, properties[property]);                                         // 450\n            }                                                                                                          // 451\n        });                                                                                                            // 452\n        return object;                                                                                                 // 453\n    };                                                                                                                 // 454\n}                                                                                                                      // 455\n                                                                                                                       // 456\n// ES5 15.2.3.8                                                                                                        // 457\n// http://es5.github.com/#x15.2.3.8                                                                                    // 458\nif (!Object.seal) {                                                                                                    // 459\n    Object.seal = function seal(object) {                                                                              // 460\n        if (Object(object) !== object) {                                                                               // 461\n            throw new TypeError('Object.seal can only be called on Objects.');                                         // 462\n        }                                                                                                              // 463\n        // this is misleading and breaks feature-detection, but                                                        // 464\n        // allows \"securable\" code to \"gracefully\" degrade to working                                                  // 465\n        // but insecure code.                                                                                          // 466\n        return object;                                                                                                 // 467\n    };                                                                                                                 // 468\n}                                                                                                                      // 469\n                                                                                                                       // 470\n// ES5 15.2.3.9                                                                                                        // 471\n// http://es5.github.com/#x15.2.3.9                                                                                    // 472\nif (!Object.freeze) {                                                                                                  // 473\n    Object.freeze = function freeze(object) {                                                                          // 474\n        if (Object(object) !== object) {                                                                               // 475\n            throw new TypeError('Object.freeze can only be called on Objects.');                                       // 476\n        }                                                                                                              // 477\n        // this is misleading and breaks feature-detection, but                                                        // 478\n        // allows \"securable\" code to \"gracefully\" degrade to working                                                  // 479\n        // but insecure code.                                                                                          // 480\n        return object;                                                                                                 // 481\n    };                                                                                                                 // 482\n}                                                                                                                      // 483\n                                                                                                                       // 484\n// detect a Rhino bug and patch it                                                                                     // 485\ntry {                                                                                                                  // 486\n    Object.freeze(function () {});                                                                                     // 487\n} catch (exception) {                                                                                                  // 488\n    Object.freeze = (function (freezeObject) {                                                                         // 489\n        return function freeze(object) {                                                                               // 490\n            if (typeof object === 'function') {                                                                        // 491\n                return object;                                                                                         // 492\n            } else {                                                                                                   // 493\n                return freezeObject(object);                                                                           // 494\n            }                                                                                                          // 495\n        };                                                                                                             // 496\n    }(Object.freeze));                                                                                                 // 497\n}                                                                                                                      // 498\n                                                                                                                       // 499\n// ES5 15.2.3.10                                                                                                       // 500\n// http://es5.github.com/#x15.2.3.10                                                                                   // 501\nif (!Object.preventExtensions) {                                                                                       // 502\n    Object.preventExtensions = function preventExtensions(object) {                                                    // 503\n        if (Object(object) !== object) {                                                                               // 504\n            throw new TypeError('Object.preventExtensions can only be called on Objects.');                            // 505\n        }                                                                                                              // 506\n        // this is misleading and breaks feature-detection, but                                                        // 507\n        // allows \"securable\" code to \"gracefully\" degrade to working                                                  // 508\n        // but insecure code.                                                                                          // 509\n        return object;                                                                                                 // 510\n    };                                                                                                                 // 511\n}                                                                                                                      // 512\n                                                                                                                       // 513\n// ES5 15.2.3.11                                                                                                       // 514\n// http://es5.github.com/#x15.2.3.11                                                                                   // 515\nif (!Object.isSealed) {                                                                                                // 516\n    Object.isSealed = function isSealed(object) {                                                                      // 517\n        if (Object(object) !== object) {                                                                               // 518\n            throw new TypeError('Object.isSealed can only be called on Objects.');                                     // 519\n        }                                                                                                              // 520\n        return false;                                                                                                  // 521\n    };                                                                                                                 // 522\n}                                                                                                                      // 523\n                                                                                                                       // 524\n// ES5 15.2.3.12                                                                                                       // 525\n// http://es5.github.com/#x15.2.3.12                                                                                   // 526\nif (!Object.isFrozen) {                                                                                                // 527\n    Object.isFrozen = function isFrozen(object) {                                                                      // 528\n        if (Object(object) !== object) {                                                                               // 529\n            throw new TypeError('Object.isFrozen can only be called on Objects.');                                     // 530\n        }                                                                                                              // 531\n        return false;                                                                                                  // 532\n    };                                                                                                                 // 533\n}                                                                                                                      // 534\n                                                                                                                       // 535\n// ES5 15.2.3.13                                                                                                       // 536\n// http://es5.github.com/#x15.2.3.13                                                                                   // 537\nif (!Object.isExtensible) {                                                                                            // 538\n    Object.isExtensible = function isExtensible(object) {                                                              // 539\n        // 1. If Type(O) is not Object throw a TypeError exception.                                                    // 540\n        if (Object(object) !== object) {                                                                               // 541\n            throw new TypeError('Object.isExtensible can only be called on Objects.');                                 // 542\n        }                                                                                                              // 543\n        // 2. Return the Boolean value of the [[Extensible]] internal property of O.                                   // 544\n        var name = '';                                                                                                 // 545\n        while (owns(object, name)) {                                                                                   // 546\n            name += '?';                                                                                               // 547\n        }                                                                                                              // 548\n        object[name] = true;                                                                                           // 549\n        var returnValue = owns(object, name);                                                                          // 550\n        delete object[name];                                                                                           // 551\n        return returnValue;                                                                                            // 552\n    };                                                                                                                 // 553\n}                                                                                                                      // 554\n                                                                                                                       // 555\n}));                                                                                                                   // 556\n                                                                                                                       // 557\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/es5-shim/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['es5-shim'] = exports;\n\n})();\n","servePath":"/packages/es5-shim.js"}]