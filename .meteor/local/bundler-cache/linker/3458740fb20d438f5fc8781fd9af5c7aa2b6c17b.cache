[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Email, EmailTest, EmailInternals;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/email/email.js                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Future = Npm.require('fibers/future');\nvar urlModule = Npm.require('url');\n\nEmail = {};\nEmailTest = {};\n\nEmailInternals = {\n  NpmModules: {\n    mailcomposer: {\n      version: Npm.require('mailcomposer/package.json').version,\n      module: Npm.require('mailcomposer')\n    }\n  }\n};\n\nvar MailComposer = EmailInternals.NpmModules.mailcomposer.module.MailComposer;\n\nvar makePool = function (mailUrlString) {\n  var mailUrl = urlModule.parse(mailUrlString);\n  if (mailUrl.protocol !== 'smtp:')\n    throw new Error(\"Email protocol in $MAIL_URL (\" +\n                    mailUrlString + \") must be 'smtp'\");\n\n  var port = +(mailUrl.port);\n  var auth = false;\n  if (mailUrl.auth) {\n    var parts = mailUrl.auth.split(':', 2);\n    auth = {user: parts[0] && decodeURIComponent(parts[0]),\n            pass: parts[1] && decodeURIComponent(parts[1])};\n  }\n\n  var simplesmtp = Npm.require('simplesmtp');\n  var pool = simplesmtp.createClientPool(\n    port,  // Defaults to 25\n    mailUrl.hostname,  // Defaults to \"localhost\"\n    { secureConnection: (port === 465),\n      // XXX allow maxConnections to be configured?\n      auth: auth });\n\n  pool._future_wrapped_sendMail = _.bind(Future.wrap(pool.sendMail), pool);\n  return pool;\n};\n\nvar getPool = _.once(function () {\n  // We delay this check until the first call to Email.send, in case someone\n  // set process.env.MAIL_URL in startup code.\n  var url = process.env.MAIL_URL;\n  if (! url)\n    return null;\n  return makePool(url);\n});\n\nvar next_devmode_mail_id = 0;\nvar output_stream = process.stdout;\n\n// Testing hooks\nEmailTest.overrideOutputStream = function (stream) {\n  next_devmode_mail_id = 0;\n  output_stream = stream;\n};\n\nEmailTest.restoreOutputStream = function () {\n  output_stream = process.stdout;\n};\n\nvar devModeSend = function (mc) {\n  var devmode_mail_id = next_devmode_mail_id++;\n\n  var stream = output_stream;\n\n  // This approach does not prevent other writers to stdout from interleaving.\n  stream.write(\"====== BEGIN MAIL #\" + devmode_mail_id + \" ======\\n\");\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +\n               \"environment variable.)\\n\");\n  mc.streamMessage();\n  mc.pipe(stream, {end: false});\n  var future = new Future;\n  mc.on('end', function () {\n    stream.write(\"====== END MAIL #\" + devmode_mail_id + \" ======\\n\");\n    future['return']();\n  });\n  future.wait();\n};\n\nvar smtpSend = function (pool, mc) {\n  pool._future_wrapped_sendMail(mc).wait();\n};\n\n/**\n * Mock out email sending (eg, during a test.) This is private for now.\n *\n * f receives the arguments to Email.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n */\nvar sendHooks = [];\nEmailTest.hookSend = function (f) {\n  sendHooks.push(f);\n};\n\n// Old comment below\n/**\n * Send an email.\n *\n * Connects to the mail server configured via the MAIL_URL environment\n * variable. If unset, prints formatted message to stdout. The \"from\" option\n * is required, and at least one of \"to\", \"cc\", and \"bcc\" must be provided;\n * all other options are optional.\n *\n * @param options\n * @param options.from {String} RFC5322 \"From:\" address\n * @param options.to {String|String[]} RFC5322 \"To:\" address[es]\n * @param options.cc {String|String[]} RFC5322 \"Cc:\" address[es]\n * @param options.bcc {String|String[]} RFC5322 \"Bcc:\" address[es]\n * @param options.replyTo {String|String[]} RFC5322 \"Reply-To:\" address[es]\n * @param options.subject {String} RFC5322 \"Subject:\" line\n * @param options.text {String} RFC5322 mail body (plain text)\n * @param options.html {String} RFC5322 mail body (HTML)\n * @param options.headers {Object} custom RFC5322 headers (dictionary)\n */\n\n// New API doc comment below\n/**\n * @summary Send an email. Throws an `Error` on failure to contact mail server\n * or if mail server returns an error. All fields should match\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n *\n * If the `MAIL_URL` environment variable is set, actually sends the email.\n * Otherwise, prints the contents of the email to standard out.\n *\n * Note that this package is based on mailcomposer version `0.1.15`, so make\n * sure to refer to the documentation for that version if using the\n * `attachments` or `mailComposer` options.\n * [Click here to read the mailcomposer 0.1.15 docs](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md).\n *\n * @locus Server\n * @param {Object} options\n * @param {String} options.from \"From:\" address (required)\n * @param {String|String[]} options.to,cc,bcc,replyTo\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n * @param {String} [options.subject]  \"Subject:\" line\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n * @param {Object} [options.headers] Dictionary of custom headers\n * @param {Object[]} [options.attachments] Array of attachment objects, as\n * described in the [mailcomposer documentation](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md#add-attachments).\n * @param {MailComposer} [options.mailComposer] A [MailComposer](https://github.com/andris9/mailcomposer)\n * object representing the message to be sent. Overrides all other options. You\n * can access the `mailcomposer` npm module at\n * `EmailInternals.NpmModules.mailcomposer.module`.\n */\nEmail.send = function (options) {\n  for (var i = 0; i < sendHooks.length; i++)\n    if (! sendHooks[i](options))\n      return;\n\n  var mc;\n  if (options.mailComposer) {\n    mc = options.mailComposer;\n  } else {\n    mc = new MailComposer();\n\n    // setup message data\n    mc.setMessageOption({\n      from: options.from,\n      to: options.to,\n      cc: options.cc,\n      bcc: options.bcc,\n      replyTo: options.replyTo,\n      subject: options.subject,\n      text: options.text,\n      html: options.html\n    });\n\n    _.each(options.headers, function (value, name) {\n      mc.addHeader(name, value);\n    });\n\n    _.each(options.attachments, function(attachment){\n      mc.addAttachment(attachment);\n    });\n  }\n\n  var pool = getPool();\n  if (pool) {\n    smtpSend(pool, mc);\n  } else {\n    devModeSend(mc);\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.email = {}, {\n  Email: Email,\n  EmailInternals: EmailInternals,\n  EmailTest: EmailTest\n});\n\n})();\n","servePath":"/packages/email.js"}]