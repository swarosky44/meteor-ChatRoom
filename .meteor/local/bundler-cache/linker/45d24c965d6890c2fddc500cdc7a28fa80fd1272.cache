[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar global, meteorEnv, Meteor;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/global.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nglobal = this;                                                                                                     // 1\n                                                                                                                   // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/client_environment.js                                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmeteorEnv = __meteor_runtime_config__.meteorEnv;                                                                   // 1\n                                                                                                                   // 2\n/**                                                                                                                // 3\n * @summary The Meteor namespace                                                                                   // 4\n * @namespace Meteor                                                                                               // 5\n */                                                                                                                // 6\nMeteor = {                                                                                                         // 7\n  /**                                                                                                              // 8\n   * @summary Boolean variable.  True if running in production environment.                                        // 9\n   * @locus Anywhere                                                                                               // 10\n   * @static                                                                                                       // 11\n   * @type {Boolean}                                                                                               // 12\n   */                                                                                                              // 13\n  isProduction: meteorEnv.NODE_ENV === \"production\",                                                               // 14\n                                                                                                                   // 15\n  /**                                                                                                              // 16\n   * @summary Boolean variable.  True if running in development environment.                                       // 17\n   * @locus Anywhere                                                                                               // 18\n   * @static                                                                                                       // 19\n   * @type {Boolean}                                                                                               // 20\n   */                                                                                                              // 21\n  isDevelopment: meteorEnv.NODE_ENV !== \"production\",                                                              // 22\n                                                                                                                   // 23\n  /**                                                                                                              // 24\n   * @summary Boolean variable.  True if running in client environment.                                            // 25\n   * @locus Anywhere                                                                                               // 26\n   * @static                                                                                                       // 27\n   * @type {Boolean}                                                                                               // 28\n   */                                                                                                              // 29\n  isClient: true,                                                                                                  // 30\n                                                                                                                   // 31\n  /**                                                                                                              // 32\n   * @summary Boolean variable.  True if running in server environment.                                            // 33\n   * @locus Anywhere                                                                                               // 34\n   * @static                                                                                                       // 35\n   * @type {Boolean}                                                                                               // 36\n   */                                                                                                              // 37\n  isServer: false,                                                                                                 // 38\n  isCordova: false                                                                                                 // 39\n};                                                                                                                 // 40\n                                                                                                                   // 41\nif (typeof __meteor_runtime_config__ === 'object' &&                                                               // 42\n    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                                   // 43\n  /**                                                                                                              // 44\n   * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.\n   * @locus Anywhere                                                                                               // 46\n   * @type {Object}                                                                                                // 47\n   */                                                                                                              // 48\n  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                                       // 49\n}                                                                                                                  // 50\n                                                                                                                   // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/helpers.js                                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (Meteor.isServer)                                                                                               // 1\n  var Future = Npm.require('fibers/future');                                                                       // 2\n                                                                                                                   // 3\nif (typeof __meteor_runtime_config__ === 'object' &&                                                               // 4\n    __meteor_runtime_config__.meteorRelease) {                                                                     // 5\n  /**                                                                                                              // 6\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                               // 8\n   * @type {String}                                                                                                // 9\n   */                                                                                                              // 10\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                                        // 11\n}                                                                                                                  // 12\n                                                                                                                   // 13\n// XXX find a better home for these? Ideally they would be _.get,                                                  // 14\n// _.ensure, _.delete..                                                                                            // 15\n                                                                                                                   // 16\n_.extend(Meteor, {                                                                                                 // 17\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                                // 18\n  // a[b][c] doesn't exist.                                                                                        // 19\n  //                                                                                                               // 20\n  _get: function (obj /*, arguments */) {                                                                          // 21\n    for (var i = 1; i < arguments.length; i++) {                                                                   // 22\n      if (!(arguments[i] in obj))                                                                                  // 23\n        return undefined;                                                                                          // 24\n      obj = obj[arguments[i]];                                                                                     // 25\n    }                                                                                                              // 26\n    return obj;                                                                                                    // 27\n  },                                                                                                               // 28\n                                                                                                                   // 29\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                              // 30\n  // it is created and set to {}. Either way, it is returned.                                                      // 31\n  //                                                                                                               // 32\n  _ensure: function (obj /*, arguments */) {                                                                       // 33\n    for (var i = 1; i < arguments.length; i++) {                                                                   // 34\n      var key = arguments[i];                                                                                      // 35\n      if (!(key in obj))                                                                                           // 36\n        obj[key] = {};                                                                                             // 37\n      obj = obj[key];                                                                                              // 38\n    }                                                                                                              // 39\n                                                                                                                   // 40\n    return obj;                                                                                                    // 41\n  },                                                                                                               // 42\n                                                                                                                   // 43\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                                // 44\n  // isn't empty, then a[b] unless it isn't empty.                                                                 // 45\n  //                                                                                                               // 46\n  _delete: function (obj /*, arguments */) {                                                                       // 47\n    var stack = [obj];                                                                                             // 48\n    var leaf = true;                                                                                               // 49\n    for (var i = 1; i < arguments.length - 1; i++) {                                                               // 50\n      var key = arguments[i];                                                                                      // 51\n      if (!(key in obj)) {                                                                                         // 52\n        leaf = false;                                                                                              // 53\n        break;                                                                                                     // 54\n      }                                                                                                            // 55\n      obj = obj[key];                                                                                              // 56\n      if (typeof obj !== \"object\")                                                                                 // 57\n        break;                                                                                                     // 58\n      stack.push(obj);                                                                                             // 59\n    }                                                                                                              // 60\n                                                                                                                   // 61\n    for (var i = stack.length - 1; i >= 0; i--) {                                                                  // 62\n      var key = arguments[i+1];                                                                                    // 63\n                                                                                                                   // 64\n      if (leaf)                                                                                                    // 65\n        leaf = false;                                                                                              // 66\n      else                                                                                                         // 67\n        for (var other in stack[i][key])                                                                           // 68\n          return; // not empty -- we're done                                                                       // 69\n                                                                                                                   // 70\n      delete stack[i][key];                                                                                        // 71\n    }                                                                                                              // 72\n  },                                                                                                               // 73\n                                                                                                                   // 74\n  // wrapAsync can wrap any function that takes some number of arguments that                                      // 75\n  // can't be undefined, followed by some optional arguments, where the callback                                   // 76\n  // is the last optional argument.                                                                                // 77\n  // e.g. fs.readFile(pathname, [callback]),                                                                       // 78\n  // fs.open(pathname, flags, [mode], [callback])                                                                  // 79\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                                    // 80\n  // functions where the callback is the only argument of type Function.                                           // 81\n                                                                                                                   // 82\n  /**                                                                                                              // 83\n   * @memberOf Meteor                                                                                              // 84\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                               // 86\n   * @param {Function} func A function that takes a callback as its final parameter                                // 87\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked          // 88\n   */                                                                                                              // 89\n  wrapAsync: function (fn, context) {                                                                              // 90\n    return function (/* arguments */) {                                                                            // 91\n      var self = context || this;                                                                                  // 92\n      var newArgs = _.toArray(arguments);                                                                          // 93\n      var callback;                                                                                                // 94\n                                                                                                                   // 95\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                              // 96\n        var arg = newArgs[i];                                                                                      // 97\n        var type = typeof arg;                                                                                     // 98\n        if (type !== \"undefined\") {                                                                                // 99\n          if (type === \"function\") {                                                                               // 100\n            callback = arg;                                                                                        // 101\n          }                                                                                                        // 102\n          break;                                                                                                   // 103\n        }                                                                                                          // 104\n      }                                                                                                            // 105\n                                                                                                                   // 106\n      if (! callback) {                                                                                            // 107\n        if (Meteor.isClient) {                                                                                     // 108\n          callback = logErr;                                                                                       // 109\n        } else {                                                                                                   // 110\n          var fut = new Future();                                                                                  // 111\n          callback = fut.resolver();                                                                               // 112\n        }                                                                                                          // 113\n        ++i; // Insert the callback just after arg.                                                                // 114\n      }                                                                                                            // 115\n                                                                                                                   // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                               // 117\n      var result = fn.apply(self, newArgs);                                                                        // 118\n      return fut ? fut.wait() : result;                                                                            // 119\n    };                                                                                                             // 120\n  },                                                                                                               // 121\n                                                                                                                   // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                            // 123\n  // prototype. Used as:                                                                                           // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                           // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                         // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                                     // 127\n  _inherits: function (Child, Parent) {                                                                            // 128\n    // copy Parent static properties                                                                               // 129\n    for (var key in Parent) {                                                                                      // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                            // 131\n      // properties                                                                                                // 132\n      if (_.has(Parent, key))                                                                                      // 133\n        Child[key] = Parent[key];                                                                                  // 134\n    }                                                                                                              // 135\n                                                                                                                   // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                                     // 137\n    var Middle = function () {                                                                                     // 138\n      this.constructor = Child;                                                                                    // 139\n    };                                                                                                             // 140\n    Middle.prototype = Parent.prototype;                                                                           // 141\n    Child.prototype = new Middle();                                                                                // 142\n    Child.__super__ = Parent.prototype;                                                                            // 143\n    return Child;                                                                                                  // 144\n  }                                                                                                                // 145\n});                                                                                                                // 146\n                                                                                                                   // 147\nvar warnedAboutWrapAsync = false;                                                                                  // 148\n                                                                                                                   // 149\n/**                                                                                                                // 150\n * @deprecated in 0.9.3                                                                                            // 151\n */                                                                                                                // 152\nMeteor._wrapAsync = function(fn, context) {                                                                        // 153\n  if (! warnedAboutWrapAsync) {                                                                                    // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                                       // 155\n    warnedAboutWrapAsync = true;                                                                                   // 156\n  }                                                                                                                // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                                // 158\n};                                                                                                                 // 159\n                                                                                                                   // 160\nfunction logErr(err) {                                                                                             // 161\n  if (err) {                                                                                                       // 162\n    return Meteor._debug(                                                                                          // 163\n      \"Exception in callback of async function\",                                                                   // 164\n      err.stack ? err.stack : err                                                                                  // 165\n    );                                                                                                             // 166\n  }                                                                                                                // 167\n}                                                                                                                  // 168\n                                                                                                                   // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/setimmediate.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Chooses one of three setImmediate implementations:                                                              // 1\n//                                                                                                                 // 2\n// * Native setImmediate (IE 10, Node 0.9+)                                                                        // 3\n//                                                                                                                 // 4\n// * postMessage (many browsers)                                                                                   // 5\n//                                                                                                                 // 6\n// * setTimeout  (fallback)                                                                                        // 7\n//                                                                                                                 // 8\n// The postMessage implementation is based on                                                                      // 9\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                              // 10\n//                                                                                                                 // 11\n// Don't use `nextTick` for Node since it runs its callbacks before                                                // 12\n// I/O, which is stricter than we're looking for.                                                                  // 13\n//                                                                                                                 // 14\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                               // 15\n// Since we're not trying to be a polyfill, we have some                                                           // 16\n// simplifications:                                                                                                // 17\n//                                                                                                                 // 18\n// If one invocation of a setImmediate callback pauses itself by a                                                 // 19\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                                      // 20\n// implementation ensured that no setImmedate callback would run until                                             // 21\n// the first invocation completed.  While correct per the spec, what it                                            // 22\n// would mean for us in practice is that any reactive updates relying                                              // 23\n// on Meteor.defer would be hung in the main window until the modal                                                // 24\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                                  // 25\n// function is called in a later event loop.                                                                       // 26\n//                                                                                                                 // 27\n// We don't need to support using a string to be eval'ed for the                                                   // 28\n// callback, arguments to the function, or clearImmediate.                                                         // 29\n                                                                                                                   // 30\n\"use strict\";                                                                                                      // 31\n                                                                                                                   // 32\nvar global = this;                                                                                                 // 33\n                                                                                                                   // 34\n                                                                                                                   // 35\n// IE 10, Node >= 9.1                                                                                              // 36\n                                                                                                                   // 37\nfunction useSetImmediate() {                                                                                       // 38\n  if (! global.setImmediate)                                                                                       // 39\n    return null;                                                                                                   // 40\n  else {                                                                                                           // 41\n    var setImmediate = function (fn) {                                                                             // 42\n      global.setImmediate(fn);                                                                                     // 43\n    };                                                                                                             // 44\n    setImmediate.implementation = 'setImmediate';                                                                  // 45\n    return setImmediate;                                                                                           // 46\n  }                                                                                                                // 47\n}                                                                                                                  // 48\n                                                                                                                   // 49\n                                                                                                                   // 50\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                                  // 51\n                                                                                                                   // 52\nfunction usePostMessage() {                                                                                        // 53\n  // The test against `importScripts` prevents this implementation                                                 // 54\n  // from being installed inside a web worker, where                                                               // 55\n  // `global.postMessage` means something completely different and                                                 // 56\n  // can't be used for this purpose.                                                                               // 57\n                                                                                                                   // 58\n  if (!global.postMessage || global.importScripts) {                                                               // 59\n    return null;                                                                                                   // 60\n  }                                                                                                                // 61\n                                                                                                                   // 62\n  // Avoid synchronous post message implementations.                                                               // 63\n                                                                                                                   // 64\n  var postMessageIsAsynchronous = true;                                                                            // 65\n  var oldOnMessage = global.onmessage;                                                                             // 66\n  global.onmessage = function () {                                                                                 // 67\n      postMessageIsAsynchronous = false;                                                                           // 68\n  };                                                                                                               // 69\n  global.postMessage(\"\", \"*\");                                                                                     // 70\n  global.onmessage = oldOnMessage;                                                                                 // 71\n                                                                                                                   // 72\n  if (! postMessageIsAsynchronous)                                                                                 // 73\n    return null;                                                                                                   // 74\n                                                                                                                   // 75\n  var funcIndex = 0;                                                                                               // 76\n  var funcs = {};                                                                                                  // 77\n                                                                                                                   // 78\n  // Installs an event handler on `global` for the `message` event: see                                            // 79\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                                     // 80\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages                // 81\n                                                                                                                   // 82\n  // XXX use Random.id() here?                                                                                     // 83\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                              // 84\n                                                                                                                   // 85\n  function isStringAndStartsWith(string, putativeStart) {                                                          // 86\n    return (typeof string === \"string\" &&                                                                          // 87\n            string.substring(0, putativeStart.length) === putativeStart);                                          // 88\n  }                                                                                                                // 89\n                                                                                                                   // 90\n  function onGlobalMessage(event) {                                                                                // 91\n    // This will catch all incoming messages (even from other                                                      // 92\n    // windows!), so we need to try reasonably hard to avoid letting                                               // 93\n    // anyone else trick us into firing off. We test the origin is                                                 // 94\n    // still this window, and that a (randomly generated)                                                          // 95\n    // unpredictable identifying prefix is present.                                                                // 96\n    if (event.source === global &&                                                                                 // 97\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                                       // 98\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                                     // 99\n      try {                                                                                                        // 100\n        if (funcs[index])                                                                                          // 101\n          funcs[index]();                                                                                          // 102\n      }                                                                                                            // 103\n      finally {                                                                                                    // 104\n        delete funcs[index];                                                                                       // 105\n      }                                                                                                            // 106\n    }                                                                                                              // 107\n  }                                                                                                                // 108\n                                                                                                                   // 109\n  if (global.addEventListener) {                                                                                   // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                                    // 111\n  } else {                                                                                                         // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                              // 113\n  }                                                                                                                // 114\n                                                                                                                   // 115\n  var setImmediate = function (fn) {                                                                               // 116\n    // Make `global` post a message to itself with the handle and                                                  // 117\n    // identifying prefix, thus asynchronously invoking our                                                        // 118\n    // onGlobalMessage listener above.                                                                             // 119\n    ++funcIndex;                                                                                                   // 120\n    funcs[funcIndex] = fn;                                                                                         // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                           // 122\n  };                                                                                                               // 123\n  setImmediate.implementation = 'postMessage';                                                                     // 124\n  return setImmediate;                                                                                             // 125\n}                                                                                                                  // 126\n                                                                                                                   // 127\n                                                                                                                   // 128\nfunction useTimeout() {                                                                                            // 129\n  var setImmediate = function (fn) {                                                                               // 130\n    global.setTimeout(fn, 0);                                                                                      // 131\n  };                                                                                                               // 132\n  setImmediate.implementation = 'setTimeout';                                                                      // 133\n  return setImmediate;                                                                                             // 134\n}                                                                                                                  // 135\n                                                                                                                   // 136\n                                                                                                                   // 137\nMeteor._setImmediate =                                                                                             // 138\n  useSetImmediate() ||                                                                                             // 139\n  usePostMessage() ||                                                                                              // 140\n  useTimeout();                                                                                                    // 141\n                                                                                                                   // 142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/timers.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar withoutInvocation = function (f) {                                                                             // 1\n  if (Package.ddp) {                                                                                               // 2\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                                   // 3\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                         // 4\n      throw new Error(\"Can't set timers inside simulations\");                                                      // 5\n    return function () { _CurrentInvocation.withValue(null, f); };                                                 // 6\n  }                                                                                                                // 7\n  else                                                                                                             // 8\n    return f;                                                                                                      // 9\n};                                                                                                                 // 10\n                                                                                                                   // 11\nvar bindAndCatch = function (context, f) {                                                                         // 12\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                                    // 13\n};                                                                                                                 // 14\n                                                                                                                   // 15\n_.extend(Meteor, {                                                                                                 // 16\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                                  // 17\n  // inside a server method are not part of the method invocation and                                              // 18\n  // should clear out the CurrentInvocation environment variable.                                                  // 19\n                                                                                                                   // 20\n  /**                                                                                                              // 21\n   * @memberOf Meteor                                                                                              // 22\n   * @summary Call a function in the future after waiting for a specified delay.                                   // 23\n   * @locus Anywhere                                                                                               // 24\n   * @param {Function} func The function to run                                                                    // 25\n   * @param {Number} delay Number of milliseconds to wait before calling function                                  // 26\n   */                                                                                                              // 27\n  setTimeout: function (f, duration) {                                                                             // 28\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                           // 29\n  },                                                                                                               // 30\n                                                                                                                   // 31\n  /**                                                                                                              // 32\n   * @memberOf Meteor                                                                                              // 33\n   * @summary Call a function repeatedly, with a time delay between calls.                                         // 34\n   * @locus Anywhere                                                                                               // 35\n   * @param {Function} func The function to run                                                                    // 36\n   * @param {Number} delay Number of milliseconds to wait between each function call.                              // 37\n   */                                                                                                              // 38\n  setInterval: function (f, duration) {                                                                            // 39\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                         // 40\n  },                                                                                                               // 41\n                                                                                                                   // 42\n  /**                                                                                                              // 43\n   * @memberOf Meteor                                                                                              // 44\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                                  // 45\n   * @locus Anywhere                                                                                               // 46\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                                // 47\n   */                                                                                                              // 48\n  clearInterval: function(x) {                                                                                     // 49\n    return clearInterval(x);                                                                                       // 50\n  },                                                                                                               // 51\n                                                                                                                   // 52\n  /**                                                                                                              // 53\n   * @memberOf Meteor                                                                                              // 54\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                             // 55\n   * @locus Anywhere                                                                                               // 56\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                                 // 57\n   */                                                                                                              // 58\n  clearTimeout: function(x) {                                                                                      // 59\n    return clearTimeout(x);                                                                                        // 60\n  },                                                                                                               // 61\n                                                                                                                   // 62\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                                        // 63\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                                       // 64\n  //    callSomethingThatDefersSomeWork();                                                                         // 65\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                           // 66\n  defer: function (f) {                                                                                            // 67\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                                       // 68\n  }                                                                                                                // 69\n});                                                                                                                // 70\n                                                                                                                   // 71\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/errors.js                                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Makes an error subclass which properly contains a stack trace in most                                           // 1\n// environments. constructor can set fields on `this` (and should probably set                                     // 2\n// `message`, which is what gets displayed at the top of a stack trace).                                           // 3\n//                                                                                                                 // 4\nMeteor.makeErrorType = function (name, constructor) {                                                              // 5\n  var errorClass = function (/*arguments*/) {                                                                      // 6\n    // Ensure we get a proper stack trace in most Javascript environments                                          // 7\n    if (Error.captureStackTrace) {                                                                                 // 8\n      // V8 environments (Chrome and Node.js)                                                                      // 9\n      Error.captureStackTrace(this, errorClass);                                                                   // 10\n    } else {                                                                                                       // 11\n      // Borrow the .stack property of a native Error object.                                                      // 12\n      this.stack = new Error().stack;                                                                              // 13\n    }                                                                                                              // 14\n    // Safari magically works.                                                                                     // 15\n                                                                                                                   // 16\n    constructor.apply(this, arguments);                                                                            // 17\n                                                                                                                   // 18\n    this.errorType = name;                                                                                         // 19\n  };                                                                                                               // 20\n                                                                                                                   // 21\n  Meteor._inherits(errorClass, Error);                                                                             // 22\n                                                                                                                   // 23\n  return errorClass;                                                                                               // 24\n};                                                                                                                 // 25\n                                                                                                                   // 26\n// This should probably be in the livedata package, but we don't want                                              // 27\n// to require you to use the livedata package to get it. Eventually we                                             // 28\n// should probably rename it to DDP.Error and put it back in the                                                   // 29\n// 'livedata' package (which we should rename to 'ddp' also.)                                                      // 30\n//                                                                                                                 // 31\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                                    // 32\n// containing 'error' and optionally 'reason' and 'details'.                                                       // 33\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                                     // 34\n// EJSON.addType here because the type is determined by location in the                                            // 35\n// protocol, not text on the wire.)                                                                                // 36\n                                                                                                                   // 37\n/**                                                                                                                // 38\n * @summary This class represents a symbolic error thrown by a method.                                             // 39\n * @locus Anywhere                                                                                                 // 40\n * @class                                                                                                          // 41\n * @param {String} error A string code uniquely identifying this kind of error.                                    // 42\n * This string should be used by callers of the method to determine the                                            // 43\n * appropriate action to take, instead of attempting to parse the reason                                           // 44\n * or details fields. For example:                                                                                 // 45\n *                                                                                                                 // 46\n * ```                                                                                                             // 47\n * // on the server, pick a code unique to this error                                                              // 48\n * // the reason field should be a useful debug message                                                            // 49\n * throw new Meteor.Error(\"logged-out\",                                                                            // 50\n *   \"The user must be logged in to post a comment.\");                                                             // 51\n *                                                                                                                 // 52\n * // on the client                                                                                                // 53\n * Meteor.call(\"methodName\", function (error) {                                                                    // 54\n *   // identify the error                                                                                         // 55\n *   if (error && error.error === \"logged-out\") {                                                                  // 56\n *     // show a nice error message                                                                                // 57\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                            // 58\n *   }                                                                                                             // 59\n * });                                                                                                             // 60\n * ```                                                                                                             // 61\n *                                                                                                                 // 62\n * For legacy reasons, some built-in Meteor functions such as `check` throw                                        // 63\n * errors with a number in this field.                                                                             // 64\n *                                                                                                                 // 65\n * @param {String} [reason] Optional.  A short human-readable summary of the                                       // 66\n * error, like 'Not Found'.                                                                                        // 67\n * @param {String} [details] Optional.  Additional information about the error,                                    // 68\n * like a textual stack trace.                                                                                     // 69\n */                                                                                                                // 70\nMeteor.Error = Meteor.makeErrorType(                                                                               // 71\n  \"Meteor.Error\",                                                                                                  // 72\n  function (error, reason, details) {                                                                              // 73\n    var self = this;                                                                                               // 74\n                                                                                                                   // 75\n    // String code uniquely identifying this kind of error.                                                        // 76\n    self.error = error;                                                                                            // 77\n                                                                                                                   // 78\n    // Optional: A short human-readable summary of the error. Not                                                  // 79\n    // intended to be shown to end users, just developers. (\"Not Found\",                                           // 80\n    // \"Internal Server Error\")                                                                                    // 81\n    self.reason = reason;                                                                                          // 82\n                                                                                                                   // 83\n    // Optional: Additional information about the error, say for                                                   // 84\n    // debugging. It might be a (textual) stack trace if the server is                                             // 85\n    // willing to provide one. The corresponding thing in HTTP would be                                            // 86\n    // the body of a 404 or 500 response. (The difference is that we                                               // 87\n    // never expect this to be shown to end users, only developers, so                                             // 88\n    // it doesn't need to be pretty.)                                                                              // 89\n    self.details = details;                                                                                        // 90\n                                                                                                                   // 91\n    // This is what gets displayed at the top of a stack trace. Current                                            // 92\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                           // 93\n    if (self.reason)                                                                                               // 94\n      self.message = self.reason + ' [' + self.error + ']';                                                        // 95\n    else                                                                                                           // 96\n      self.message = '[' + self.error + ']';                                                                       // 97\n  });                                                                                                              // 98\n                                                                                                                   // 99\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                                   // 100\n// properly EJSON-clone it. This is especially important because if a                                              // 101\n// Meteor.Error is thrown through a Future, the error, reason, and details                                         // 102\n// properties become non-enumerable so a standard Object clone won't preserve                                      // 103\n// them and they will be lost from DDP.                                                                            // 104\nMeteor.Error.prototype.clone = function () {                                                                       // 105\n  var self = this;                                                                                                 // 106\n  return new Meteor.Error(self.error, self.reason, self.details);                                                  // 107\n};                                                                                                                 // 108\n                                                                                                                   // 109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/fiber_stubs_client.js                                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// This file is a partial analogue to fiber_helpers.js, which allows the client                                    // 1\n// to use a queue too, and also to call noYieldsAllowed.                                                           // 2\n                                                                                                                   // 3\n// The client has no ability to yield, so noYieldsAllowed is a noop.                                               // 4\n//                                                                                                                 // 5\nMeteor._noYieldsAllowed = function (f) {                                                                           // 6\n  return f();                                                                                                      // 7\n};                                                                                                                 // 8\n                                                                                                                   // 9\n// An even simpler queue of tasks than the fiber-enabled one.  This one just                                       // 10\n// runs all the tasks when you call runTask or flush, synchronously.                                               // 11\n//                                                                                                                 // 12\nMeteor._SynchronousQueue = function () {                                                                           // 13\n  var self = this;                                                                                                 // 14\n  self._tasks = [];                                                                                                // 15\n  self._running = false;                                                                                           // 16\n  self._runTimeout = null;                                                                                         // 17\n};                                                                                                                 // 18\n                                                                                                                   // 19\n_.extend(Meteor._SynchronousQueue.prototype, {                                                                     // 20\n  runTask: function (task) {                                                                                       // 21\n    var self = this;                                                                                               // 22\n    if (!self.safeToRunTask())                                                                                     // 23\n      throw new Error(\"Could not synchronously run a task from a running task\");                                   // 24\n    self._tasks.push(task);                                                                                        // 25\n    var tasks = self._tasks;                                                                                       // 26\n    self._tasks = [];                                                                                              // 27\n    self._running = true;                                                                                          // 28\n                                                                                                                   // 29\n    if (self._runTimeout) {                                                                                        // 30\n      // Since we're going to drain the queue, we can forget about the timeout                                     // 31\n      // which tries to run it.  (But if one of our tasks queues something else,                                   // 32\n      // the timeout will be correctly re-created.)                                                                // 33\n      clearTimeout(self._runTimeout);                                                                              // 34\n      self._runTimeout = null;                                                                                     // 35\n    }                                                                                                              // 36\n                                                                                                                   // 37\n    try {                                                                                                          // 38\n      while (!_.isEmpty(tasks)) {                                                                                  // 39\n        var t = tasks.shift();                                                                                     // 40\n        try {                                                                                                      // 41\n          t();                                                                                                     // 42\n        } catch (e) {                                                                                              // 43\n          if (_.isEmpty(tasks)) {                                                                                  // 44\n            // this was the last task, that is, the one we're calling runTask                                      // 45\n            // for.                                                                                                // 46\n            throw e;                                                                                               // 47\n          } else {                                                                                                 // 48\n            Meteor._debug(\"Exception in queued task: \" + (e.stack || e));                                          // 49\n          }                                                                                                        // 50\n        }                                                                                                          // 51\n      }                                                                                                            // 52\n    } finally {                                                                                                    // 53\n      self._running = false;                                                                                       // 54\n    }                                                                                                              // 55\n  },                                                                                                               // 56\n                                                                                                                   // 57\n  queueTask: function (task) {                                                                                     // 58\n    var self = this;                                                                                               // 59\n    self._tasks.push(task);                                                                                        // 60\n    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                                   // 61\n    // in stubs for now.                                                                                           // 62\n    if (!self._runTimeout) {                                                                                       // 63\n      self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                                  // 64\n    }                                                                                                              // 65\n  },                                                                                                               // 66\n                                                                                                                   // 67\n  flush: function () {                                                                                             // 68\n    var self = this;                                                                                               // 69\n    self.runTask(function () {});                                                                                  // 70\n  },                                                                                                               // 71\n                                                                                                                   // 72\n  drain: function () {                                                                                             // 73\n    var self = this;                                                                                               // 74\n    if (!self.safeToRunTask())                                                                                     // 75\n      return;                                                                                                      // 76\n    while (!_.isEmpty(self._tasks)) {                                                                              // 77\n      self.flush();                                                                                                // 78\n    }                                                                                                              // 79\n  },                                                                                                               // 80\n                                                                                                                   // 81\n  safeToRunTask: function () {                                                                                     // 82\n    var self = this;                                                                                               // 83\n    return !self._running;                                                                                         // 84\n  }                                                                                                                // 85\n});                                                                                                                // 86\n                                                                                                                   // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/startup_client.js                                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar callbackQueue = [];                                                                                            // 1\nvar isLoadingCompleted = false;                                                                                    // 2\nvar isReady = false;                                                                                               // 3\n                                                                                                                   // 4\n// Keeps track of how many events to wait for in addition to loading completing,                                   // 5\n// before we're considered ready.                                                                                  // 6\nvar readyHoldsCount = 0;                                                                                           // 7\n                                                                                                                   // 8\nvar holdReady =  function () {                                                                                     // 9\n  readyHoldsCount++;                                                                                               // 10\n}                                                                                                                  // 11\n                                                                                                                   // 12\nvar releaseReadyHold = function () {                                                                               // 13\n  readyHoldsCount--;                                                                                               // 14\n  maybeReady();                                                                                                    // 15\n}                                                                                                                  // 16\n                                                                                                                   // 17\nvar maybeReady = function () {                                                                                     // 18\n  if (isReady || !isLoadingCompleted || readyHoldsCount > 0)                                                       // 19\n    return;                                                                                                        // 20\n                                                                                                                   // 21\n  isReady = true;                                                                                                  // 22\n                                                                                                                   // 23\n  // Run startup callbacks                                                                                         // 24\n  while (callbackQueue.length)                                                                                     // 25\n    (callbackQueue.shift())();                                                                                     // 26\n                                                                                                                   // 27\n  if (Meteor.isCordova) {                                                                                          // 28\n    // Notify the WebAppLocalServer plugin that startup was completed successfully,                                // 29\n    // so we can roll back faulty versions if this doesn't happen                                                  // 30\n    WebAppLocalServer.startupDidComplete();                                                                        // 31\n  }                                                                                                                // 32\n};                                                                                                                 // 33\n                                                                                                                   // 34\nvar loadingCompleted = function () {                                                                               // 35\n  if (!isLoadingCompleted) {                                                                                       // 36\n    isLoadingCompleted = true;                                                                                     // 37\n    maybeReady();                                                                                                  // 38\n  }                                                                                                                // 39\n}                                                                                                                  // 40\n                                                                                                                   // 41\nif (Meteor.isCordova) {                                                                                            // 42\n  holdReady();                                                                                                     // 43\n  document.addEventListener('deviceready', releaseReadyHold, false);                                               // 44\n}                                                                                                                  // 45\n                                                                                                                   // 46\nif (document.readyState === 'complete' || document.readyState === 'loaded') {                                      // 47\n  // Loading has completed,                                                                                        // 48\n  // but allow other scripts the opportunity to hold ready                                                         // 49\n  window.setTimeout(loadingCompleted);                                                                             // 50\n} else { // Attach event listeners to wait for loading to complete                                                 // 51\n  if (document.addEventListener) {                                                                                 // 52\n    document.addEventListener('DOMContentLoaded', loadingCompleted, false);                                        // 53\n    window.addEventListener('load', loadingCompleted, false);                                                      // 54\n  } else { // Use IE event model for < IE9                                                                         // 55\n    document.attachEvent('onreadystatechange', function () {                                                       // 56\n      if (document.readyState === \"complete\") {                                                                    // 57\n        loadingCompleted();                                                                                        // 58\n      }                                                                                                            // 59\n    });                                                                                                            // 60\n    window.attachEvent('load', loadingCompleted);                                                                  // 61\n  }                                                                                                                // 62\n}                                                                                                                  // 63\n                                                                                                                   // 64\n/**                                                                                                                // 65\n * @summary Run code when a client or a server starts.                                                             // 66\n * @locus Anywhere                                                                                                 // 67\n * @param {Function} func A function to run on startup.                                                            // 68\n */                                                                                                                // 69\nMeteor.startup = function (callback) {                                                                             // 70\n  // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/                                               // 71\n  var doScroll = !document.addEventListener &&                                                                     // 72\n    document.documentElement.doScroll;                                                                             // 73\n                                                                                                                   // 74\n  if (!doScroll || window !== top) {                                                                               // 75\n    if (isReady)                                                                                                   // 76\n      callback();                                                                                                  // 77\n    else                                                                                                           // 78\n      callbackQueue.push(callback);                                                                                // 79\n  } else {                                                                                                         // 80\n    try { doScroll('left'); }                                                                                      // 81\n    catch (error) {                                                                                                // 82\n      setTimeout(function () { Meteor.startup(callback); }, 50);                                                   // 83\n      return;                                                                                                      // 84\n    };                                                                                                             // 85\n    callback();                                                                                                    // 86\n  }                                                                                                                // 87\n};                                                                                                                 // 88\n                                                                                                                   // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/debug.js                                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar suppress = 0;                                                                                                  // 1\n                                                                                                                   // 2\n// replacement for console.log. This is a temporary API. We should                                                 // 3\n// provide a real logging API soon (possibly just a polyfill for                                                   // 4\n// console?)                                                                                                       // 5\n//                                                                                                                 // 6\n// NOTE: this is used on the server to print the warning about                                                     // 7\n// having autopublish enabled when you probably meant to turn it                                                   // 8\n// off. it's not really the proper use of something called                                                         // 9\n// _debug. the intent is for this message to go to the terminal and                                                // 10\n// be very visible. if you change _debug to go someplace else, etc,                                                // 11\n// please fix the autopublish code to do something reasonable.                                                     // 12\n//                                                                                                                 // 13\nMeteor._debug = function (/* arguments */) {                                                                       // 14\n  if (suppress) {                                                                                                  // 15\n    suppress--;                                                                                                    // 16\n    return;                                                                                                        // 17\n  }                                                                                                                // 18\n  if (typeof console !== 'undefined' &&                                                                            // 19\n      typeof console.log !== 'undefined') {                                                                        // 20\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                                  // 21\n      // IE10 PP4 requires at least one argument                                                                   // 22\n      console.log('');                                                                                             // 23\n    } else {                                                                                                       // 24\n      // IE doesn't have console.log.apply, it's not a real Object.                                                // 25\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                           // 26\n      // http://patik.com/blog/complete-cross-browser-console-log/                                                 // 27\n      if (typeof console.log.apply === \"function\") {                                                               // 28\n        // Most browsers                                                                                           // 29\n                                                                                                                   // 30\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                              // 31\n        // console.log, so try to call it with one argument if possible.                                           // 32\n        // Approach taken here: If all arguments are strings, join them on space.                                  // 33\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                                     // 34\n        var allArgumentsOfTypeString = true;                                                                       // 35\n        for (var i = 0; i < arguments.length; i++)                                                                 // 36\n          if (typeof arguments[i] !== \"string\")                                                                    // 37\n            allArgumentsOfTypeString = false;                                                                      // 38\n                                                                                                                   // 39\n        if (allArgumentsOfTypeString)                                                                              // 40\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                                 // 41\n        else                                                                                                       // 42\n          console.log.apply(console, arguments);                                                                   // 43\n                                                                                                                   // 44\n      } else if (typeof Function.prototype.bind === \"function\") {                                                  // 45\n        // IE9                                                                                                     // 46\n        var log = Function.prototype.bind.call(console.log, console);                                              // 47\n        log.apply(console, arguments);                                                                             // 48\n      } else {                                                                                                     // 49\n        // IE8                                                                                                     // 50\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));                 // 51\n      }                                                                                                            // 52\n    }                                                                                                              // 53\n  }                                                                                                                // 54\n};                                                                                                                 // 55\n                                                                                                                   // 56\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                                  // 57\n// stop tests from spamming the console.                                                                           // 58\n//                                                                                                                 // 59\nMeteor._suppress_log = function (count) {                                                                          // 60\n  suppress += count;                                                                                               // 61\n};                                                                                                                 // 62\n                                                                                                                   // 63\nMeteor._suppressed_log_expected = function () {                                                                    // 64\n  return suppress !== 0;                                                                                           // 65\n};                                                                                                                 // 66\n                                                                                                                   // 67\n                                                                                                                   // 68\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/string_utils.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                                        // 1\n// Code taken from                                                                                                 // 2\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                               // 3\nMeteor._escapeRegExp = function (string) {                                                                         // 4\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                                  // 5\n};                                                                                                                 // 6\n                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/test_environment.js                                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar TEST_METADATA_STR;                                                                                             // 1\nif (Meteor.isClient) {                                                                                             // 2\n  TEST_METADATA_STR = meteorEnv.TEST_METADATA;                                                                     // 3\n} else {                                                                                                           // 4\n  TEST_METADATA_STR = process.env.TEST_METADATA;                                                                   // 5\n}                                                                                                                  // 6\n                                                                                                                   // 7\nvar TEST_METADATA = JSON.parse(TEST_METADATA_STR || \"{}\");                                                         // 8\nvar testDriverPackageName = TEST_METADATA.driverPackage;                                                           // 9\n                                                                                                                   // 10\n// Note that if we are in test-packages mode neither of these will be set,                                         // 11\n// but we will have a test driver package                                                                          // 12\nMeteor.isTest = !!TEST_METADATA.isTest;                                                                            // 13\nMeteor.isAppTest = !!TEST_METADATA.isAppTest;                                                                      // 14\nMeteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;                             // 15\n                                                                                                                   // 16\nif (typeof testDriverPackageName === \"string\") {                                                                   // 17\n  Meteor.startup(function() {                                                                                      // 18\n    var testDriverPackage = Package[testDriverPackageName];                                                        // 19\n    if (! testDriverPackage) {                                                                                     // 20\n      throw new Error(\"Can't find test driver package: \" + testDriverPackageName);                                 // 21\n    }                                                                                                              // 22\n                                                                                                                   // 23\n    // On the client, the test driver *must* define `runTests`                                                     // 24\n    if (Meteor.isClient) {                                                                                         // 25\n      if (typeof testDriverPackage.runTests !== \"function\") {                                                      // 26\n        throw new Error(\"Test driver package \" + testDriverPackageName                                             // 27\n          + \" missing `runTests` export\");                                                                         // 28\n      }                                                                                                            // 29\n      testDriverPackage.runTests();                                                                                // 30\n    } else {                                                                                                       // 31\n      // The server can optionally define `start`                                                                  // 32\n      if (typeof testDriverPackage.start === \"function\") {                                                         // 33\n        testDriverPackage.start();                                                                                 // 34\n      }                                                                                                            // 35\n    }                                                                                                              // 36\n  });                                                                                                              // 37\n}                                                                                                                  // 38\n                                                                                                                   // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/dynamics_browser.js                                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Simple implementation of dynamic scoping, for use in browsers                                                   // 1\n                                                                                                                   // 2\nvar nextSlot = 0;                                                                                                  // 3\nvar currentValues = [];                                                                                            // 4\n                                                                                                                   // 5\nMeteor.EnvironmentVariable = function () {                                                                         // 6\n  this.slot = nextSlot++;                                                                                          // 7\n};                                                                                                                 // 8\n                                                                                                                   // 9\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                                   // 10\n  get: function () {                                                                                               // 11\n    return currentValues[this.slot];                                                                               // 12\n  },                                                                                                               // 13\n                                                                                                                   // 14\n  getOrNullIfOutsideFiber: function () {                                                                           // 15\n    return this.get();                                                                                             // 16\n  },                                                                                                               // 17\n                                                                                                                   // 18\n  withValue: function (value, func) {                                                                              // 19\n    var saved = currentValues[this.slot];                                                                          // 20\n    try {                                                                                                          // 21\n      currentValues[this.slot] = value;                                                                            // 22\n      var ret = func();                                                                                            // 23\n    } finally {                                                                                                    // 24\n      currentValues[this.slot] = saved;                                                                            // 25\n    }                                                                                                              // 26\n    return ret;                                                                                                    // 27\n  }                                                                                                                // 28\n});                                                                                                                // 29\n                                                                                                                   // 30\nMeteor.bindEnvironment = function (func, onException, _this) {                                                     // 31\n  // needed in order to be able to create closures inside func and                                                 // 32\n  // have the closed variables not change back to their original                                                   // 33\n  // values                                                                                                        // 34\n  var boundValues = _.clone(currentValues);                                                                        // 35\n                                                                                                                   // 36\n  if (!onException || typeof(onException) === 'string') {                                                          // 37\n    var description = onException || \"callback of async function\";                                                 // 38\n    onException = function (error) {                                                                               // 39\n      Meteor._debug(                                                                                               // 40\n        \"Exception in \" + description + \":\",                                                                       // 41\n        error && error.stack || error                                                                              // 42\n      );                                                                                                           // 43\n    };                                                                                                             // 44\n  }                                                                                                                // 45\n                                                                                                                   // 46\n  return function (/* arguments */) {                                                                              // 47\n    var savedValues = currentValues;                                                                               // 48\n    try {                                                                                                          // 49\n      currentValues = boundValues;                                                                                 // 50\n      var ret = func.apply(_this, _.toArray(arguments));                                                           // 51\n    } catch (e) {                                                                                                  // 52\n      // note: callback-hook currently relies on the fact that if onException                                      // 53\n      // throws in the browser, the wrapped call throws.                                                           // 54\n      onException(e);                                                                                              // 55\n    } finally {                                                                                                    // 56\n      currentValues = savedValues;                                                                                 // 57\n    }                                                                                                              // 58\n    return ret;                                                                                                    // 59\n  };                                                                                                               // 60\n};                                                                                                                 // 61\n                                                                                                                   // 62\nMeteor._nodeCodeMustBeInFiber = function () {                                                                      // 63\n  // no-op on browser                                                                                              // 64\n};                                                                                                                 // 65\n                                                                                                                   // 66\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/meteor/url_common.js                                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/**                                                                                                                // 1\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                                 // 3\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".                        // 4\n * @param {Object} [options]                                                                                       // 5\n * @param {Boolean} options.secure Create an HTTPS URL.                                                            // 6\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                                // 9\nMeteor.absoluteUrl = function (path, options) {                                                                    // 10\n  // path is optional                                                                                              // 11\n  if (!options && typeof path === 'object') {                                                                      // 12\n    options = path;                                                                                                // 13\n    path = undefined;                                                                                              // 14\n  }                                                                                                                // 15\n  // merge options with defaults                                                                                   // 16\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                                        // 17\n                                                                                                                   // 18\n  var url = options.rootUrl;                                                                                       // 19\n  if (!url)                                                                                                        // 20\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");                        // 21\n                                                                                                                   // 22\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                                     // 23\n    url = 'http://' + url; // we will later fix to https if options.secure is set                                  // 24\n                                                                                                                   // 25\n  if (!/\\/$/.test(url)) // url ends with '/'                                                                       // 26\n    url += '/';                                                                                                    // 27\n                                                                                                                   // 28\n  if (path)                                                                                                        // 29\n    url += path;                                                                                                   // 30\n                                                                                                                   // 31\n  // turn http to https if secure option is set, and we're not talking                                             // 32\n  // to localhost.                                                                                                 // 33\n  if (options.secure &&                                                                                            // 34\n      /^http:/.test(url) && // url starts with 'http:'                                                             // 35\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                           // 36\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                                     // 37\n    url = url.replace(/^http:/, 'https:');                                                                         // 38\n                                                                                                                   // 39\n  if (options.replaceLocalhost)                                                                                    // 40\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                                       // 41\n                                                                                                                   // 42\n  return url;                                                                                                      // 43\n};                                                                                                                 // 44\n                                                                                                                   // 45\n// allow later packages to override default options                                                                // 46\nMeteor.absoluteUrl.defaultOptions = { };                                                                           // 47\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                               // 48\n    __meteor_runtime_config__.ROOT_URL)                                                                            // 49\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                                  // 50\n                                                                                                                   // 51\n                                                                                                                   // 52\nMeteor._relativeToSiteRootUrl = function (link) {                                                                  // 53\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                             // 54\n      link.substr(0, 1) === \"/\")                                                                                   // 55\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                          // 56\n  return link;                                                                                                     // 57\n};                                                                                                                 // 58\n                                                                                                                   // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.meteor = {}, {\n  Meteor: Meteor,\n  global: global,\n  meteorEnv: meteorEnv\n});\n\n})();\n","servePath":"/packages/meteor.js"}]