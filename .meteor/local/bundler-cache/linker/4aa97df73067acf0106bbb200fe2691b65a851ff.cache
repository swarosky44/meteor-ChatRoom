[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Hook;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/callback-hook/hook.js                                                                     //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n// XXX This pattern is under development. Do not add more callsites                                   // 1\n// using this package for now. See:                                                                   // 2\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f                                       // 3\n//                                                                                                    // 4\n// Encapsulates the pattern of registering callbacks on a hook.                                       // 5\n//                                                                                                    // 6\n// The `each` method of the hook calls its iterator function argument                                 // 7\n// with each registered callback.  This allows the hook to                                            // 8\n// conditionally decide not to call the callback (if, for example, the                                // 9\n// observed object has been closed or terminated).                                                    // 10\n//                                                                                                    // 11\n// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be                     // 12\n// called with the Meteor environment of the calling code that                                        // 13\n// registered the callback. Override by passing { bindEnvironment: false }                            // 14\n// to the constructor.                                                                                // 15\n//                                                                                                    // 16\n// Registering a callback returns an object with a single `stop`                                      // 17\n// method which unregisters the callback.                                                             // 18\n//                                                                                                    // 19\n// The code is careful to allow a callback to be safely unregistered                                  // 20\n// while the callbacks are being iterated over.                                                       // 21\n//                                                                                                    // 22\n// If the hook is configured with the `exceptionHandler` option, the                                  // 23\n// handler will be called if a called callback throws an exception.                                   // 24\n// By default (if the exception handler doesn't itself throw an                                       // 25\n// exception, or if the iterator function doesn't return a falsy value                                // 26\n// to terminate the calling of callbacks), the remaining callbacks                                    // 27\n// will still be called.                                                                              // 28\n//                                                                                                    // 29\n// Alternatively, the `debugPrintExceptions` option can be specified                                  // 30\n// as string describing the callback.  On an exception the string and                                 // 31\n// the exception will be printed to the console log with                                              // 32\n// `Meteor._debug`, and the exception otherwise ignored.                                              // 33\n//                                                                                                    // 34\n// If an exception handler isn't specified, exceptions thrown in the                                  // 35\n// callback will propagate up to the iterator function, and will                                      // 36\n// terminate calling the remaining callbacks if not caught.                                           // 37\n                                                                                                      // 38\nHook = function (options) {                                                                           // 39\n  var self = this;                                                                                    // 40\n  options = options || {};                                                                            // 41\n  self.nextCallbackId = 0;                                                                            // 42\n  self.callbacks = {};                                                                                // 43\n  // Whether to wrap callbacks with Meteor.bindEnvironment                                            // 44\n  self.bindEnvironment = true;                                                                        // 45\n  if (options.bindEnvironment === false)                                                              // 46\n    self.bindEnvironment = false;                                                                     // 47\n                                                                                                      // 48\n  if (options.exceptionHandler)                                                                       // 49\n    self.exceptionHandler = options.exceptionHandler;                                                 // 50\n  else if (options.debugPrintExceptions) {                                                            // 51\n    if (! _.isString(options.debugPrintExceptions))                                                   // 52\n      throw new Error(\"Hook option debugPrintExceptions should be a string\");                         // 53\n    self.exceptionHandler = options.debugPrintExceptions;                                             // 54\n  }                                                                                                   // 55\n};                                                                                                    // 56\n                                                                                                      // 57\n_.extend(Hook.prototype, {                                                                            // 58\n  register: function (callback) {                                                                     // 59\n    var self = this;                                                                                  // 60\n    var exceptionHandler =  self.exceptionHandler || function (exception) {                           // 61\n      // Note: this relies on the undocumented fact that if bindEnvironment's                         // 62\n      // onException throws, and you are invoking the callback either in the                          // 63\n      // browser or from within a Fiber in Node, the exception is propagated.                         // 64\n      throw exception;                                                                                // 65\n    };                                                                                                // 66\n                                                                                                      // 67\n    if (self.bindEnvironment) {                                                                       // 68\n      callback = Meteor.bindEnvironment(callback, exceptionHandler);                                  // 69\n    } else {                                                                                          // 70\n      callback = dontBindEnvironment(callback, exceptionHandler);                                     // 71\n    }                                                                                                 // 72\n                                                                                                      // 73\n    var id = self.nextCallbackId++;                                                                   // 74\n    self.callbacks[id] = callback;                                                                    // 75\n                                                                                                      // 76\n    return {                                                                                          // 77\n      stop: function () {                                                                             // 78\n        delete self.callbacks[id];                                                                    // 79\n      }                                                                                               // 80\n    };                                                                                                // 81\n  },                                                                                                  // 82\n                                                                                                      // 83\n  // For each registered callback, call the passed iterator function                                  // 84\n  // with the callback.                                                                               // 85\n  //                                                                                                  // 86\n  // The iterator function can choose whether or not to call the                                      // 87\n  // callback.  (For example, it might not call the callback if the                                   // 88\n  // observed object has been closed or terminated).                                                  // 89\n  //                                                                                                  // 90\n  // The iteration is stopped if the iterator function returns a falsy                                // 91\n  // value or throws an exception.                                                                    // 92\n  //                                                                                                  // 93\n  each: function (iterator) {                                                                         // 94\n    var self = this;                                                                                  // 95\n                                                                                                      // 96\n    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't                        // 97\n    // run them to completion (and exceptions thrown from onException are not                         // 98\n    // propagated), so we need to be in a Fiber.                                                      // 99\n    Meteor._nodeCodeMustBeInFiber();                                                                  // 100\n                                                                                                      // 101\n    var ids = _.keys(self.callbacks);                                                                 // 102\n    for (var i = 0;  i < ids.length;  ++i) {                                                          // 103\n      var id = ids[i];                                                                                // 104\n      // check to see if the callback was removed during iteration                                    // 105\n      if (_.has(self.callbacks, id)) {                                                                // 106\n        var callback = self.callbacks[id];                                                            // 107\n                                                                                                      // 108\n        if (! iterator(callback))                                                                     // 109\n          break;                                                                                      // 110\n      }                                                                                               // 111\n    }                                                                                                 // 112\n  }                                                                                                   // 113\n});                                                                                                   // 114\n                                                                                                      // 115\n// Copied from Meteor.bindEnvironment and removed all the env stuff.                                  // 116\nvar dontBindEnvironment = function (func, onException, _this) {                                       // 117\n  if (!onException || typeof(onException) === 'string') {                                             // 118\n    var description = onException || \"callback of async function\";                                    // 119\n    onException = function (error) {                                                                  // 120\n      Meteor._debug(                                                                                  // 121\n        \"Exception in \" + description + \":\",                                                          // 122\n        error && error.stack || error                                                                 // 123\n      );                                                                                              // 124\n    };                                                                                                // 125\n  }                                                                                                   // 126\n                                                                                                      // 127\n  return function (/* arguments */) {                                                                 // 128\n    var args = _.toArray(arguments);                                                                  // 129\n                                                                                                      // 130\n    var runAndHandleExceptions = function () {                                                        // 131\n      try {                                                                                           // 132\n        var ret = func.apply(_this, args);                                                            // 133\n      } catch (e) {                                                                                   // 134\n        onException(e);                                                                               // 135\n      }                                                                                               // 136\n      return ret;                                                                                     // 137\n    };                                                                                                // 138\n                                                                                                      // 139\n    return runAndHandleExceptions();                                                                  // 140\n  };                                                                                                  // 141\n};                                                                                                    // 142\n                                                                                                      // 143\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['callback-hook'] = {}, {\n  Hook: Hook\n});\n\n})();\n","servePath":"/packages/callback-hook.js"}]