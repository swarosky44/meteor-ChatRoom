[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar exports;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"tmeasday:check-npm-versions\":{\"check-npm-versions.js\":[\"semver\",\"meteor/underscore\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/tmeasday_check-npm-versions/check-npm-versions.js                                        //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nexports.__esModule = true;                                                                           //\nexports.checkNpmVersions = undefined;                                                                //\n                                                                                                     //\nvar _semver = require('semver');                                                                     // 1\n                                                                                                     //\nvar _semver2 = _interopRequireDefault(_semver);                                                      //\n                                                                                                     //\nvar _underscore = require('meteor/underscore');                                                      // 2\n                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }    //\n                                                                                                     //\n// Returns:                                                                                          //\n//   - true      if a version of the package in the range is installed                               //\n//   - false     if no version is installed                                                          //\n//   - version#  if incompatible version is installed                                                //\nvar compatibleVersionIsInstalled = function compatibleVersionIsInstalled(name, range) {              // 8\n  try {                                                                                              // 9\n    var installedVersion = require(name + '/package.json').version;                                  // 10\n    if (_semver2['default'].satisfies(installedVersion, range)) {                                    // 11\n      return true;                                                                                   // 12\n    } else {                                                                                         //\n      return installedVersion;                                                                       // 14\n    }                                                                                                //\n  } catch (e) {                                                                                      //\n    console.log(e);                                                                                  // 17\n    // XXX I guess the only error here is that the module doesn't exist?                             //\n    return false;                                                                                    // 16\n  }                                                                                                  //\n};                                                                                                   //\n                                                                                                     //\nvar checkNpmVersions = exports.checkNpmVersions = function checkNpmVersions(packages, packageName) {\n  var failures = {};                                                                                 // 24\n  _underscore._.forEach(packages, function (range, name) {                                           // 25\n    var failure = compatibleVersionIsInstalled(name, range);                                         // 26\n    if (failure !== true) {                                                                          // 27\n      failures[name] = failure;                                                                      // 28\n    }                                                                                                //\n  });                                                                                                //\n                                                                                                     //\n  if (_underscore._.keys(failures).length === 0) {                                                   // 32\n    return true;                                                                                     // 33\n  }                                                                                                  //\n                                                                                                     //\n  var errors = [];                                                                                   // 36\n  _underscore._.forEach(failures, function (installed, name) {                                       // 37\n    var requirement = name + '@' + packages[name];                                                   // 38\n                                                                                                     //\n    if (installed) {                                                                                 // 40\n      errors.push(' - ' + name + '@' + installed + ' installed, ' + requirement + ' needed');        // 41\n    } else {                                                                                         //\n      errors.push(' - ' + name + '@' + packages[name] + ' not installed.');                          // 43\n    }                                                                                                //\n  });                                                                                                //\n                                                                                                     //\n  var qualifier = packageName ? '(for ' + packageName + ') ' : '';                                   // 47\n  console.warn('WARNING: npm peer requirements ' + qualifier + 'not installed:\\n' + errors.join('\\n') + '\\n\\nRead more about installing npm peer dependencies:\\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\\n');\n};                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"semver\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// ../npm/node_modules/semver/package.json                                                           //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nexports.name = \"semver\";                                                                             // 1\nexports.version = \"5.1.0\";                                                                           // 2\nexports.main = \"semver.js\";                                                                          // 3\n                                                                                                     // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"semver.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// node_modules/meteor/tmeasday:check-npm-versions/node_modules/semver/semver.js                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nexports = module.exports = SemVer;                                                                   // 1\n                                                                                                     // 2\n// The debug function is excluded entirely from the minified version.                                // 3\n/* nomin */ var debug;                                                                               // 4\n/* nomin */ if (typeof process === 'object' &&                                                       // 5\n    /* nomin */ process.env &&                                                                       // 6\n    /* nomin */ process.env.NODE_DEBUG &&                                                            // 7\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))                                          // 8\n  /* nomin */ debug = function() {                                                                   // 9\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);                                 // 10\n    /* nomin */ args.unshift('SEMVER');                                                              // 11\n    /* nomin */ console.log.apply(console, args);                                                    // 12\n    /* nomin */ };                                                                                   // 13\n/* nomin */ else                                                                                     // 14\n  /* nomin */ debug = function() {};                                                                 // 15\n                                                                                                     // 16\n// Note: this is the semver.org version of the spec that it implements                               // 17\n// Not necessarily the package version of this code.                                                 // 18\nexports.SEMVER_SPEC_VERSION = '2.0.0';                                                               // 19\n                                                                                                     // 20\nvar MAX_LENGTH = 256;                                                                                // 21\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;                                  // 22\n                                                                                                     // 23\n// The actual regexps go on exports.re                                                               // 24\nvar re = exports.re = [];                                                                            // 25\nvar src = exports.src = [];                                                                          // 26\nvar R = 0;                                                                                           // 27\n                                                                                                     // 28\n// The following Regular Expressions can be used for tokenizing,                                     // 29\n// validating, and parsing SemVer version strings.                                                   // 30\n                                                                                                     // 31\n// ## Numeric Identifier                                                                             // 32\n// A single `0`, or a non-zero digit followed by zero or more digits.                                // 33\n                                                                                                     // 34\nvar NUMERICIDENTIFIER = R++;                                                                         // 35\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';                                                              // 36\nvar NUMERICIDENTIFIERLOOSE = R++;                                                                    // 37\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';                                                              // 38\n                                                                                                     // 39\n                                                                                                     // 40\n// ## Non-numeric Identifier                                                                         // 41\n// Zero or more digits, followed by a letter or hyphen, and then zero or                             // 42\n// more letters, digits, or hyphens.                                                                 // 43\n                                                                                                     // 44\nvar NONNUMERICIDENTIFIER = R++;                                                                      // 45\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';                                            // 46\n                                                                                                     // 47\n                                                                                                     // 48\n// ## Main Version                                                                                   // 49\n// Three dot-separated numeric identifiers.                                                          // 50\n                                                                                                     // 51\nvar MAINVERSION = R++;                                                                               // 52\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 53\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +                                           // 54\n                   '(' + src[NUMERICIDENTIFIER] + ')';                                               // 55\n                                                                                                     // 56\nvar MAINVERSIONLOOSE = R++;                                                                          // 57\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 58\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +                                 // 59\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';                                     // 60\n                                                                                                     // 61\n// ## Pre-release Version Identifier                                                                 // 62\n// A numeric identifier, or a non-numeric identifier.                                                // 63\n                                                                                                     // 64\nvar PRERELEASEIDENTIFIER = R++;                                                                      // 65\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +                                         // 66\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';                                   // 67\n                                                                                                     // 68\nvar PRERELEASEIDENTIFIERLOOSE = R++;                                                                 // 69\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +                               // 70\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';                              // 71\n                                                                                                     // 72\n                                                                                                     // 73\n// ## Pre-release Version                                                                            // 74\n// Hyphen, followed by one or more dot-separated pre-release version                                 // 75\n// identifiers.                                                                                      // 76\n                                                                                                     // 77\nvar PRERELEASE = R++;                                                                                // 78\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +                                              // 79\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';                                     // 80\n                                                                                                     // 81\nvar PRERELEASELOOSE = R++;                                                                           // 82\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +                                   // 83\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';                           // 84\n                                                                                                     // 85\n// ## Build Metadata Identifier                                                                      // 86\n// Any combination of digits, letters, or hyphens.                                                   // 87\n                                                                                                     // 88\nvar BUILDIDENTIFIER = R++;                                                                           // 89\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';                                                              // 90\n                                                                                                     // 91\n// ## Build Metadata                                                                                 // 92\n// Plus sign, followed by one or more period-separated build metadata                                // 93\n// identifiers.                                                                                      // 94\n                                                                                                     // 95\nvar BUILD = R++;                                                                                     // 96\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +                                                      // 97\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';                                               // 98\n                                                                                                     // 99\n                                                                                                     // 100\n// ## Full Version String                                                                            // 101\n// A main version, followed optionally by a pre-release version and                                  // 102\n// build metadata.                                                                                   // 103\n                                                                                                     // 104\n// Note that the only major, minor, patch, and pre-release sections of                               // 105\n// the version string are capturing groups.  The build metadata is not a                             // 106\n// capturing group, because it should not ever be used in version                                    // 107\n// comparison.                                                                                       // 108\n                                                                                                     // 109\nvar FULL = R++;                                                                                      // 110\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +                                                            // 111\n                src[PRERELEASE] + '?' +                                                              // 112\n                src[BUILD] + '?';                                                                    // 113\n                                                                                                     // 114\nsrc[FULL] = '^' + FULLPLAIN + '$';                                                                   // 115\n                                                                                                     // 116\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.                               // 117\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty                                 // 118\n// common in the npm registry.                                                                       // 119\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +                                                // 120\n                 src[PRERELEASELOOSE] + '?' +                                                        // 121\n                 src[BUILD] + '?';                                                                   // 122\n                                                                                                     // 123\nvar LOOSE = R++;                                                                                     // 124\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';                                                                 // 125\n                                                                                                     // 126\nvar GTLT = R++;                                                                                      // 127\nsrc[GTLT] = '((?:<|>)?=?)';                                                                          // 128\n                                                                                                     // 129\n// Something like \"2.*\" or \"1.2.x\".                                                                  // 130\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"                                // 131\n// Only the first item is strictly required.                                                         // 132\nvar XRANGEIDENTIFIERLOOSE = R++;                                                                     // 133\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';                               // 134\nvar XRANGEIDENTIFIER = R++;                                                                          // 135\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';                                         // 136\n                                                                                                     // 137\nvar XRANGEPLAIN = R++;                                                                               // 138\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +                                       // 139\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 140\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +                                         // 141\n                   '(?:' + src[PRERELEASE] + ')?' +                                                  // 142\n                   src[BUILD] + '?' +                                                                // 143\n                   ')?)?';                                                                           // 144\n                                                                                                     // 145\nvar XRANGEPLAINLOOSE = R++;                                                                          // 146\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                             // 147\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 148\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +                               // 149\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +                                        // 150\n                        src[BUILD] + '?' +                                                           // 151\n                        ')?)?';                                                                      // 152\n                                                                                                     // 153\nvar XRANGE = R++;                                                                                    // 154\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';                                     // 155\nvar XRANGELOOSE = R++;                                                                               // 156\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';                           // 157\n                                                                                                     // 158\n// Tilde ranges.                                                                                     // 159\n// Meaning is \"reasonably at or greater than\"                                                        // 160\nvar LONETILDE = R++;                                                                                 // 161\nsrc[LONETILDE] = '(?:~>?)';                                                                          // 162\n                                                                                                     // 163\nvar TILDETRIM = R++;                                                                                 // 164\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';                                                 // 165\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');                                                     // 166\nvar tildeTrimReplace = '$1~';                                                                        // 167\n                                                                                                     // 168\nvar TILDE = R++;                                                                                     // 169\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';                                          // 170\nvar TILDELOOSE = R++;                                                                                // 171\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';                                // 172\n                                                                                                     // 173\n// Caret ranges.                                                                                     // 174\n// Meaning is \"at least and backwards compatible with\"                                               // 175\nvar LONECARET = R++;                                                                                 // 176\nsrc[LONECARET] = '(?:\\\\^)';                                                                          // 177\n                                                                                                     // 178\nvar CARETTRIM = R++;                                                                                 // 179\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';                                                 // 180\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');                                                     // 181\nvar caretTrimReplace = '$1^';                                                                        // 182\n                                                                                                     // 183\nvar CARET = R++;                                                                                     // 184\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';                                          // 185\nvar CARETLOOSE = R++;                                                                                // 186\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';                                // 187\n                                                                                                     // 188\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"                                     // 189\nvar COMPARATORLOOSE = R++;                                                                           // 190\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';                             // 191\nvar COMPARATOR = R++;                                                                                // 192\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';                                   // 193\n                                                                                                     // 194\n                                                                                                     // 195\n// An expression to strip any whitespace between the gtlt and the thing                              // 196\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`                                                       // 197\nvar COMPARATORTRIM = R++;                                                                            // 198\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +                                                         // 199\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';                           // 200\n                                                                                                     // 201\n// this one has to use the /g flag                                                                   // 202\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');                                           // 203\nvar comparatorTrimReplace = '$1$2$3';                                                                // 204\n                                                                                                     // 205\n                                                                                                     // 206\n// Something like `1.2.3 - 1.2.4`                                                                    // 207\n// Note that these all use the loose form, because they'll be                                        // 208\n// checked against either the strict or loose comparator form                                        // 209\n// later.                                                                                            // 210\nvar HYPHENRANGE = R++;                                                                               // 211\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +                                               // 212\n                   '\\\\s+-\\\\s+' +                                                                     // 213\n                   '(' + src[XRANGEPLAIN] + ')' +                                                    // 214\n                   '\\\\s*$';                                                                          // 215\n                                                                                                     // 216\nvar HYPHENRANGELOOSE = R++;                                                                          // 217\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +                                     // 218\n                        '\\\\s+-\\\\s+' +                                                                // 219\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +                                          // 220\n                        '\\\\s*$';                                                                     // 221\n                                                                                                     // 222\n// Star ranges basically just allow anything at all.                                                 // 223\nvar STAR = R++;                                                                                      // 224\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';                                                                       // 225\n                                                                                                     // 226\n// Compile to actual regexp objects.                                                                 // 227\n// All are flag-free, unless they were created above with a flag.                                    // 228\nfor (var i = 0; i < R; i++) {                                                                        // 229\n  debug(i, src[i]);                                                                                  // 230\n  if (!re[i])                                                                                        // 231\n    re[i] = new RegExp(src[i]);                                                                      // 232\n}                                                                                                    // 233\n                                                                                                     // 234\nexports.parse = parse;                                                                               // 235\nfunction parse(version, loose) {                                                                     // 236\n  if (version instanceof SemVer)                                                                     // 237\n    return version;                                                                                  // 238\n                                                                                                     // 239\n  if (typeof version !== 'string')                                                                   // 240\n    return null;                                                                                     // 241\n                                                                                                     // 242\n  if (version.length > MAX_LENGTH)                                                                   // 243\n    return null;                                                                                     // 244\n                                                                                                     // 245\n  var r = loose ? re[LOOSE] : re[FULL];                                                              // 246\n  if (!r.test(version))                                                                              // 247\n    return null;                                                                                     // 248\n                                                                                                     // 249\n  try {                                                                                              // 250\n    return new SemVer(version, loose);                                                               // 251\n  } catch (er) {                                                                                     // 252\n    return null;                                                                                     // 253\n  }                                                                                                  // 254\n}                                                                                                    // 255\n                                                                                                     // 256\nexports.valid = valid;                                                                               // 257\nfunction valid(version, loose) {                                                                     // 258\n  var v = parse(version, loose);                                                                     // 259\n  return v ? v.version : null;                                                                       // 260\n}                                                                                                    // 261\n                                                                                                     // 262\n                                                                                                     // 263\nexports.clean = clean;                                                                               // 264\nfunction clean(version, loose) {                                                                     // 265\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);                                        // 266\n  return s ? s.version : null;                                                                       // 267\n}                                                                                                    // 268\n                                                                                                     // 269\nexports.SemVer = SemVer;                                                                             // 270\n                                                                                                     // 271\nfunction SemVer(version, loose) {                                                                    // 272\n  if (version instanceof SemVer) {                                                                   // 273\n    if (version.loose === loose)                                                                     // 274\n      return version;                                                                                // 275\n    else                                                                                             // 276\n      version = version.version;                                                                     // 277\n  } else if (typeof version !== 'string') {                                                          // 278\n    throw new TypeError('Invalid Version: ' + version);                                              // 279\n  }                                                                                                  // 280\n                                                                                                     // 281\n  if (version.length > MAX_LENGTH)                                                                   // 282\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')                      // 283\n                                                                                                     // 284\n  if (!(this instanceof SemVer))                                                                     // 285\n    return new SemVer(version, loose);                                                               // 286\n                                                                                                     // 287\n  debug('SemVer', version, loose);                                                                   // 288\n  this.loose = loose;                                                                                // 289\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);                                        // 290\n                                                                                                     // 291\n  if (!m)                                                                                            // 292\n    throw new TypeError('Invalid Version: ' + version);                                              // 293\n                                                                                                     // 294\n  this.raw = version;                                                                                // 295\n                                                                                                     // 296\n  // these are actually numbers                                                                      // 297\n  this.major = +m[1];                                                                                // 298\n  this.minor = +m[2];                                                                                // 299\n  this.patch = +m[3];                                                                                // 300\n                                                                                                     // 301\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0)                                               // 302\n    throw new TypeError('Invalid major version')                                                     // 303\n                                                                                                     // 304\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)                                               // 305\n    throw new TypeError('Invalid minor version')                                                     // 306\n                                                                                                     // 307\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)                                               // 308\n    throw new TypeError('Invalid patch version')                                                     // 309\n                                                                                                     // 310\n  // numberify any prerelease numeric ids                                                            // 311\n  if (!m[4])                                                                                         // 312\n    this.prerelease = [];                                                                            // 313\n  else                                                                                               // 314\n    this.prerelease = m[4].split('.').map(function(id) {                                             // 315\n      if (/^[0-9]+$/.test(id)) {                                                                     // 316\n        var num = +id                                                                                // 317\n        if (num >= 0 && num < MAX_SAFE_INTEGER)                                                      // 318\n          return num                                                                                 // 319\n      }                                                                                              // 320\n      return id;                                                                                     // 321\n    });                                                                                              // 322\n                                                                                                     // 323\n  this.build = m[5] ? m[5].split('.') : [];                                                          // 324\n  this.format();                                                                                     // 325\n}                                                                                                    // 326\n                                                                                                     // 327\nSemVer.prototype.format = function() {                                                               // 328\n  this.version = this.major + '.' + this.minor + '.' + this.patch;                                   // 329\n  if (this.prerelease.length)                                                                        // 330\n    this.version += '-' + this.prerelease.join('.');                                                 // 331\n  return this.version;                                                                               // 332\n};                                                                                                   // 333\n                                                                                                     // 334\nSemVer.prototype.toString = function() {                                                             // 335\n  return this.version;                                                                               // 336\n};                                                                                                   // 337\n                                                                                                     // 338\nSemVer.prototype.compare = function(other) {                                                         // 339\n  debug('SemVer.compare', this.version, this.loose, other);                                          // 340\n  if (!(other instanceof SemVer))                                                                    // 341\n    other = new SemVer(other, this.loose);                                                           // 342\n                                                                                                     // 343\n  return this.compareMain(other) || this.comparePre(other);                                          // 344\n};                                                                                                   // 345\n                                                                                                     // 346\nSemVer.prototype.compareMain = function(other) {                                                     // 347\n  if (!(other instanceof SemVer))                                                                    // 348\n    other = new SemVer(other, this.loose);                                                           // 349\n                                                                                                     // 350\n  return compareIdentifiers(this.major, other.major) ||                                              // 351\n         compareIdentifiers(this.minor, other.minor) ||                                              // 352\n         compareIdentifiers(this.patch, other.patch);                                                // 353\n};                                                                                                   // 354\n                                                                                                     // 355\nSemVer.prototype.comparePre = function(other) {                                                      // 356\n  if (!(other instanceof SemVer))                                                                    // 357\n    other = new SemVer(other, this.loose);                                                           // 358\n                                                                                                     // 359\n  // NOT having a prerelease is > having one                                                         // 360\n  if (this.prerelease.length && !other.prerelease.length)                                            // 361\n    return -1;                                                                                       // 362\n  else if (!this.prerelease.length && other.prerelease.length)                                       // 363\n    return 1;                                                                                        // 364\n  else if (!this.prerelease.length && !other.prerelease.length)                                      // 365\n    return 0;                                                                                        // 366\n                                                                                                     // 367\n  var i = 0;                                                                                         // 368\n  do {                                                                                               // 369\n    var a = this.prerelease[i];                                                                      // 370\n    var b = other.prerelease[i];                                                                     // 371\n    debug('prerelease compare', i, a, b);                                                            // 372\n    if (a === undefined && b === undefined)                                                          // 373\n      return 0;                                                                                      // 374\n    else if (b === undefined)                                                                        // 375\n      return 1;                                                                                      // 376\n    else if (a === undefined)                                                                        // 377\n      return -1;                                                                                     // 378\n    else if (a === b)                                                                                // 379\n      continue;                                                                                      // 380\n    else                                                                                             // 381\n      return compareIdentifiers(a, b);                                                               // 382\n  } while (++i);                                                                                     // 383\n};                                                                                                   // 384\n                                                                                                     // 385\n// preminor will bump the version up to the next minor release, and immediately                      // 386\n// down to pre-release. premajor and prepatch work the same way.                                     // 387\nSemVer.prototype.inc = function(release, identifier) {                                               // 388\n  switch (release) {                                                                                 // 389\n    case 'premajor':                                                                                 // 390\n      this.prerelease.length = 0;                                                                    // 391\n      this.patch = 0;                                                                                // 392\n      this.minor = 0;                                                                                // 393\n      this.major++;                                                                                  // 394\n      this.inc('pre', identifier);                                                                   // 395\n      break;                                                                                         // 396\n    case 'preminor':                                                                                 // 397\n      this.prerelease.length = 0;                                                                    // 398\n      this.patch = 0;                                                                                // 399\n      this.minor++;                                                                                  // 400\n      this.inc('pre', identifier);                                                                   // 401\n      break;                                                                                         // 402\n    case 'prepatch':                                                                                 // 403\n      // If this is already a prerelease, it will bump to the next version                           // 404\n      // drop any prereleases that might already exist, since they are not                           // 405\n      // relevant at this point.                                                                     // 406\n      this.prerelease.length = 0;                                                                    // 407\n      this.inc('patch', identifier);                                                                 // 408\n      this.inc('pre', identifier);                                                                   // 409\n      break;                                                                                         // 410\n    // If the input is a non-prerelease version, this acts the same as                               // 411\n    // prepatch.                                                                                     // 412\n    case 'prerelease':                                                                               // 413\n      if (this.prerelease.length === 0)                                                              // 414\n        this.inc('patch', identifier);                                                               // 415\n      this.inc('pre', identifier);                                                                   // 416\n      break;                                                                                         // 417\n                                                                                                     // 418\n    case 'major':                                                                                    // 419\n      // If this is a pre-major version, bump up to the same major version.                          // 420\n      // Otherwise increment major.                                                                  // 421\n      // 1.0.0-5 bumps to 1.0.0                                                                      // 422\n      // 1.1.0 bumps to 2.0.0                                                                        // 423\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)                      // 424\n        this.major++;                                                                                // 425\n      this.minor = 0;                                                                                // 426\n      this.patch = 0;                                                                                // 427\n      this.prerelease = [];                                                                          // 428\n      break;                                                                                         // 429\n    case 'minor':                                                                                    // 430\n      // If this is a pre-minor version, bump up to the same minor version.                          // 431\n      // Otherwise increment minor.                                                                  // 432\n      // 1.2.0-5 bumps to 1.2.0                                                                      // 433\n      // 1.2.1 bumps to 1.3.0                                                                        // 434\n      if (this.patch !== 0 || this.prerelease.length === 0)                                          // 435\n        this.minor++;                                                                                // 436\n      this.patch = 0;                                                                                // 437\n      this.prerelease = [];                                                                          // 438\n      break;                                                                                         // 439\n    case 'patch':                                                                                    // 440\n      // If this is not a pre-release version, it will increment the patch.                          // 441\n      // If it is a pre-release it will bump up to the same patch version.                           // 442\n      // 1.2.0-5 patches to 1.2.0                                                                    // 443\n      // 1.2.0 patches to 1.2.1                                                                      // 444\n      if (this.prerelease.length === 0)                                                              // 445\n        this.patch++;                                                                                // 446\n      this.prerelease = [];                                                                          // 447\n      break;                                                                                         // 448\n    // This probably shouldn't be used publicly.                                                     // 449\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.                                // 450\n    case 'pre':                                                                                      // 451\n      if (this.prerelease.length === 0)                                                              // 452\n        this.prerelease = [0];                                                                       // 453\n      else {                                                                                         // 454\n        var i = this.prerelease.length;                                                              // 455\n        while (--i >= 0) {                                                                           // 456\n          if (typeof this.prerelease[i] === 'number') {                                              // 457\n            this.prerelease[i]++;                                                                    // 458\n            i = -2;                                                                                  // 459\n          }                                                                                          // 460\n        }                                                                                            // 461\n        if (i === -1) // didn't increment anything                                                   // 462\n          this.prerelease.push(0);                                                                   // 463\n      }                                                                                              // 464\n      if (identifier) {                                                                              // 465\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,                                                       // 466\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0                                     // 467\n        if (this.prerelease[0] === identifier) {                                                     // 468\n          if (isNaN(this.prerelease[1]))                                                             // 469\n            this.prerelease = [identifier, 0];                                                       // 470\n        } else                                                                                       // 471\n          this.prerelease = [identifier, 0];                                                         // 472\n      }                                                                                              // 473\n      break;                                                                                         // 474\n                                                                                                     // 475\n    default:                                                                                         // 476\n      throw new Error('invalid increment argument: ' + release);                                     // 477\n  }                                                                                                  // 478\n  this.format();                                                                                     // 479\n  this.raw = this.version;                                                                           // 480\n  return this;                                                                                       // 481\n};                                                                                                   // 482\n                                                                                                     // 483\nexports.inc = inc;                                                                                   // 484\nfunction inc(version, release, loose, identifier) {                                                  // 485\n  if (typeof(loose) === 'string') {                                                                  // 486\n    identifier = loose;                                                                              // 487\n    loose = undefined;                                                                               // 488\n  }                                                                                                  // 489\n                                                                                                     // 490\n  try {                                                                                              // 491\n    return new SemVer(version, loose).inc(release, identifier).version;                              // 492\n  } catch (er) {                                                                                     // 493\n    return null;                                                                                     // 494\n  }                                                                                                  // 495\n}                                                                                                    // 496\n                                                                                                     // 497\nexports.diff = diff;                                                                                 // 498\nfunction diff(version1, version2) {                                                                  // 499\n  if (eq(version1, version2)) {                                                                      // 500\n    return null;                                                                                     // 501\n  } else {                                                                                           // 502\n    var v1 = parse(version1);                                                                        // 503\n    var v2 = parse(version2);                                                                        // 504\n    if (v1.prerelease.length || v2.prerelease.length) {                                              // 505\n      for (var key in v1) {                                                                          // 506\n        if (key === 'major' || key === 'minor' || key === 'patch') {                                 // 507\n          if (v1[key] !== v2[key]) {                                                                 // 508\n            return 'pre'+key;                                                                        // 509\n          }                                                                                          // 510\n        }                                                                                            // 511\n      }                                                                                              // 512\n      return 'prerelease';                                                                           // 513\n    }                                                                                                // 514\n    for (var key in v1) {                                                                            // 515\n      if (key === 'major' || key === 'minor' || key === 'patch') {                                   // 516\n        if (v1[key] !== v2[key]) {                                                                   // 517\n          return key;                                                                                // 518\n        }                                                                                            // 519\n      }                                                                                              // 520\n    }                                                                                                // 521\n  }                                                                                                  // 522\n}                                                                                                    // 523\n                                                                                                     // 524\nexports.compareIdentifiers = compareIdentifiers;                                                     // 525\n                                                                                                     // 526\nvar numeric = /^[0-9]+$/;                                                                            // 527\nfunction compareIdentifiers(a, b) {                                                                  // 528\n  var anum = numeric.test(a);                                                                        // 529\n  var bnum = numeric.test(b);                                                                        // 530\n                                                                                                     // 531\n  if (anum && bnum) {                                                                                // 532\n    a = +a;                                                                                          // 533\n    b = +b;                                                                                          // 534\n  }                                                                                                  // 535\n                                                                                                     // 536\n  return (anum && !bnum) ? -1 :                                                                      // 537\n         (bnum && !anum) ? 1 :                                                                       // 538\n         a < b ? -1 :                                                                                // 539\n         a > b ? 1 :                                                                                 // 540\n         0;                                                                                          // 541\n}                                                                                                    // 542\n                                                                                                     // 543\nexports.rcompareIdentifiers = rcompareIdentifiers;                                                   // 544\nfunction rcompareIdentifiers(a, b) {                                                                 // 545\n  return compareIdentifiers(b, a);                                                                   // 546\n}                                                                                                    // 547\n                                                                                                     // 548\nexports.major = major;                                                                               // 549\nfunction major(a, loose) {                                                                           // 550\n  return new SemVer(a, loose).major;                                                                 // 551\n}                                                                                                    // 552\n                                                                                                     // 553\nexports.minor = minor;                                                                               // 554\nfunction minor(a, loose) {                                                                           // 555\n  return new SemVer(a, loose).minor;                                                                 // 556\n}                                                                                                    // 557\n                                                                                                     // 558\nexports.patch = patch;                                                                               // 559\nfunction patch(a, loose) {                                                                           // 560\n  return new SemVer(a, loose).patch;                                                                 // 561\n}                                                                                                    // 562\n                                                                                                     // 563\nexports.compare = compare;                                                                           // 564\nfunction compare(a, b, loose) {                                                                      // 565\n  return new SemVer(a, loose).compare(b);                                                            // 566\n}                                                                                                    // 567\n                                                                                                     // 568\nexports.compareLoose = compareLoose;                                                                 // 569\nfunction compareLoose(a, b) {                                                                        // 570\n  return compare(a, b, true);                                                                        // 571\n}                                                                                                    // 572\n                                                                                                     // 573\nexports.rcompare = rcompare;                                                                         // 574\nfunction rcompare(a, b, loose) {                                                                     // 575\n  return compare(b, a, loose);                                                                       // 576\n}                                                                                                    // 577\n                                                                                                     // 578\nexports.sort = sort;                                                                                 // 579\nfunction sort(list, loose) {                                                                         // 580\n  return list.sort(function(a, b) {                                                                  // 581\n    return exports.compare(a, b, loose);                                                             // 582\n  });                                                                                                // 583\n}                                                                                                    // 584\n                                                                                                     // 585\nexports.rsort = rsort;                                                                               // 586\nfunction rsort(list, loose) {                                                                        // 587\n  return list.sort(function(a, b) {                                                                  // 588\n    return exports.rcompare(a, b, loose);                                                            // 589\n  });                                                                                                // 590\n}                                                                                                    // 591\n                                                                                                     // 592\nexports.gt = gt;                                                                                     // 593\nfunction gt(a, b, loose) {                                                                           // 594\n  return compare(a, b, loose) > 0;                                                                   // 595\n}                                                                                                    // 596\n                                                                                                     // 597\nexports.lt = lt;                                                                                     // 598\nfunction lt(a, b, loose) {                                                                           // 599\n  return compare(a, b, loose) < 0;                                                                   // 600\n}                                                                                                    // 601\n                                                                                                     // 602\nexports.eq = eq;                                                                                     // 603\nfunction eq(a, b, loose) {                                                                           // 604\n  return compare(a, b, loose) === 0;                                                                 // 605\n}                                                                                                    // 606\n                                                                                                     // 607\nexports.neq = neq;                                                                                   // 608\nfunction neq(a, b, loose) {                                                                          // 609\n  return compare(a, b, loose) !== 0;                                                                 // 610\n}                                                                                                    // 611\n                                                                                                     // 612\nexports.gte = gte;                                                                                   // 613\nfunction gte(a, b, loose) {                                                                          // 614\n  return compare(a, b, loose) >= 0;                                                                  // 615\n}                                                                                                    // 616\n                                                                                                     // 617\nexports.lte = lte;                                                                                   // 618\nfunction lte(a, b, loose) {                                                                          // 619\n  return compare(a, b, loose) <= 0;                                                                  // 620\n}                                                                                                    // 621\n                                                                                                     // 622\nexports.cmp = cmp;                                                                                   // 623\nfunction cmp(a, op, b, loose) {                                                                      // 624\n  var ret;                                                                                           // 625\n  switch (op) {                                                                                      // 626\n    case '===':                                                                                      // 627\n      if (typeof a === 'object') a = a.version;                                                      // 628\n      if (typeof b === 'object') b = b.version;                                                      // 629\n      ret = a === b;                                                                                 // 630\n      break;                                                                                         // 631\n    case '!==':                                                                                      // 632\n      if (typeof a === 'object') a = a.version;                                                      // 633\n      if (typeof b === 'object') b = b.version;                                                      // 634\n      ret = a !== b;                                                                                 // 635\n      break;                                                                                         // 636\n    case '': case '=': case '==': ret = eq(a, b, loose); break;                                      // 637\n    case '!=': ret = neq(a, b, loose); break;                                                        // 638\n    case '>': ret = gt(a, b, loose); break;                                                          // 639\n    case '>=': ret = gte(a, b, loose); break;                                                        // 640\n    case '<': ret = lt(a, b, loose); break;                                                          // 641\n    case '<=': ret = lte(a, b, loose); break;                                                        // 642\n    default: throw new TypeError('Invalid operator: ' + op);                                         // 643\n  }                                                                                                  // 644\n  return ret;                                                                                        // 645\n}                                                                                                    // 646\n                                                                                                     // 647\nexports.Comparator = Comparator;                                                                     // 648\nfunction Comparator(comp, loose) {                                                                   // 649\n  if (comp instanceof Comparator) {                                                                  // 650\n    if (comp.loose === loose)                                                                        // 651\n      return comp;                                                                                   // 652\n    else                                                                                             // 653\n      comp = comp.value;                                                                             // 654\n  }                                                                                                  // 655\n                                                                                                     // 656\n  if (!(this instanceof Comparator))                                                                 // 657\n    return new Comparator(comp, loose);                                                              // 658\n                                                                                                     // 659\n  debug('comparator', comp, loose);                                                                  // 660\n  this.loose = loose;                                                                                // 661\n  this.parse(comp);                                                                                  // 662\n                                                                                                     // 663\n  if (this.semver === ANY)                                                                           // 664\n    this.value = '';                                                                                 // 665\n  else                                                                                               // 666\n    this.value = this.operator + this.semver.version;                                                // 667\n                                                                                                     // 668\n  debug('comp', this);                                                                               // 669\n}                                                                                                    // 670\n                                                                                                     // 671\nvar ANY = {};                                                                                        // 672\nComparator.prototype.parse = function(comp) {                                                        // 673\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 674\n  var m = comp.match(r);                                                                             // 675\n                                                                                                     // 676\n  if (!m)                                                                                            // 677\n    throw new TypeError('Invalid comparator: ' + comp);                                              // 678\n                                                                                                     // 679\n  this.operator = m[1];                                                                              // 680\n  if (this.operator === '=')                                                                         // 681\n    this.operator = '';                                                                              // 682\n                                                                                                     // 683\n  // if it literally is just '>' or '' then allow anything.                                          // 684\n  if (!m[2])                                                                                         // 685\n    this.semver = ANY;                                                                               // 686\n  else                                                                                               // 687\n    this.semver = new SemVer(m[2], this.loose);                                                      // 688\n};                                                                                                   // 689\n                                                                                                     // 690\nComparator.prototype.toString = function() {                                                         // 691\n  return this.value;                                                                                 // 692\n};                                                                                                   // 693\n                                                                                                     // 694\nComparator.prototype.test = function(version) {                                                      // 695\n  debug('Comparator.test', version, this.loose);                                                     // 696\n                                                                                                     // 697\n  if (this.semver === ANY)                                                                           // 698\n    return true;                                                                                     // 699\n                                                                                                     // 700\n  if (typeof version === 'string')                                                                   // 701\n    version = new SemVer(version, this.loose);                                                       // 702\n                                                                                                     // 703\n  return cmp(version, this.operator, this.semver, this.loose);                                       // 704\n};                                                                                                   // 705\n                                                                                                     // 706\n                                                                                                     // 707\nexports.Range = Range;                                                                               // 708\nfunction Range(range, loose) {                                                                       // 709\n  if ((range instanceof Range) && range.loose === loose)                                             // 710\n    return range;                                                                                    // 711\n                                                                                                     // 712\n  if (!(this instanceof Range))                                                                      // 713\n    return new Range(range, loose);                                                                  // 714\n                                                                                                     // 715\n  this.loose = loose;                                                                                // 716\n                                                                                                     // 717\n  // First, split based on boolean or ||                                                             // 718\n  this.raw = range;                                                                                  // 719\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {                                         // 720\n    return this.parseRange(range.trim());                                                            // 721\n  }, this).filter(function(c) {                                                                      // 722\n    // throw out any that are not relevant for whatever reason                                       // 723\n    return c.length;                                                                                 // 724\n  });                                                                                                // 725\n                                                                                                     // 726\n  if (!this.set.length) {                                                                            // 727\n    throw new TypeError('Invalid SemVer Range: ' + range);                                           // 728\n  }                                                                                                  // 729\n                                                                                                     // 730\n  this.format();                                                                                     // 731\n}                                                                                                    // 732\n                                                                                                     // 733\nRange.prototype.format = function() {                                                                // 734\n  this.range = this.set.map(function(comps) {                                                        // 735\n    return comps.join(' ').trim();                                                                   // 736\n  }).join('||').trim();                                                                              // 737\n  return this.range;                                                                                 // 738\n};                                                                                                   // 739\n                                                                                                     // 740\nRange.prototype.toString = function() {                                                              // 741\n  return this.range;                                                                                 // 742\n};                                                                                                   // 743\n                                                                                                     // 744\nRange.prototype.parseRange = function(range) {                                                       // 745\n  var loose = this.loose;                                                                            // 746\n  range = range.trim();                                                                              // 747\n  debug('range', range, loose);                                                                      // 748\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`                                                            // 749\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];                                           // 750\n  range = range.replace(hr, hyphenReplace);                                                          // 751\n  debug('hyphen replace', range);                                                                    // 752\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`                                                            // 753\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);                                  // 754\n  debug('comparator trim', range, re[COMPARATORTRIM]);                                               // 755\n                                                                                                     // 756\n  // `~ 1.2.3` => `~1.2.3`                                                                           // 757\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);                                            // 758\n                                                                                                     // 759\n  // `^ 1.2.3` => `^1.2.3`                                                                           // 760\n  range = range.replace(re[CARETTRIM], caretTrimReplace);                                            // 761\n                                                                                                     // 762\n  // normalize spaces                                                                                // 763\n  range = range.split(/\\s+/).join(' ');                                                              // 764\n                                                                                                     // 765\n  // At this point, the range is completely trimmed and                                              // 766\n  // ready to be split into comparators.                                                             // 767\n                                                                                                     // 768\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];                                         // 769\n  var set = range.split(' ').map(function(comp) {                                                    // 770\n    return parseComparator(comp, loose);                                                             // 771\n  }).join(' ').split(/\\s+/);                                                                         // 772\n  if (this.loose) {                                                                                  // 773\n    // in loose mode, throw out any that are not valid comparators                                   // 774\n    set = set.filter(function(comp) {                                                                // 775\n      return !!comp.match(compRe);                                                                   // 776\n    });                                                                                              // 777\n  }                                                                                                  // 778\n  set = set.map(function(comp) {                                                                     // 779\n    return new Comparator(comp, loose);                                                              // 780\n  });                                                                                                // 781\n                                                                                                     // 782\n  return set;                                                                                        // 783\n};                                                                                                   // 784\n                                                                                                     // 785\n// Mostly just for testing and legacy API reasons                                                    // 786\nexports.toComparators = toComparators;                                                               // 787\nfunction toComparators(range, loose) {                                                               // 788\n  return new Range(range, loose).set.map(function(comp) {                                            // 789\n    return comp.map(function(c) {                                                                    // 790\n      return c.value;                                                                                // 791\n    }).join(' ').trim().split(' ');                                                                  // 792\n  });                                                                                                // 793\n}                                                                                                    // 794\n                                                                                                     // 795\n// comprised of xranges, tildes, stars, and gtlt's at this point.                                    // 796\n// already replaced the hyphen ranges                                                                // 797\n// turn into a set of JUST comparators.                                                              // 798\nfunction parseComparator(comp, loose) {                                                              // 799\n  debug('comp', comp);                                                                               // 800\n  comp = replaceCarets(comp, loose);                                                                 // 801\n  debug('caret', comp);                                                                              // 802\n  comp = replaceTildes(comp, loose);                                                                 // 803\n  debug('tildes', comp);                                                                             // 804\n  comp = replaceXRanges(comp, loose);                                                                // 805\n  debug('xrange', comp);                                                                             // 806\n  comp = replaceStars(comp, loose);                                                                  // 807\n  debug('stars', comp);                                                                              // 808\n  return comp;                                                                                       // 809\n}                                                                                                    // 810\n                                                                                                     // 811\nfunction isX(id) {                                                                                   // 812\n  return !id || id.toLowerCase() === 'x' || id === '*';                                              // 813\n}                                                                                                    // 814\n                                                                                                     // 815\n// ~, ~> --> * (any, kinda silly)                                                                    // 816\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0                                           // 817\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0                                                   // 818\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0                                                   // 819\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0                                                                // 820\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0                                                                // 821\nfunction replaceTildes(comp, loose) {                                                                // 822\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 823\n    return replaceTilde(comp, loose);                                                                // 824\n  }).join(' ');                                                                                      // 825\n}                                                                                                    // 826\n                                                                                                     // 827\nfunction replaceTilde(comp, loose) {                                                                 // 828\n  var r = loose ? re[TILDELOOSE] : re[TILDE];                                                        // 829\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 830\n    debug('tilde', comp, _, M, m, p, pr);                                                            // 831\n    var ret;                                                                                         // 832\n                                                                                                     // 833\n    if (isX(M))                                                                                      // 834\n      ret = '';                                                                                      // 835\n    else if (isX(m))                                                                                 // 836\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 837\n    else if (isX(p))                                                                                 // 838\n      // ~1.2 == >=1.2.0- <1.3.0-                                                                    // 839\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 840\n    else if (pr) {                                                                                   // 841\n      debug('replaceTilde pr', pr);                                                                  // 842\n      if (pr.charAt(0) !== '-')                                                                      // 843\n        pr = '-' + pr;                                                                               // 844\n      ret = '>=' + M + '.' + m + '.' + p + pr +                                                      // 845\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 846\n    } else                                                                                           // 847\n      // ~1.2.3 == >=1.2.3 <1.3.0                                                                    // 848\n      ret = '>=' + M + '.' + m + '.' + p +                                                           // 849\n            ' <' + M + '.' + (+m + 1) + '.0';                                                        // 850\n                                                                                                     // 851\n    debug('tilde return', ret);                                                                      // 852\n    return ret;                                                                                      // 853\n  });                                                                                                // 854\n}                                                                                                    // 855\n                                                                                                     // 856\n// ^ --> * (any, kinda silly)                                                                        // 857\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0                                                               // 858\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0                                                                   // 859\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0                                                                   // 860\n// ^1.2.3 --> >=1.2.3 <2.0.0                                                                         // 861\n// ^1.2.0 --> >=1.2.0 <2.0.0                                                                         // 862\nfunction replaceCarets(comp, loose) {                                                                // 863\n  return comp.trim().split(/\\s+/).map(function(comp) {                                               // 864\n    return replaceCaret(comp, loose);                                                                // 865\n  }).join(' ');                                                                                      // 866\n}                                                                                                    // 867\n                                                                                                     // 868\nfunction replaceCaret(comp, loose) {                                                                 // 869\n  debug('caret', comp, loose);                                                                       // 870\n  var r = loose ? re[CARETLOOSE] : re[CARET];                                                        // 871\n  return comp.replace(r, function(_, M, m, p, pr) {                                                  // 872\n    debug('caret', comp, _, M, m, p, pr);                                                            // 873\n    var ret;                                                                                         // 874\n                                                                                                     // 875\n    if (isX(M))                                                                                      // 876\n      ret = '';                                                                                      // 877\n    else if (isX(m))                                                                                 // 878\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 879\n    else if (isX(p)) {                                                                               // 880\n      if (M === '0')                                                                                 // 881\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                               // 882\n      else                                                                                           // 883\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';                                       // 884\n    } else if (pr) {                                                                                 // 885\n      debug('replaceCaret pr', pr);                                                                  // 886\n      if (pr.charAt(0) !== '-')                                                                      // 887\n        pr = '-' + pr;                                                                               // 888\n      if (M === '0') {                                                                               // 889\n        if (m === '0')                                                                               // 890\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 891\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 892\n        else                                                                                         // 893\n          ret = '>=' + M + '.' + m + '.' + p + pr +                                                  // 894\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 895\n      } else                                                                                         // 896\n        ret = '>=' + M + '.' + m + '.' + p + pr +                                                    // 897\n              ' <' + (+M + 1) + '.0.0';                                                              // 898\n    } else {                                                                                         // 899\n      debug('no pr');                                                                                // 900\n      if (M === '0') {                                                                               // 901\n        if (m === '0')                                                                               // 902\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 903\n                ' <' + M + '.' + m + '.' + (+p + 1);                                                 // 904\n        else                                                                                         // 905\n          ret = '>=' + M + '.' + m + '.' + p +                                                       // 906\n                ' <' + M + '.' + (+m + 1) + '.0';                                                    // 907\n      } else                                                                                         // 908\n        ret = '>=' + M + '.' + m + '.' + p +                                                         // 909\n              ' <' + (+M + 1) + '.0.0';                                                              // 910\n    }                                                                                                // 911\n                                                                                                     // 912\n    debug('caret return', ret);                                                                      // 913\n    return ret;                                                                                      // 914\n  });                                                                                                // 915\n}                                                                                                    // 916\n                                                                                                     // 917\nfunction replaceXRanges(comp, loose) {                                                               // 918\n  debug('replaceXRanges', comp, loose);                                                              // 919\n  return comp.split(/\\s+/).map(function(comp) {                                                      // 920\n    return replaceXRange(comp, loose);                                                               // 921\n  }).join(' ');                                                                                      // 922\n}                                                                                                    // 923\n                                                                                                     // 924\nfunction replaceXRange(comp, loose) {                                                                // 925\n  comp = comp.trim();                                                                                // 926\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];                                                      // 927\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {                                          // 928\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);                                                   // 929\n    var xM = isX(M);                                                                                 // 930\n    var xm = xM || isX(m);                                                                           // 931\n    var xp = xm || isX(p);                                                                           // 932\n    var anyX = xp;                                                                                   // 933\n                                                                                                     // 934\n    if (gtlt === '=' && anyX)                                                                        // 935\n      gtlt = '';                                                                                     // 936\n                                                                                                     // 937\n    if (xM) {                                                                                        // 938\n      if (gtlt === '>' || gtlt === '<') {                                                            // 939\n        // nothing is allowed                                                                        // 940\n        ret = '<0.0.0';                                                                              // 941\n      } else {                                                                                       // 942\n        // nothing is forbidden                                                                      // 943\n        ret = '*';                                                                                   // 944\n      }                                                                                              // 945\n    } else if (gtlt && anyX) {                                                                       // 946\n      // replace X with 0                                                                            // 947\n      if (xm)                                                                                        // 948\n        m = 0;                                                                                       // 949\n      if (xp)                                                                                        // 950\n        p = 0;                                                                                       // 951\n                                                                                                     // 952\n      if (gtlt === '>') {                                                                            // 953\n        // >1 => >=2.0.0                                                                             // 954\n        // >1.2 => >=1.3.0                                                                           // 955\n        // >1.2.3 => >= 1.2.4                                                                        // 956\n        gtlt = '>=';                                                                                 // 957\n        if (xm) {                                                                                    // 958\n          M = +M + 1;                                                                                // 959\n          m = 0;                                                                                     // 960\n          p = 0;                                                                                     // 961\n        } else if (xp) {                                                                             // 962\n          m = +m + 1;                                                                                // 963\n          p = 0;                                                                                     // 964\n        }                                                                                            // 965\n      } else if (gtlt === '<=') {                                                                    // 966\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should                                        // 967\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.                                          // 968\n        gtlt = '<'                                                                                   // 969\n        if (xm)                                                                                      // 970\n          M = +M + 1                                                                                 // 971\n        else                                                                                         // 972\n          m = +m + 1                                                                                 // 973\n      }                                                                                              // 974\n                                                                                                     // 975\n      ret = gtlt + M + '.' + m + '.' + p;                                                            // 976\n    } else if (xm) {                                                                                 // 977\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';                                                 // 978\n    } else if (xp) {                                                                                 // 979\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';                                 // 980\n    }                                                                                                // 981\n                                                                                                     // 982\n    debug('xRange return', ret);                                                                     // 983\n                                                                                                     // 984\n    return ret;                                                                                      // 985\n  });                                                                                                // 986\n}                                                                                                    // 987\n                                                                                                     // 988\n// Because * is AND-ed with everything else in the comparator,                                       // 989\n// and '' means \"any version\", just remove the *s entirely.                                          // 990\nfunction replaceStars(comp, loose) {                                                                 // 991\n  debug('replaceStars', comp, loose);                                                                // 992\n  // Looseness is ignored here.  star is always as loose as it gets!                                 // 993\n  return comp.trim().replace(re[STAR], '');                                                          // 994\n}                                                                                                    // 995\n                                                                                                     // 996\n// This function is passed to string.replace(re[HYPHENRANGE])                                        // 997\n// M, m, patch, prerelease, build                                                                    // 998\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5                                                                    // 999\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do                                                   // 1000\n// 1.2 - 3.4 => >=1.2.0 <3.5.0                                                                       // 1001\nfunction hyphenReplace($0,                                                                           // 1002\n                       from, fM, fm, fp, fpr, fb,                                                    // 1003\n                       to, tM, tm, tp, tpr, tb) {                                                    // 1004\n                                                                                                     // 1005\n  if (isX(fM))                                                                                       // 1006\n    from = '';                                                                                       // 1007\n  else if (isX(fm))                                                                                  // 1008\n    from = '>=' + fM + '.0.0';                                                                       // 1009\n  else if (isX(fp))                                                                                  // 1010\n    from = '>=' + fM + '.' + fm + '.0';                                                              // 1011\n  else                                                                                               // 1012\n    from = '>=' + from;                                                                              // 1013\n                                                                                                     // 1014\n  if (isX(tM))                                                                                       // 1015\n    to = '';                                                                                         // 1016\n  else if (isX(tm))                                                                                  // 1017\n    to = '<' + (+tM + 1) + '.0.0';                                                                   // 1018\n  else if (isX(tp))                                                                                  // 1019\n    to = '<' + tM + '.' + (+tm + 1) + '.0';                                                          // 1020\n  else if (tpr)                                                                                      // 1021\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;                                                // 1022\n  else                                                                                               // 1023\n    to = '<=' + to;                                                                                  // 1024\n                                                                                                     // 1025\n  return (from + ' ' + to).trim();                                                                   // 1026\n}                                                                                                    // 1027\n                                                                                                     // 1028\n                                                                                                     // 1029\n// if ANY of the sets match ALL of its comparators, then pass                                        // 1030\nRange.prototype.test = function(version) {                                                           // 1031\n  if (!version)                                                                                      // 1032\n    return false;                                                                                    // 1033\n                                                                                                     // 1034\n  if (typeof version === 'string')                                                                   // 1035\n    version = new SemVer(version, this.loose);                                                       // 1036\n                                                                                                     // 1037\n  for (var i = 0; i < this.set.length; i++) {                                                        // 1038\n    if (testSet(this.set[i], version))                                                               // 1039\n      return true;                                                                                   // 1040\n  }                                                                                                  // 1041\n  return false;                                                                                      // 1042\n};                                                                                                   // 1043\n                                                                                                     // 1044\nfunction testSet(set, version) {                                                                     // 1045\n  for (var i = 0; i < set.length; i++) {                                                             // 1046\n    if (!set[i].test(version))                                                                       // 1047\n      return false;                                                                                  // 1048\n  }                                                                                                  // 1049\n                                                                                                     // 1050\n  if (version.prerelease.length) {                                                                   // 1051\n    // Find the set of versions that are allowed to have prereleases                                 // 1052\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0                                      // 1053\n    // That should allow `1.2.3-pr.2` to pass.                                                       // 1054\n    // However, `1.2.4-alpha.notready` should NOT be allowed,                                        // 1055\n    // even though it's within the range set by the comparators.                                     // 1056\n    for (var i = 0; i < set.length; i++) {                                                           // 1057\n      debug(set[i].semver);                                                                          // 1058\n      if (set[i].semver === ANY)                                                                     // 1059\n        continue;                                                                                    // 1060\n                                                                                                     // 1061\n      if (set[i].semver.prerelease.length > 0) {                                                     // 1062\n        var allowed = set[i].semver;                                                                 // 1063\n        if (allowed.major === version.major &&                                                       // 1064\n            allowed.minor === version.minor &&                                                       // 1065\n            allowed.patch === version.patch)                                                         // 1066\n          return true;                                                                               // 1067\n      }                                                                                              // 1068\n    }                                                                                                // 1069\n                                                                                                     // 1070\n    // Version has a -pre, but it's not one of the ones we like.                                     // 1071\n    return false;                                                                                    // 1072\n  }                                                                                                  // 1073\n                                                                                                     // 1074\n  return true;                                                                                       // 1075\n}                                                                                                    // 1076\n                                                                                                     // 1077\nexports.satisfies = satisfies;                                                                       // 1078\nfunction satisfies(version, range, loose) {                                                          // 1079\n  try {                                                                                              // 1080\n    range = new Range(range, loose);                                                                 // 1081\n  } catch (er) {                                                                                     // 1082\n    return false;                                                                                    // 1083\n  }                                                                                                  // 1084\n  return range.test(version);                                                                        // 1085\n}                                                                                                    // 1086\n                                                                                                     // 1087\nexports.maxSatisfying = maxSatisfying;                                                               // 1088\nfunction maxSatisfying(versions, range, loose) {                                                     // 1089\n  return versions.filter(function(version) {                                                         // 1090\n    return satisfies(version, range, loose);                                                         // 1091\n  }).sort(function(a, b) {                                                                           // 1092\n    return rcompare(a, b, loose);                                                                    // 1093\n  })[0] || null;                                                                                     // 1094\n}                                                                                                    // 1095\n                                                                                                     // 1096\nexports.validRange = validRange;                                                                     // 1097\nfunction validRange(range, loose) {                                                                  // 1098\n  try {                                                                                              // 1099\n    // Return '*' instead of '' so that truthiness works.                                            // 1100\n    // This will throw if it's invalid anyway                                                        // 1101\n    return new Range(range, loose).range || '*';                                                     // 1102\n  } catch (er) {                                                                                     // 1103\n    return null;                                                                                     // 1104\n  }                                                                                                  // 1105\n}                                                                                                    // 1106\n                                                                                                     // 1107\n// Determine if version is less than all the versions possible in the range                          // 1108\nexports.ltr = ltr;                                                                                   // 1109\nfunction ltr(version, range, loose) {                                                                // 1110\n  return outside(version, range, '<', loose);                                                        // 1111\n}                                                                                                    // 1112\n                                                                                                     // 1113\n// Determine if version is greater than all the versions possible in the range.                      // 1114\nexports.gtr = gtr;                                                                                   // 1115\nfunction gtr(version, range, loose) {                                                                // 1116\n  return outside(version, range, '>', loose);                                                        // 1117\n}                                                                                                    // 1118\n                                                                                                     // 1119\nexports.outside = outside;                                                                           // 1120\nfunction outside(version, range, hilo, loose) {                                                      // 1121\n  version = new SemVer(version, loose);                                                              // 1122\n  range = new Range(range, loose);                                                                   // 1123\n                                                                                                     // 1124\n  var gtfn, ltefn, ltfn, comp, ecomp;                                                                // 1125\n  switch (hilo) {                                                                                    // 1126\n    case '>':                                                                                        // 1127\n      gtfn = gt;                                                                                     // 1128\n      ltefn = lte;                                                                                   // 1129\n      ltfn = lt;                                                                                     // 1130\n      comp = '>';                                                                                    // 1131\n      ecomp = '>=';                                                                                  // 1132\n      break;                                                                                         // 1133\n    case '<':                                                                                        // 1134\n      gtfn = lt;                                                                                     // 1135\n      ltefn = gte;                                                                                   // 1136\n      ltfn = gt;                                                                                     // 1137\n      comp = '<';                                                                                    // 1138\n      ecomp = '<=';                                                                                  // 1139\n      break;                                                                                         // 1140\n    default:                                                                                         // 1141\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');                                  // 1142\n  }                                                                                                  // 1143\n                                                                                                     // 1144\n  // If it satisifes the range it is not outside                                                     // 1145\n  if (satisfies(version, range, loose)) {                                                            // 1146\n    return false;                                                                                    // 1147\n  }                                                                                                  // 1148\n                                                                                                     // 1149\n  // From now on, variable terms are as if we're in \"gtr\" mode.                                      // 1150\n  // but note that everything is flipped for the \"ltr\" function.                                     // 1151\n                                                                                                     // 1152\n  for (var i = 0; i < range.set.length; ++i) {                                                       // 1153\n    var comparators = range.set[i];                                                                  // 1154\n                                                                                                     // 1155\n    var high = null;                                                                                 // 1156\n    var low = null;                                                                                  // 1157\n                                                                                                     // 1158\n    comparators.forEach(function(comparator) {                                                       // 1159\n      if (comparator.semver === ANY) {                                                               // 1160\n        comparator = new Comparator('>=0.0.0')                                                       // 1161\n      }                                                                                              // 1162\n      high = high || comparator;                                                                     // 1163\n      low = low || comparator;                                                                       // 1164\n      if (gtfn(comparator.semver, high.semver, loose)) {                                             // 1165\n        high = comparator;                                                                           // 1166\n      } else if (ltfn(comparator.semver, low.semver, loose)) {                                       // 1167\n        low = comparator;                                                                            // 1168\n      }                                                                                              // 1169\n    });                                                                                              // 1170\n                                                                                                     // 1171\n    // If the edge version comparator has a operator then our version                                // 1172\n    // isn't outside it                                                                              // 1173\n    if (high.operator === comp || high.operator === ecomp) {                                         // 1174\n      return false;                                                                                  // 1175\n    }                                                                                                // 1176\n                                                                                                     // 1177\n    // If the lowest version comparator has an operator and our version                              // 1178\n    // is less than it then it isn't higher than the range                                           // 1179\n    if ((!low.operator || low.operator === comp) &&                                                  // 1180\n        ltefn(version, low.semver)) {                                                                // 1181\n      return false;                                                                                  // 1182\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {                                // 1183\n      return false;                                                                                  // 1184\n    }                                                                                                // 1185\n  }                                                                                                  // 1186\n  return true;                                                                                       // 1187\n}                                                                                                    // 1188\n                                                                                                     // 1189\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/tmeasday:check-npm-versions/check-npm-versions.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['tmeasday:check-npm-versions'] = exports;\n\n})();\n","servePath":"/packages/tmeasday_check-npm-versions.js","sourceMap":{"version":3,"sources":["/packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;AAMA,IAAM,+BAA+B,SAA/B,4BAA+B,CAAC,IAAD,EAAO,KAAP,EAAiB;AACpD,MAAI;AACF,QAAM,mBAAmB,QAAW,sBAAX,EAAgC,OAAhC,CADvB;AAEF,QAAI,oBAAO,SAAP,CAAiB,gBAAjB,EAAmC,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP,CAD6C;KAA/C,MAEO;AACL,aAAO,gBAAP,CADK;KAFP;GAFF,CAOE,OAAO,CAAP,EAAU;AACV,YAAQ,GAAR,CAAY,CAAZ;;AADU,WAGH,KAAP,CAHU;GAAV;CARiC;;AAe9B,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,QAAD,EAAW,WAAX,EAA2B;AACzD,MAAM,WAAW,EAAX,CADmD;AAEzD,gBAAE,OAAF,CAAU,QAAV,EAAoB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACnC,QAAM,UAAU,6BAA6B,IAA7B,EAAmC,KAAnC,CAAV,CAD6B;AAEnC,QAAI,YAAY,IAAZ,EAAkB;AACpB,eAAS,IAAT,IAAiB,OAAjB,CADoB;KAAtB;GAFkB,CAApB,CAFyD;;AASzD,MAAI,cAAE,IAAF,CAAO,QAAP,EAAiB,MAAjB,KAA4B,CAA5B,EAA+B;AACjC,WAAO,IAAP,CADiC;GAAnC;;AAIA,MAAM,SAAS,EAAT,CAbmD;AAczD,gBAAE,OAAF,CAAU,QAAV,EAAoB,UAAC,SAAD,EAAY,IAAZ,EAAqB;AACvC,QAAM,cAAiB,aAAQ,SAAS,IAAT,CAAzB,CADiC;;AAGvC,QAAI,SAAJ,EAAe;AACb,aAAO,IAAP,SAAkB,aAAQ,6BAAwB,uBAAlD,EADa;KAAf,MAEO;AACL,aAAO,IAAP,SAAkB,aAAQ,SAAS,IAAT,qBAA1B,EADK;KAFP;GAHkB,CAApB,CAdyD;;AAwBzD,MAAM,YAAY,wBAAsB,kBAAtB,GAAwC,EAAxC,CAxBuC;AAyBzD,UAAQ,IAAR,qCAA+C,iCAC/C,OAAO,IAAP,CAAY,IAAZ,kIADA,EAzByD;CAA3B,sG","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e)\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]}}]