[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar makeInstaller, meteorInstall;\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/.npm/package/node_modules/install/install.js   //\n// This file is in bare mode and is not in its own closure.                //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nmakeInstaller = function (options) {                                       // 1\n  options = options || {};                                                 // 2\n                                                                           // 3\n  // These file extensions will be appended to required module identifiers\n  // if they do not exactly match an installed module.                     // 5\n  var defaultExtensions = options.extensions || [\".js\", \".json\"];          // 6\n                                                                           // 7\n  // This constructor will be used to instantiate the module objects       // 8\n  // passed to module factory functions (i.e. the third argument after     // 9\n  // require and exports).                                                 // 10\n  var Module = options.Module || function Module(id) {                     // 11\n    this.id = id;                                                          // 12\n    this.children = [];                                                    // 13\n  };                                                                       // 14\n                                                                           // 15\n  // If defined, the options.onInstall function will be called any time    // 16\n  // new modules are installed.                                            // 17\n  var onInstall = options.onInstall;                                       // 18\n                                                                           // 19\n  // If defined, the options.override function will be called before       // 20\n  // looking up any top-level package identifiers in node_modules          // 21\n  // directories. It can either return a string to provide an alternate    // 22\n  // package identifier, or a non-string value to prevent the lookup from  // 23\n  // proceeding.                                                           // 24\n  var override = options.override;                                         // 25\n                                                                           // 26\n  // If defined, the options.fallback function will be called when no      // 27\n  // installed module is found for a required module identifier. Often     // 28\n  // options.fallback will be implemented in terms of the native Node      // 29\n  // require function, which has the ability to load binary modules.       // 30\n  var fallback = options.fallback;                                         // 31\n                                                                           // 32\n  // Nothing special about MISSING.hasOwnProperty, except that it's fewer  // 33\n  // characters than Object.prototype.hasOwnProperty after minification.   // 34\n  var hasOwn = {}.hasOwnProperty;                                          // 35\n                                                                           // 36\n  // The file object representing the root directory of the installed      // 37\n  // module tree.                                                          // 38\n  var root = new File(\"/\", new File(\"/..\"));                               // 39\n  var rootRequire = makeRequire(root);                                     // 40\n                                                                           // 41\n  // Merges the given tree of directories and module factory functions     // 42\n  // into the tree of installed modules and returns a require function     // 43\n  // that behaves as if called from a module in the root directory.        // 44\n  function install(tree, options) {                                        // 45\n    if (isObject(tree)) {                                                  // 46\n      fileMergeContents(root, tree, options);                              // 47\n      if (isFunction(onInstall)) {                                         // 48\n        onInstall(rootRequire);                                            // 49\n      }                                                                    // 50\n    }                                                                      // 51\n    return rootRequire;                                                    // 52\n  }                                                                        // 53\n                                                                           // 54\n  function getOwn(obj, key) {                                              // 55\n    return hasOwn.call(obj, key) && obj[key];                              // 56\n  }                                                                        // 57\n                                                                           // 58\n  function isObject(value) {                                               // 59\n    return value && typeof value === \"object\";                             // 60\n  }                                                                        // 61\n                                                                           // 62\n  function isFunction(value) {                                             // 63\n    return typeof value === \"function\";                                    // 64\n  }                                                                        // 65\n                                                                           // 66\n  function isString(value) {                                               // 67\n    return typeof value === \"string\";                                      // 68\n  }                                                                        // 69\n                                                                           // 70\n  function makeRequire(file) {                                             // 71\n    function require(id) {                                                 // 72\n      var result = fileResolve(file, id);                                  // 73\n      if (result) {                                                        // 74\n        return fileEvaluate(result, file.m);                               // 75\n      }                                                                    // 76\n                                                                           // 77\n      var error = new Error(\"Cannot find module '\" + id + \"'\");            // 78\n                                                                           // 79\n      if (isFunction(fallback)) {                                          // 80\n        return fallback(                                                   // 81\n          id, // The missing module identifier.                            // 82\n          file.m.id, // The path of the requiring file.                    // 83\n          error // The error we would have thrown.                         // 84\n        );                                                                 // 85\n      }                                                                    // 86\n                                                                           // 87\n      throw error;                                                         // 88\n    }                                                                      // 89\n                                                                           // 90\n    require.resolve = function (id) {                                      // 91\n      var f = fileResolve(file, id);                                       // 92\n      if (f) return f.m.id;                                                // 93\n      throw new Error(\"Cannot find module '\" + id + \"'\");                  // 94\n    };                                                                     // 95\n                                                                           // 96\n    return require;                                                        // 97\n  }                                                                        // 98\n                                                                           // 99\n  // File objects represent either directories or modules that have been   // 100\n  // installed. When a `File` respresents a directory, its `.c` (contents)\n  // property is an object containing the names of the files (or           // 102\n  // directories) that it contains. When a `File` represents a module, its\n  // `.c` property is a function that can be invoked with the appropriate  // 104\n  // `(require, exports, module)` arguments to evaluate the module. If the\n  // `.c` property is a string, that string will be resolved as a module   // 106\n  // identifier, and the exports of the resulting module will provide the  // 107\n  // exports of the original file. The `.p` (parent) property of a File is\n  // either a directory `File` or `null`. Note that a child may claim      // 109\n  // another `File` as its parent even if the parent does not have an      // 110\n  // entry for that child in its `.c` object.  This is important for       // 111\n  // implementing anonymous files, and preventing child modules from using\n  // `../relative/identifier` syntax to examine unrelated modules.         // 113\n  function File(name, parent) {                                            // 114\n    var file = this;                                                       // 115\n                                                                           // 116\n    // Link to the parent file.                                            // 117\n    file.p = parent = parent || null;                                      // 118\n                                                                           // 119\n    // The module object for this File, which will eventually boast an     // 120\n    // .exports property when/if the file is evaluated.                    // 121\n    file.m = new Module(name);                                             // 122\n  }                                                                        // 123\n                                                                           // 124\n  function fileEvaluate(file, parentModule) {                              // 125\n    var contents = file && file.c;                                         // 126\n    var module = file.m;                                                   // 127\n    if (! hasOwn.call(module, \"exports\")) {                                // 128\n      if (parentModule) {                                                  // 129\n        module.parent = parentModule;                                      // 130\n        var children = parentModule.children;                              // 131\n        if (Array.isArray(children)) {                                     // 132\n          children.push(module);                                           // 133\n        }                                                                  // 134\n      }                                                                    // 135\n                                                                           // 136\n      // If a Module.prototype.useNode method is defined, give it a chance\n      // to define module.exports based on module.id using Node.           // 138\n      if (! isFunction(module.useNode) ||                                  // 139\n          ! module.useNode()) {                                            // 140\n        contents(                                                          // 141\n          file.r = file.r || makeRequire(file),                            // 142\n          module.exports = {},                                             // 143\n          module,                                                          // 144\n          file.m.id,                                                       // 145\n          file.p.m.id                                                      // 146\n        );                                                                 // 147\n      }                                                                    // 148\n    }                                                                      // 149\n    return module.exports;                                                 // 150\n  }                                                                        // 151\n                                                                           // 152\n  function fileIsDirectory(file) {                                         // 153\n    return file && isObject(file.c);                                       // 154\n  }                                                                        // 155\n                                                                           // 156\n  function fileMergeContents(file, contents, options) {                    // 157\n    // If contents is an array of strings and functions, return the last   // 158\n    // function with a `.d` property containing all the strings.           // 159\n    if (Array.isArray(contents)) {                                         // 160\n      var deps = [];                                                       // 161\n                                                                           // 162\n      contents.forEach(function (item) {                                   // 163\n        if (isString(item)) {                                              // 164\n          deps.push(item);                                                 // 165\n        } else if (isFunction(item)) {                                     // 166\n          contents = item;                                                 // 167\n        }                                                                  // 168\n      });                                                                  // 169\n                                                                           // 170\n      if (isFunction(contents)) {                                          // 171\n        contents.d = deps;                                                 // 172\n      } else {                                                             // 173\n        // If the array did not contain a function, merge nothing.         // 174\n        contents = null;                                                   // 175\n      }                                                                    // 176\n                                                                           // 177\n    } else if (isFunction(contents)) {                                     // 178\n      // If contents is already a function, make sure it has `.d`.         // 179\n      contents.d = contents.d || [];                                       // 180\n                                                                           // 181\n    } else if (! isString(contents) &&                                     // 182\n               ! isObject(contents)) {                                     // 183\n      // If contents is neither an array nor a function nor a string nor   // 184\n      // an object, just give up and merge nothing.                        // 185\n      contents = null;                                                     // 186\n    }                                                                      // 187\n                                                                           // 188\n    if (contents) {                                                        // 189\n      file.c = file.c || (isObject(contents) ? {} : contents);             // 190\n      if (isObject(contents) && fileIsDirectory(file)) {                   // 191\n        Object.keys(contents).forEach(function (key) {                     // 192\n          if (key === \"..\") {                                              // 193\n            child = file.p;                                                // 194\n                                                                           // 195\n          } else {                                                         // 196\n            var child = getOwn(file.c, key);                               // 197\n            if (! child) {                                                 // 198\n              child = file.c[key] = new File(                              // 199\n                file.m.id.replace(/\\/*$/, \"/\") + key,                      // 200\n                file                                                       // 201\n              );                                                           // 202\n                                                                           // 203\n              child.o = options;                                           // 204\n            }                                                              // 205\n          }                                                                // 206\n                                                                           // 207\n          fileMergeContents(child, contents[key], options);                // 208\n        });                                                                // 209\n      }                                                                    // 210\n    }                                                                      // 211\n  }                                                                        // 212\n                                                                           // 213\n  function fileGetExtensions(file) {                                       // 214\n    return file.o && file.o.extensions || defaultExtensions;               // 215\n  }                                                                        // 216\n                                                                           // 217\n  function fileAppendIdPart(file, part, extensions) {                      // 218\n    // Always append relative to a directory.                              // 219\n    while (file && ! fileIsDirectory(file)) {                              // 220\n      file = file.p;                                                       // 221\n    }                                                                      // 222\n                                                                           // 223\n    if (! file || ! part || part === \".\") {                                // 224\n      return file;                                                         // 225\n    }                                                                      // 226\n                                                                           // 227\n    if (part === \"..\") {                                                   // 228\n      return file.p;                                                       // 229\n    }                                                                      // 230\n                                                                           // 231\n    var exactChild = getOwn(file.c, part);                                 // 232\n                                                                           // 233\n    // Only consider multiple file extensions if this part is the last     // 234\n    // part of a module identifier and not equal to `.` or `..`, and there\n    // was no exact match or the exact match was a directory.              // 236\n    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {     // 237\n      for (var e = 0; e < extensions.length; ++e) {                        // 238\n        var child = getOwn(file.c, part + extensions[e]);                  // 239\n        if (child) {                                                       // 240\n          return child;                                                    // 241\n        }                                                                  // 242\n      }                                                                    // 243\n    }                                                                      // 244\n                                                                           // 245\n    return exactChild;                                                     // 246\n  }                                                                        // 247\n                                                                           // 248\n  function fileAppendId(file, id, extensions) {                            // 249\n    var parts = id.split(\"/\");                                             // 250\n                                                                           // 251\n    // Use `Array.prototype.every` to terminate iteration early if         // 252\n    // `fileAppendIdPart` returns a falsy value.                           // 253\n    parts.every(function (part, i) {                                       // 254\n      return file = i < parts.length - 1                                   // 255\n        ? fileAppendIdPart(file, part)                                     // 256\n        : fileAppendIdPart(file, part, extensions);                        // 257\n    });                                                                    // 258\n                                                                           // 259\n    return file;                                                           // 260\n  }                                                                        // 261\n                                                                           // 262\n  function fileResolve(file, id, seenDirFiles) {                           // 263\n    var extensions = fileGetExtensions(file);                              // 264\n                                                                           // 265\n    file =                                                                 // 266\n      // Absolute module identifiers (i.e. those that begin with a `/`     // 267\n      // character) are interpreted relative to the root directory, which  // 268\n      // is a slight deviation from Node, which has access to the entire   // 269\n      // file system.                                                      // 270\n      id.charAt(0) === \"/\" ? fileAppendId(root, id, extensions) :          // 271\n      // Relative module identifiers are interpreted relative to the       // 272\n      // current file, naturally.                                          // 273\n      id.charAt(0) === \".\" ? fileAppendId(file, id, extensions) :          // 274\n      // Top-level module identifiers are interpreted as referring to      // 275\n      // packages in `node_modules` directories.                           // 276\n      nodeModulesLookup(file, id, extensions);                             // 277\n                                                                           // 278\n    // If the identifier resolves to a directory, we use the same logic as\n    // Node to find an `index.js` or `package.json` file to evaluate.      // 280\n    while (fileIsDirectory(file)) {                                        // 281\n      seenDirFiles = seenDirFiles || [];                                   // 282\n                                                                           // 283\n      // If the \"main\" field of a `package.json` file resolves to a        // 284\n      // directory we've already considered, then we should not attempt to\n      // read the same `package.json` file again. Using an array as a set  // 286\n      // is acceptable here because the number of directories to consider  // 287\n      // is rarely greater than 1 or 2. Also, using indexOf allows us to   // 288\n      // store File objects instead of strings.                            // 289\n      if (seenDirFiles.indexOf(file) < 0) {                                // 290\n        seenDirFiles.push(file);                                           // 291\n                                                                           // 292\n        var pkgJsonFile = fileAppendIdPart(file, \"package.json\");          // 293\n        var main = pkgJsonFile && fileEvaluate(pkgJsonFile).main;          // 294\n        if (isString(main)) {                                              // 295\n          // The \"main\" field of package.json does not have to begin with  // 296\n          // ./ to be considered relative, so first we try simply          // 297\n          // appending it to the directory path before falling back to a   // 298\n          // full fileResolve, which might return a package from a         // 299\n          // node_modules directory.                                       // 300\n          file = fileAppendId(file, main, extensions) ||                   // 301\n            fileResolve(file, main, seenDirFiles);                         // 302\n                                                                           // 303\n          if (file) {                                                      // 304\n            // The fileAppendId call above may have returned a directory,  // 305\n            // so continue the loop to make sure we resolve it to a        // 306\n            // non-directory file.                                         // 307\n            continue;                                                      // 308\n          }                                                                // 309\n        }                                                                  // 310\n      }                                                                    // 311\n                                                                           // 312\n      // If we didn't find a `package.json` file, or it didn't have a      // 313\n      // resolvable `.main` property, the only possibility left to         // 314\n      // consider is that this directory contains an `index.js` module.    // 315\n      // This assignment almost always terminates the while loop, because  // 316\n      // there's very little chance `fileIsDirectory(file)` will be true   // 317\n      // for the result of `fileAppendIdPart(file, \"index.js\")`. However,  // 318\n      // in principle it is remotely possible that a file called           // 319\n      // `index.js` could be a directory instead of a file.                // 320\n      file = fileAppendIdPart(file, \"index.js\");                           // 321\n    }                                                                      // 322\n                                                                           // 323\n    if (file && isString(file.c)) {                                        // 324\n      file = fileResolve(file, file.c, seenDirFiles);                      // 325\n    }                                                                      // 326\n                                                                           // 327\n    return file;                                                           // 328\n  };                                                                       // 329\n                                                                           // 330\n  function nodeModulesLookup(file, id, extensions) {                       // 331\n    if (isFunction(override)) {                                            // 332\n      id = override(id, file.m.id);                                        // 333\n    }                                                                      // 334\n                                                                           // 335\n    if (isString(id)) {                                                    // 336\n      for (var resolved; file && ! resolved; file = file.p) {              // 337\n        resolved = fileIsDirectory(file) &&                                // 338\n          fileAppendId(file, \"node_modules/\" + id, extensions);            // 339\n      }                                                                    // 340\n                                                                           // 341\n      return resolved;                                                     // 342\n    }                                                                      // 343\n  }                                                                        // 344\n                                                                           // 345\n  return install;                                                          // 346\n};                                                                         // 347\n                                                                           // 348\nif (typeof exports === \"object\") {                                         // 349\n  exports.makeInstaller = makeInstaller;                                   // 350\n}                                                                          // 351\n                                                                           // 352\n/////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/modules-runtime.js                             //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nvar options = {};                                                          // 1\nvar hasOwn = options.hasOwnProperty;                                       // 2\n                                                                           // 3\n// RegExp matching strings that don't start with a `.` or a `/`.           // 4\nvar topLevelIdPattern = /^[^./]/;                                          // 5\n                                                                           // 6\n// This function will be called whenever a module identifier that hasn't   // 7\n// been installed is required. For backwards compatibility, and so that we\n// can require binary dependencies on the server, we implement the         // 9\n// fallback in terms of Npm.require.                                       // 10\noptions.fallback = function (id, dir, error) {                             // 11\n  // For simplicity, we honor only top-level module identifiers here.      // 12\n  // We could try to honor relative and absolute module identifiers by     // 13\n  // somehow combining `id` with `dir`, but we'd have to be really careful\n  // that the resulting modules were located in a known directory (not     // 15\n  // some arbitrary location on the file system), and we only really need  // 16\n  // the fallback for dependencies installed in node_modules directories.  // 17\n  if (topLevelIdPattern.test(id)) {                                        // 18\n    var parts = id.split(\"/\");                                             // 19\n    if (parts.length === 2 &&                                              // 20\n        parts[0] === \"meteor\" &&                                           // 21\n        hasOwn.call(Package, parts[1])) {                                  // 22\n      return Package[parts[1]];                                            // 23\n    }                                                                      // 24\n                                                                           // 25\n    if (typeof Npm === \"object\" &&                                         // 26\n        typeof Npm.require === \"function\") {                               // 27\n      return Npm.require(id);                                              // 28\n    }                                                                      // 29\n  }                                                                        // 30\n                                                                           // 31\n  throw error;                                                             // 32\n};                                                                         // 33\n                                                                           // 34\nif (Meteor.isServer) {                                                     // 35\n  // Defining Module.prototype.useNode allows the module system to         // 36\n  // delegate evaluation to Node, unless useNode returns false.            // 37\n  (options.Module = function Module(id) {                                  // 38\n    // Same as the default Module constructor implementation.              // 39\n    this.id = id;                                                          // 40\n    this.children = [];                                                    // 41\n  }).prototype.useNode = function () {                                     // 42\n    if (typeof npmRequire !== \"function\") {                                // 43\n      // Can't use Node if npmRequire is not defined.                      // 44\n      return false;                                                        // 45\n    }                                                                      // 46\n                                                                           // 47\n    var parts = this.id.split(\"/\");                                        // 48\n    var start = 0;                                                         // 49\n    if (parts[start] === \"\") ++start;                                      // 50\n    if (parts[start] === \"node_modules\" &&                                 // 51\n        parts[start + 1] === \"meteor\") {                                   // 52\n      start += 2;                                                          // 53\n    }                                                                      // 54\n                                                                           // 55\n    if (parts.indexOf(\"node_modules\", start) < 0) {                        // 56\n      // Don't try to use Node for modules that aren't in node_modules     // 57\n      // directories.                                                      // 58\n      return false;                                                        // 59\n    }                                                                      // 60\n                                                                           // 61\n    try {                                                                  // 62\n      npmRequire.resolve(this.id);                                         // 63\n    } catch (e) {                                                          // 64\n      return false;                                                        // 65\n    }                                                                      // 66\n                                                                           // 67\n    this.exports = npmRequire(this.id);                                    // 68\n                                                                           // 69\n    return true;                                                           // 70\n  };                                                                       // 71\n}                                                                          // 72\n                                                                           // 73\nmeteorInstall = makeInstaller(options);                                    // 74\n                                                                           // 75\n/////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['modules-runtime'] = {}, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules-runtime.js"}]