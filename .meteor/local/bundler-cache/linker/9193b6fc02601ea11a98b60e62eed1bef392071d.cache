[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar HTTP = Package.http.HTTP;\nvar Random = Package.random.Random;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/autoupdate/autoupdate_cordova.js                                                    //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nvar autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\";\n                                                                                                // 2\n// The collection of acceptable client versions.                                                // 3\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");                      // 4\n                                                                                                // 5\nAutoupdate = {};                                                                                // 6\n                                                                                                // 7\nAutoupdate.newClientAvailable = function() {                                                    // 8\n  return !! ClientVersions.findOne({                                                            // 9\n    _id: 'version-cordova',                                                                     // 10\n    version: {$ne: autoupdateVersionCordova}                                                    // 11\n  });                                                                                           // 12\n};                                                                                              // 13\n                                                                                                // 14\nvar retry = new Retry({                                                                         // 15\n  // Unlike the stream reconnect use of Retry, which we want to be instant                      // 16\n  // in normal operation, this is a wacky failure. We don't want to retry                       // 17\n  // right away, we can start slowly.                                                           // 18\n  //                                                                                            // 19\n  // A better way than timeconstants here might be to use the knowledge                         // 20\n  // of when we reconnect to help trigger these retries. Typically, the                         // 21\n  // server fixing code will result in a restart and reconnect, but                             // 22\n  // potentially the subscription could have a transient error.                                 // 23\n  minCount: 0, // don't do any immediate retries                                                // 24\n  baseTimeout: 30*1000 // start with 30s                                                        // 25\n});                                                                                             // 26\nvar failures = 0;                                                                               // 27\n                                                                                                // 28\nAutoupdate._retrySubscription = function() {                                                    // 29\n  var appId = __meteor_runtime_config__.appId;                                                  // 30\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {                                 // 31\n    onError: function(error) {                                                                  // 32\n      console.log(\"autoupdate subscription failed:\", error);                                    // 33\n      failures++;                                                                               // 34\n      retry.retryLater(failures, function() {                                                   // 35\n        // Just retry making the subscription, don't reload the whole                           // 36\n        // page. While reloading would catch more cases (for example,                           // 37\n        // the server went back a version and is now doing old-style hot                        // 38\n        // code push), it would also be more prone to reload loops,                             // 39\n        // which look really bad to the user. Just retrying the                                 // 40\n        // subscription over DDP means it is at least possible to fix by                        // 41\n        // updating the server.                                                                 // 42\n        Autoupdate._retrySubscription();                                                        // 43\n      });                                                                                       // 44\n    },                                                                                          // 45\n    onReady: function() {                                                                       // 46\n      if (Package.reload) {                                                                     // 47\n        var checkNewVersionDocument = function(doc) {                                           // 48\n          var self = this;                                                                      // 49\n          if (doc.version !== autoupdateVersionCordova) {                                       // 50\n            handle && handle.stop();                                                            // 51\n            newVersionAvailable();                                                              // 52\n          }                                                                                     // 53\n        };                                                                                      // 54\n                                                                                                // 55\n        var handle = ClientVersions.find({_id: 'version-cordova'}).observe({                    // 56\n          added: checkNewVersionDocument,                                                       // 57\n          changed: checkNewVersionDocument                                                      // 58\n        });                                                                                     // 59\n      }                                                                                         // 60\n    }                                                                                           // 61\n  });                                                                                           // 62\n};                                                                                              // 63\n                                                                                                // 64\nMeteor.startup(function() {                                                                     // 65\n  WebAppLocalServer.onNewVersionReady(function() {                                              // 66\n    if (Package.reload) {                                                                       // 67\n      Package.reload.Reload._reload();                                                          // 68\n    }                                                                                           // 69\n  });                                                                                           // 70\n                                                                                                // 71\n  Autoupdate._retrySubscription();                                                              // 72\n});                                                                                             // 73\n                                                                                                // 74\nvar newVersionAvailable = function() {                                                          // 75\n  WebAppLocalServer.checkForUpdates();                                                          // 76\n}                                                                                               // 77\n                                                                                                // 78\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.autoupdate = {}, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js"}]