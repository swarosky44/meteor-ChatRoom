[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\n\n/* Package-scope variables */\nvar ReactiveVar;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/reactive-var/reactive-var.js                                                                        //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/*                                                                                                              // 1\n * ## [new] ReactiveVar(initialValue, [equalsFunc])                                                             // 2\n *                                                                                                              // 3\n * A ReactiveVar holds a single value that can be get and set,                                                  // 4\n * such that calling `set` will invalidate any Computations that                                                // 5\n * called `get`, according to the usual contract for reactive                                                   // 6\n * data sources.                                                                                                // 7\n *                                                                                                              // 8\n * A ReactiveVar is much like a Session variable -- compare `foo.get()`                                         // 9\n * to `Session.get(\"foo\")` -- but it doesn't have a global name and isn't                                       // 10\n * automatically migrated across hot code pushes.  Also, while Session                                          // 11\n * variables can only hold JSON or EJSON, ReactiveVars can hold any value.                                      // 12\n *                                                                                                              // 13\n * An important property of ReactiveVars, which is sometimes the reason                                         // 14\n * to use one, is that setting the value to the same value as before has                                        // 15\n * no effect, meaning ReactiveVars can be used to absorb extra                                                  // 16\n * invalidations that wouldn't serve a purpose.  However, by default,                                           // 17\n * ReactiveVars are extremely conservative about what changes they                                              // 18\n * absorb.  Calling `set` with an object argument will *always* trigger                                         // 19\n * invalidations, because even if the new value is `===` the old value,                                         // 20\n * the object may have been mutated.  You can change the default behavior                                       // 21\n * by passing a function of two arguments, `oldValue` and `newValue`,                                           // 22\n * to the constructor as `equalsFunc`.                                                                          // 23\n *                                                                                                              // 24\n * This class is extremely basic right now, but the idea is to evolve                                           // 25\n * it into the ReactiveVar of Geoff's Lickable Forms proposal.                                                  // 26\n */                                                                                                             // 27\n                                                                                                                // 28\n/**                                                                                                             // 29\n * @class                                                                                                       // 30\n * @instanceName reactiveVar                                                                                    // 31\n * @summary Constructor for a ReactiveVar, which represents a single reactive variable.                         // 32\n * @locus Client                                                                                                // 33\n * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.\n * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.\n */                                                                                                             // 36\nReactiveVar = function (initialValue, equalsFunc) {                                                             // 37\n  if (! (this instanceof ReactiveVar))                                                                          // 38\n    // called without `new`                                                                                     // 39\n    return new ReactiveVar(initialValue, equalsFunc);                                                           // 40\n                                                                                                                // 41\n  this.curValue = initialValue;                                                                                 // 42\n  this.equalsFunc = equalsFunc;                                                                                 // 43\n  this.dep = new Tracker.Dependency;                                                                            // 44\n};                                                                                                              // 45\n                                                                                                                // 46\nReactiveVar._isEqual = function (oldValue, newValue) {                                                          // 47\n  var a = oldValue, b = newValue;                                                                               // 48\n  // Two values are \"equal\" here if they are `===` and are                                                      // 49\n  // number, boolean, string, undefined, or null.                                                               // 50\n  if (a !== b)                                                                                                  // 51\n    return false;                                                                                               // 52\n  else                                                                                                          // 53\n    return ((!a) || (typeof a === 'number') || (typeof a === 'boolean') ||                                      // 54\n            (typeof a === 'string'));                                                                           // 55\n};                                                                                                              // 56\n                                                                                                                // 57\n/**                                                                                                             // 58\n * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.                   // 59\n * @locus Client                                                                                                // 60\n */                                                                                                             // 61\nReactiveVar.prototype.get = function () {                                                                       // 62\n  if (Tracker.active)                                                                                           // 63\n    this.dep.depend();                                                                                          // 64\n                                                                                                                // 65\n  return this.curValue;                                                                                         // 66\n};                                                                                                              // 67\n                                                                                                                // 68\n/**                                                                                                             // 69\n * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.\n * @locus Client                                                                                                // 71\n * @param {Any} newValue                                                                                        // 72\n */                                                                                                             // 73\nReactiveVar.prototype.set = function (newValue) {                                                               // 74\n  var oldValue = this.curValue;                                                                                 // 75\n                                                                                                                // 76\n  if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))                                            // 77\n    // value is same as last time                                                                               // 78\n    return;                                                                                                     // 79\n                                                                                                                // 80\n  this.curValue = newValue;                                                                                     // 81\n  this.dep.changed();                                                                                           // 82\n};                                                                                                              // 83\n                                                                                                                // 84\nReactiveVar.prototype.toString = function () {                                                                  // 85\n  return 'ReactiveVar{' + this.get() + '}';                                                                     // 86\n};                                                                                                              // 87\n                                                                                                                // 88\nReactiveVar.prototype._numListeners = function() {                                                              // 89\n  // Tests want to know.                                                                                        // 90\n  // Accesses a private field of Tracker.Dependency.                                                            // 91\n  var count = 0;                                                                                                // 92\n  for (var id in this.dep._dependentsById)                                                                      // 93\n    count++;                                                                                                    // 94\n  return count;                                                                                                 // 95\n};                                                                                                              // 96\n                                                                                                                // 97\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-var'] = {}, {\n  ReactiveVar: ReactiveVar\n});\n\n})();\n","servePath":"/packages/reactive-var.js"}]