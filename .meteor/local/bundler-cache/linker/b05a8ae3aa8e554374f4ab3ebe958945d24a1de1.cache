[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar Random = Package.random.Random;\n\n/* Package-scope variables */\nvar MongoID;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/mongo-id/id.js                                                                            //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nMongoID = {};\n\nMongoID._looksLikeObjectID = function (str) {\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);\n};\n\nMongoID.ObjectID = function (hexString) {\n  //random-based impl of Mongo ObjectID\n  var self = this;\n  if (hexString) {\n    hexString = hexString.toLowerCase();\n    if (!MongoID._looksLikeObjectID(hexString)) {\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");\n    }\n    // meant to work with _.isEqual(), which relies on structural equality\n    self._str = hexString;\n  } else {\n    self._str = Random.hexString(24);\n  }\n};\n\nMongoID.ObjectID.prototype.toString = function () {\n  var self = this;\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";\n};\n\nMongoID.ObjectID.prototype.equals = function (other) {\n  var self = this;\n  return other instanceof MongoID.ObjectID &&\n    self.valueOf() === other.valueOf();\n};\n\nMongoID.ObjectID.prototype.clone = function () {\n  var self = this;\n  return new MongoID.ObjectID(self._str);\n};\n\nMongoID.ObjectID.prototype.typeName = function() {\n  return \"oid\";\n};\n\nMongoID.ObjectID.prototype.getTimestamp = function() {\n  var self = this;\n  return parseInt(self._str.substr(0, 8), 16);\n};\n\nMongoID.ObjectID.prototype.valueOf =\n    MongoID.ObjectID.prototype.toJSONValue =\n    MongoID.ObjectID.prototype.toHexString =\n    function () { return this._str; };\n\nEJSON.addType(\"oid\",  function (str) {\n  return new MongoID.ObjectID(str);\n});\n\nMongoID.idStringify = function (id) {\n  if (id instanceof MongoID.ObjectID) {\n    return id.valueOf();\n  } else if (typeof id === 'string') {\n    if (id === \"\") {\n      return id;\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\n      return \"-\" + id;\n    } else {\n      return id; // other strings go through unchanged.\n    }\n  } else if (id === undefined) {\n    return '-';\n  } else if (typeof id === 'object' && id !== null) {\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");\n  } else { // Numbers, true, false, null\n    return \"~\" + JSON.stringify(id);\n  }\n};\n\n\nMongoID.idParse = function (id) {\n  if (id === \"\") {\n    return id;\n  } else if (id === '-') {\n    return undefined;\n  } else if (id.substr(0, 1) === '-') {\n    return id.substr(1);\n  } else if (id.substr(0, 1) === '~') {\n    return JSON.parse(id.substr(1));\n  } else if (MongoID._looksLikeObjectID(id)) {\n    return new MongoID.ObjectID(id);\n  } else {\n    return id;\n  }\n};\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mongo-id'] = {}, {\n  MongoID: MongoID\n});\n\n})();\n","servePath":"/packages/mongo-id.js"}]