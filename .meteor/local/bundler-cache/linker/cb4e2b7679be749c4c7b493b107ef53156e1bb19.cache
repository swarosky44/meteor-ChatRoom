[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Accounts, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"client_main.js\":[\"./accounts_client.js\",\"./url_client.js\",\"./localstorage_token.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/client_main.js                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nexports.__esModule = true;                                                                                           //\nexports.AccountsTest = exports.AccountsClient = undefined;                                                           //\n                                                                                                                     //\nvar _accounts_client = require(\"./accounts_client.js\");                                                              // 1\n                                                                                                                     //\nvar _url_client = require(\"./url_client.js\");                                                                        // 2\n                                                                                                                     //\nrequire(\"./localstorage_token.js\");                                                                                  // 3\n                                                                                                                     //\n/**                                                                                                                  //\n * @namespace Accounts                                                                                               //\n * @summary The namespace for all client-side accounts-related methods.                                              //\n */                                                                                                                  //\nAccounts = new _accounts_client.AccountsClient();                                                                    // 9\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary A [Mongo.Collection](#collections) containing user documents.                                            //\n * @locus Anywhere                                                                                                   //\n * @type {Mongo.Collection}                                                                                          //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.users = Accounts.users;                                                                                       // 17\n                                                                                                                     //\nexports.                                                                                                             //\n// Since this file is the main module for the client version of the                                                  //\n// accounts-base package, properties of non-entry-point modules need to                                              //\n// be re-exported in order to be accessible to modules that import the                                               //\n// accounts-base package.                                                                                            //\nAccountsClient = _accounts_client.AccountsClient;                                                                    // 24\nexports.AccountsTest = _url_client.AccountsTest;                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"accounts_client.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"./accounts_common.js\",function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_client.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nexports.__esModule = true;                                                                                           //\nexports.AccountsClient = undefined;                                                                                  //\n                                                                                                                     //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                        //\n                                                                                                                     //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //\n                                                                                                                     //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                          //\n                                                                                                                     //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                 //\n                                                                                                                     //\nvar _accounts_common = require(\"./accounts_common.js\");                                                              // 1\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Constructor for the `Accounts` object on the client.                                                     //\n * @locus Client                                                                                                     //\n * @class AccountsClient                                                                                             //\n * @extends AccountsCommon                                                                                           //\n * @instancename accountsClient                                                                                      //\n * @param {Object} options an object with fields:                                                                    //\n * @param {Object} options.connection Optional DDP connection to reuse.                                              //\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.                                    //\n */                                                                                                                  //\n                                                                                                                     //\nvar AccountsClient = exports.AccountsClient = function (_AccountsCommon) {                                           //\n  (0, _inherits3[\"default\"])(AccountsClient, _AccountsCommon);                                                       //\n                                                                                                                     //\n  function AccountsClient(options) {                                                                                 // 14\n    (0, _classCallCheck3[\"default\"])(this, AccountsClient);                                                          //\n                                                                                                                     //\n    var _this = (0, _possibleConstructorReturn3[\"default\"])(this, _AccountsCommon.call(this, options));              //\n                                                                                                                     //\n    _this._loggingIn = false;                                                                                        // 17\n    _this._loggingInDeps = new Tracker.Dependency();                                                                 // 18\n                                                                                                                     //\n    _this._loginServicesHandle = _this.connection.subscribe(\"meteor.loginServiceConfiguration\");                     // 20\n                                                                                                                     //\n    _this._pageLoadLoginCallbacks = [];                                                                              // 23\n    _this._pageLoadLoginAttemptInfo = null;                                                                          // 24\n                                                                                                                     //\n    // Defined in url_client.js.                                                                                     //\n    _this._initUrlMatching();                                                                                        // 14\n                                                                                                                     //\n    // Defined in localstorage_token.js.                                                                             //\n    _this._initLocalStorage();                                                                                       // 14\n    return _this;                                                                                                    //\n  }                                                                                                                  //\n                                                                                                                     //\n  ///                                                                                                                //\n  /// CURRENT USER                                                                                                   //\n  ///                                                                                                                //\n                                                                                                                     //\n  // @override                                                                                                       //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.userId = function () {                                                                    // 13\n    function userId() {                                                                                              //\n      return this.connection.userId();                                                                               // 39\n    }                                                                                                                //\n                                                                                                                     //\n    return userId;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  // This is mostly just called within this file, but Meteor.loginWithPassword                                       //\n  // also uses it to make loggingIn() be true during the beginPasswordExchange                                       //\n  // method call too.                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype._setLoggingIn = function () {                                                             // 13\n    function _setLoggingIn(x) {                                                                                      //\n      if (this._loggingIn !== x) {                                                                                   // 46\n        this._loggingIn = x;                                                                                         // 47\n        this._loggingInDeps.changed();                                                                               // 48\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _setLoggingIn;                                                                                            //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.loggingIn = function () {                                                                 // 13\n    function loggingIn() {                                                                                           //\n      this._loggingInDeps.depend();                                                                                  // 57\n      return this._loggingIn;                                                                                        // 58\n    }                                                                                                                //\n                                                                                                                     //\n    return loggingIn;                                                                                                //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Log the user out.                                                                                      //\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.logout = function () {                                                                    // 13\n    function logout(callback) {                                                                                      //\n      var self = this;                                                                                               // 67\n      self.connection.apply('logout', [], {                                                                          // 68\n        wait: true                                                                                                   // 69\n      }, function (error, result) {                                                                                  //\n        if (error) {                                                                                                 // 71\n          callback && callback(error);                                                                               // 72\n        } else {                                                                                                     //\n          self.makeClientLoggedOut();                                                                                // 74\n          callback && callback();                                                                                    // 75\n        }                                                                                                            //\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return logout;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.logoutOtherClients = function () {                                                        // 13\n    function logoutOtherClients(callback) {                                                                          //\n      var self = this;                                                                                               // 86\n                                                                                                                     //\n      // We need to make two method calls: one to replace our current token,                                         //\n      // and another to remove all tokens except the current one. We want to                                         //\n      // call these two methods one after the other, without any other                                               //\n      // methods running between them. For example, we don't want `logout`                                           //\n      // to be called in between our two method calls (otherwise the second                                          //\n      // method call would return an error). Another example: we don't want                                          //\n      // logout to be called before the callback for `getNewToken`;                                                  //\n      // otherwise we would momentarily log the user out and then write a                                            //\n      // new token to localStorage.                                                                                  //\n      //                                                                                                             //\n      // To accomplish this, we make both calls as wait methods, and queue                                           //\n      // them one after the other, without spinning off the event loop in                                            //\n      // between. Even though we queue `removeOtherTokens` before                                                    //\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call                                          //\n      // until the `getNewToken` callback has finished running, because they                                         //\n      // are both wait methods.                                                                                      //\n      self.connection.apply('getNewToken', [], { wait: true }, function (err, result) {                              // 85\n        if (!err) {                                                                                                  // 109\n          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);                                   // 110\n        }                                                                                                            //\n      });                                                                                                            //\n                                                                                                                     //\n      self.connection.apply('removeOtherTokens', [], { wait: true }, function (err) {                                // 119\n        callback && callback(err);                                                                                   // 124\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return logoutOtherClients;                                                                                       //\n  }();                                                                                                               //\n                                                                                                                     //\n  return AccountsClient;                                                                                             //\n}(_accounts_common.AccountsCommon);                                                                                  //\n                                                                                                                     //\n;                                                                                                                    // 128\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 130\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client                                                                                                     //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.loggingIn = function () {                                                                                     // 137\n  return Accounts.loggingIn();                                                                                       // 138\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// LOGIN METHODS                                                                                                    //\n///                                                                                                                  //\n                                                                                                                     //\n// Call a login method on the server.                                                                                //\n//                                                                                                                   //\n// A login method is a method which on success calls `this.setUserId(id)` and                                        //\n// `Accounts._setLoginToken` on the server and returns an object with fields                                         //\n// 'id' (containing the user id), 'token' (containing a resume token), and                                           //\n// optionally `tokenExpires`.                                                                                        //\n//                                                                                                                   //\n// This function takes care of:                                                                                      //\n//   - Updating the Meteor.loggingIn() reactive data source                                                          //\n//   - Calling the method in 'wait' mode                                                                             //\n//   - On success, saving the resume token to localStorage                                                           //\n//   - On success, calling Accounts.connection.setUserId()                                                           //\n//   - Setting up an onReconnect handler which logs in with                                                          //\n//     the resume token                                                                                              //\n//                                                                                                                   //\n// Options:                                                                                                          //\n// - methodName: The method to call (default 'login')                                                                //\n// - methodArguments: The arguments for the method                                                                   //\n// - validateResult: If provided, will be called with the result of the                                              //\n//                 method. If it throws, the client will not be logged in (and                                       //\n//                 its error will be passed to the callback).                                                        //\n// - userCallback: Will be called with no arguments once the user is fully                                           //\n//                 logged in, or with the error on error.                                                            //\n//                                                                                                                   //\nAp.callLoginMethod = function (options) {                                                                            // 169\n  var self = this;                                                                                                   // 170\n                                                                                                                     //\n  options = _.extend({                                                                                               // 172\n    methodName: 'login',                                                                                             // 173\n    methodArguments: [{}],                                                                                           // 174\n    _suppressLoggingIn: false                                                                                        // 175\n  }, options);                                                                                                       //\n                                                                                                                     //\n  // Set defaults for callback arguments to no-op functions; make sure we                                            //\n  // override falsey values too.                                                                                     //\n  _.each(['validateResult', 'userCallback'], function (f) {                                                          // 169\n    if (!options[f]) options[f] = function () {};                                                                    // 181\n  });                                                                                                                //\n                                                                                                                     //\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.                                              //\n  var loginCallbacks = _.once(function (error) {                                                                     // 169\n    if (!error) {                                                                                                    // 187\n      self._onLoginHook.each(function (callback) {                                                                   // 188\n        callback();                                                                                                  // 189\n        return true;                                                                                                 // 190\n      });                                                                                                            //\n    } else {                                                                                                         //\n      self._onLoginFailureHook.each(function (callback) {                                                            // 193\n        callback();                                                                                                  // 194\n        return true;                                                                                                 // 195\n      });                                                                                                            //\n    }                                                                                                                //\n    options.userCallback.apply(this, arguments);                                                                     // 198\n  });                                                                                                                //\n                                                                                                                     //\n  var reconnected = false;                                                                                           // 201\n                                                                                                                     //\n  // We want to set up onReconnect as soon as we get a result token back from                                        //\n  // the server, without having to wait for subscriptions to rerun. This is                                          //\n  // because if we disconnect and reconnect between getting the result and                                           //\n  // getting the results of subscription rerun, we WILL NOT re-send this                                             //\n  // method (because we never re-send methods whose results we've received)                                          //\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"                                            //\n  // time. This will lead to makeClientLoggedIn(result.id) even though we                                            //\n  // haven't actually sent a login method!                                                                           //\n  //                                                                                                                 //\n  // But by making sure that we send this \"resume\" login in that case (and                                           //\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate                                         //\n  // client-side userId. (It's important that livedata_connection guarantees                                         //\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback                                          //\n  // will occur before the callback from the resume login call.)                                                     //\n  var onResultReceived = function onResultReceived(err, result) {                                                    // 169\n    if (err || !result || !result.token) {                                                                           // 218\n      // Leave onReconnect alone if there was an error, so that if the user was                                      //\n      // already logged in they will still get logged in on reconnect.                                               //\n      // See issue #4970.                                                                                            //\n    } else {                                                                                                         //\n        self.connection.onReconnect = function () {                                                                  // 223\n          reconnected = true;                                                                                        // 224\n          // If our token was updated in storage, use the latest one.                                                //\n          var storedToken = self._storedLoginToken();                                                                // 223\n          if (storedToken) {                                                                                         // 227\n            result = {                                                                                               // 228\n              token: storedToken,                                                                                    // 229\n              tokenExpires: self._storedLoginTokenExpires()                                                          // 230\n            };                                                                                                       //\n          }                                                                                                          //\n          if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());                         // 233\n          if (self._tokenExpiresSoon(result.tokenExpires)) {                                                         // 235\n            self.makeClientLoggedOut();                                                                              // 236\n          } else {                                                                                                   //\n            self.callLoginMethod({                                                                                   // 238\n              methodArguments: [{ resume: result.token }],                                                           // 239\n              // Reconnect quiescence ensures that the user doesn't see an                                           //\n              // intermediate state before the login method finishes. So we don't                                    //\n              // need to show a logging-in animation.                                                                //\n              _suppressLoggingIn: true,                                                                              // 243\n              userCallback: function () {                                                                            // 244\n                function userCallback(error) {                                                                       // 244\n                  var storedTokenNow = self._storedLoginToken();                                                     // 245\n                  if (error) {                                                                                       // 246\n                    // If we had a login error AND the current stored token is the                                   //\n                    // one that we tried to log in with, then declare ourselves                                      //\n                    // logged out. If there's a token in storage but it's not the                                    //\n                    // token that we tried to log in with, we don't know anything                                    //\n                    // about whether that token is valid or not, so do nothing. The                                  //\n                    // periodic localStorage poll will decide if we are logged in or                                 //\n                    // out with this token, if it hasn't already. Of course, even                                    //\n                    // with this check, another tab could insert a new valid token                                   //\n                    // immediately before we clear localStorage here, which would                                    //\n                    // lead to both tabs being logged out, but by checking the token                                 //\n                    // in storage right now we hope to make that unlikely to happen.                                 //\n                    //                                                                                               //\n                    // If there is no token in storage right now, we don't have to                                   //\n                    // do anything; whatever code removed the token from storage was                                 //\n                    // responsible for calling `makeClientLoggedOut()`, or the                                       //\n                    // periodic localStorage poll will call `makeClientLoggedOut`                                    //\n                    // eventually if another tab wiped the token from storage.                                       //\n                    if (storedTokenNow && storedTokenNow === result.token) {                                         // 264\n                      self.makeClientLoggedOut();                                                                    // 265\n                    }                                                                                                //\n                  }                                                                                                  //\n                  // Possibly a weird callback to call, but better than nothing if                                   //\n                  // there is a reconnect between \"login result received\" and \"data                                  //\n                  // ready\".                                                                                         //\n                  loginCallbacks(error);                                                                             // 244\n                }                                                                                                    //\n                                                                                                                     //\n                return userCallback;                                                                                 //\n              }() });                                                                                                //\n          }                                                                                                          //\n        };                                                                                                           //\n      }                                                                                                              //\n  };                                                                                                                 //\n                                                                                                                     //\n  // This callback is called once the local cache of the current-user                                                //\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to                                        //\n  // date.                                                                                                           //\n  var loggedInAndDataReadyCallback = function loggedInAndDataReadyCallback(error, result) {                          // 169\n    // If the login method returns its result but the connection is lost                                             //\n    // before the data is in the local cache, it'll set an onReconnect (see                                          //\n    // above). The onReconnect will try to log in using the token, and *it*                                          //\n    // will call userCallback via its own version of this                                                            //\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.                                           //\n    if (reconnected) return;                                                                                         // 287\n                                                                                                                     //\n    // Note that we need to call this even if _suppressLoggingIn is true,                                            //\n    // because it could be matching a _setLoggingIn(true) from a                                                     //\n    // half-completed pre-reconnect login method.                                                                    //\n    self._setLoggingIn(false);                                                                                       // 281\n    if (error || !result) {                                                                                          // 294\n      error = error || new Error(\"No result from call to \" + options.methodName);                                    // 295\n      loginCallbacks(error);                                                                                         // 297\n      return;                                                                                                        // 298\n    }                                                                                                                //\n    try {                                                                                                            // 300\n      options.validateResult(result);                                                                                // 301\n    } catch (e) {                                                                                                    //\n      loginCallbacks(e);                                                                                             // 303\n      return;                                                                                                        // 304\n    }                                                                                                                //\n                                                                                                                     //\n    // Make the client logged in. (The user data should already be loaded!)                                          //\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);                                           // 281\n    loginCallbacks();                                                                                                // 309\n  };                                                                                                                 //\n                                                                                                                     //\n  if (!options._suppressLoggingIn) self._setLoggingIn(true);                                                         // 312\n  self.connection.apply(options.methodName, options.methodArguments, { wait: true, onResultReceived: onResultReceived }, loggedInAndDataReadyCallback);\n};                                                                                                                   //\n                                                                                                                     //\nAp.makeClientLoggedOut = function () {                                                                               // 321\n  this._unstoreLoginToken();                                                                                         // 322\n  this.connection.setUserId(null);                                                                                   // 323\n  this.connection.onReconnect = null;                                                                                // 324\n};                                                                                                                   //\n                                                                                                                     //\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {                                                     // 327\n  this._storeLoginToken(userId, token, tokenExpires);                                                                // 328\n  this.connection.setUserId(userId);                                                                                 // 329\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Log the user out.                                                                                        //\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.logout = function (callback) {                                                                                // 338\n  return Accounts.logout(callback);                                                                                  // 339\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.logoutOtherClients = function (callback) {                                                                    // 348\n  return Accounts.logoutOtherClients(callback);                                                                      // 349\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// LOGIN SERVICES                                                                                                   //\n///                                                                                                                  //\n                                                                                                                     //\n// A reactive function returning whether the loginServiceConfiguration                                               //\n// subscription is ready. Used by accounts-ui to hide the login button                                               //\n// until we have all the configuration loaded                                                                        //\n//                                                                                                                   //\nAp.loginServicesConfigured = function () {                                                                           // 361\n  return this._loginServicesHandle.ready();                                                                          // 362\n};                                                                                                                   //\n                                                                                                                     //\n// Some login services such as the redirect login flow or the resume                                                 //\n// login handler can log the user in at page load time.  The                                                         //\n// Meteor.loginWithX functions have a callback argument, but the                                                     //\n// callback function instance won't be in memory any longer if the                                                   //\n// page was reloaded.  The `onPageLoadLogin` function allows a                                                       //\n// callback to be registered for the case where the login was                                                        //\n// initiated in a previous VM, and we now have the result of the login                                               //\n// attempt in a new VM.                                                                                              //\n                                                                                                                     //\n// Register a callback to be called if we have information about a                                                   //\n// login attempt at page load time.  Call the callback immediately if                                                //\n// we already have the page load login attempt info, otherwise stash                                                 //\n// the callback to be called if and when we do get the attempt info.                                                 //\n//                                                                                                                   //\nAp.onPageLoadLogin = function (f) {                                                                                  // 380\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 381\n    f(this._pageLoadLoginAttemptInfo);                                                                               // 382\n  } else {                                                                                                           //\n    this._pageLoadLoginCallbacks.push(f);                                                                            // 384\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\n// Receive the information about the login attempt at page load time.                                                //\n// Call registered callbacks, and also record the info in case                                                       //\n// someone's callback hasn't been registered yet.                                                                    //\n//                                                                                                                   //\nAp._pageLoadLogin = function (attemptInfo) {                                                                         // 393\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 394\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");                                     // 395\n    return;                                                                                                          // 396\n  }                                                                                                                  //\n                                                                                                                     //\n  _.each(this._pageLoadLoginCallbacks, function (callback) {                                                         // 399\n    callback(attemptInfo);                                                                                           // 400\n  });                                                                                                                //\n                                                                                                                     //\n  this._pageLoadLoginCallbacks = [];                                                                                 // 403\n  this._pageLoadLoginAttemptInfo = attemptInfo;                                                                      // 404\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// HANDLEBARS HELPERS                                                                                               //\n///                                                                                                                  //\n                                                                                                                     //\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}                                            //\n// global helpers.                                                                                                   //\nif (Package.blaze) {                                                                                                 // 414\n  /**                                                                                                                //\n   * @global                                                                                                         //\n   * @name  currentUser                                                                                              //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {                                           // 421\n    return Meteor.user();                                                                                            // 422\n  });                                                                                                                //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @global                                                                                                         //\n   * @name  loggingIn                                                                                                //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).                                                         //\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {                                             // 414\n    return Meteor.loggingIn();                                                                                       // 432\n  });                                                                                                                //\n}                                                                                                                    //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"accounts_common.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_common.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nexports.__esModule = true;                                                                                           //\nexports.AccountsCommon = undefined;                                                                                  //\n                                                                                                                     //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Super-constructor for AccountsClient and AccountsServer.                                                 //\n * @locus Anywhere                                                                                                   //\n * @class AccountsCommon                                                                                             //\n * @instancename accountsClientOrServer                                                                              //\n * @param options {Object} an object with fields:                                                                    //\n * - connection {Object} Optional DDP connection to reuse.                                                           //\n * - ddpUrl {String} Optional URL for creating a new DDP connection.                                                 //\n */                                                                                                                  //\n                                                                                                                     //\nvar AccountsCommon = exports.AccountsCommon = function () {                                                          //\n  function AccountsCommon(options) {                                                                                 // 11\n    (0, _classCallCheck3[\"default\"])(this, AccountsCommon);                                                          //\n                                                                                                                     //\n    // Currently this is read directly by packages like accounts-password                                            //\n    // and accounts-ui-unstyled.                                                                                     //\n    this._options = {};                                                                                              // 14\n                                                                                                                     //\n    // Note that setting this.connection = null causes this.users to be a                                            //\n    // LocalCollection, which is not what we want.                                                                   //\n    this.connection = undefined;                                                                                     // 11\n    this._initConnection(options || {});                                                                             // 19\n                                                                                                                     //\n    // There is an allow call in accounts_server.js that restricts writes to                                         //\n    // this collection.                                                                                              //\n    this.users = new Mongo.Collection(\"users\", {                                                                     // 11\n      _preventAutopublish: true,                                                                                     // 24\n      connection: this.connection                                                                                    // 25\n    });                                                                                                              //\n                                                                                                                     //\n    // Callback exceptions are printed with Meteor._debug and ignored.                                               //\n    this._onLoginHook = new Hook({                                                                                   // 11\n      bindEnvironment: false,                                                                                        // 30\n      debugPrintExceptions: \"onLogin callback\"                                                                       // 31\n    });                                                                                                              //\n                                                                                                                     //\n    this._onLoginFailureHook = new Hook({                                                                            // 34\n      bindEnvironment: false,                                                                                        // 35\n      debugPrintExceptions: \"onLoginFailure callback\"                                                                // 36\n    });                                                                                                              //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                    //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.userId = function () {                                                                    // 10\n    function userId() {                                                                                              //\n      throw new Error(\"userId method not implemented\");                                                              // 45\n    }                                                                                                                //\n                                                                                                                     //\n    return userId;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.user = function () {                                                                      // 10\n    function user() {                                                                                                //\n      var userId = this.userId();                                                                                    // 53\n      return userId ? this.users.findOne(userId) : null;                                                             // 54\n    }                                                                                                                //\n                                                                                                                     //\n    return user;                                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  // Set up config for the accounts system. Call this on both the client                                             //\n  // and the server.                                                                                                 //\n  //                                                                                                                 //\n  // Note that this method gets overridden on AccountsServer.prototype, but                                          //\n  // the overriding method calls the overridden method.                                                              //\n  //                                                                                                                 //\n  // XXX we should add some enforcement that this is called on both the                                              //\n  // client and the server. Otherwise, a user can                                                                    //\n  // 'forbidClientAccountCreation' only on the client and while it looks                                             //\n  // like their app is secure, the server will still accept createUser                                               //\n  // calls. https://github.com/meteor/meteor/issues/828                                                              //\n  //                                                                                                                 //\n  // @param options {Object} an object with fields:                                                                  //\n  // - sendVerificationEmail {Boolean}                                                                               //\n  //     Send email address verification emails to new users created from                                            //\n  //     client signups.                                                                                             //\n  // - forbidClientAccountCreation {Boolean}                                                                         //\n  //     Do not allow clients to create accounts directly.                                                           //\n  // - restrictCreationByEmailDomain {Function or String}                                                            //\n  //     Require created users to have an email matching the function or                                             //\n  //     having the string as domain.                                                                                //\n  // - loginExpirationInDays {Number}                                                                                //\n  //     Number of days since login until a user is logged out (login token                                          //\n  //     expires).                                                                                                   //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Set global accounts options.                                                                           //\n   * @locus Anywhere                                                                                                 //\n   * @param {Object} options                                                                                         //\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.config = function () {                                                                    // 10\n    function config(options) {                                                                                       //\n      var self = this;                                                                                               // 93\n                                                                                                                     //\n      // We don't want users to accidentally only call Accounts.config on the                                        //\n      // client, where some of the options will have partial effects (eg removing                                    //\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation                                 //\n      // is set, or redirecting Google login to a specific-domain page) without                                      //\n      // having their full effects.                                                                                  //\n      if (Meteor.isServer) {                                                                                         // 92\n        __meteor_runtime_config__.accountsConfigCalled = true;                                                       // 101\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                  //\n        // XXX would be nice to \"crash\" the client and replace the UI with an error                                  //\n        // message, but there's no trivial way to do this.                                                           //\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }                                                                                                              //\n                                                                                                                     //\n      // We need to validate the oauthSecretKey option at the time                                                   //\n      // Accounts.config is called. We also deliberately don't store the                                             //\n      // oauthSecretKey in Accounts._options.                                                                        //\n      if (_.has(options, \"oauthSecretKey\")) {                                                                        // 92\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");       // 113\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);                                 // 117\n        options = _.omit(options, \"oauthSecretKey\");                                                                 // 118\n      }                                                                                                              //\n                                                                                                                     //\n      // validate option keys                                                                                        //\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n      _.each(_.keys(options), function (key) {                                                                       // 124\n        if (!_.contains(VALID_KEYS, key)) {                                                                          // 125\n          throw new Error(\"Accounts.config: Invalid key: \" + key);                                                   // 126\n        }                                                                                                            //\n      });                                                                                                            //\n                                                                                                                     //\n      // set values in Accounts._options                                                                             //\n      _.each(VALID_KEYS, function (key) {                                                                            // 92\n        if (key in options) {                                                                                        // 132\n          if (key in self._options) {                                                                                // 133\n            throw new Error(\"Can't set `\" + key + \"` more than once\");                                               // 134\n          }                                                                                                          //\n          self._options[key] = options[key];                                                                         // 136\n        }                                                                                                            //\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return config;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Register a callback to be called after a login attempt succeeds.                                       //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called when login is successful.                                      //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.onLogin = function () {                                                                   // 10\n    function onLogin(func) {                                                                                         //\n      return this._onLoginHook.register(func);                                                                       // 147\n    }                                                                                                                //\n                                                                                                                     //\n    return onLogin;                                                                                                  //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * @summary Register a callback to be called after a login attempt fails.                                          //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called after the login has failed.                                    //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.onLoginFailure = function () {                                                            // 10\n    function onLoginFailure(func) {                                                                                  //\n      return this._onLoginFailureHook.register(func);                                                                // 156\n    }                                                                                                                //\n                                                                                                                     //\n    return onLoginFailure;                                                                                           //\n  }();                                                                                                               //\n                                                                                                                     //\n  AccountsCommon.prototype._initConnection = function () {                                                           // 10\n    function _initConnection(options) {                                                                              //\n      if (!Meteor.isClient) {                                                                                        // 160\n        return;                                                                                                      // 161\n      }                                                                                                              //\n                                                                                                                     //\n      // The connection used by the Accounts system. This is the connection                                          //\n      // that will get logged in by Meteor.login(), and this is the                                                  //\n      // connection whose login state will be reflected by Meteor.userId().                                          //\n      //                                                                                                             //\n      // It would be much preferable for this to be in accounts_client.js,                                           //\n      // but it has to be here because it's needed to create the                                                     //\n      // Meteor.users collection.                                                                                    //\n                                                                                                                     //\n      if (options.connection) {                                                                                      // 159\n        this.connection = options.connection;                                                                        // 173\n      } else if (options.ddpUrl) {                                                                                   //\n        this.connection = DDP.connect(options.ddpUrl);                                                               // 175\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client                                          //\n        // to a different authentication server. This is for a very                                                  //\n        // particular use case that comes up when implementing a oauth                                               //\n        // server. Unsupported and may go away at any point in time.                                                 //\n        //                                                                                                           //\n        // We will eventually provide a general way to use account-base                                              //\n        // against any DDP connection, not just one special one.                                                     //\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                            // 185\n      } else {                                                                                                       //\n        this.connection = Meteor.connection;                                                                         // 188\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _initConnection;                                                                                          //\n  }();                                                                                                               //\n                                                                                                                     //\n  AccountsCommon.prototype._getTokenLifetimeMs = function () {                                                       // 10\n    function _getTokenLifetimeMs() {                                                                                 //\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;           // 193\n    }                                                                                                                //\n                                                                                                                     //\n    return _getTokenLifetimeMs;                                                                                      //\n  }();                                                                                                               //\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiration = function () {                                                          // 10\n    function _tokenExpiration(when) {                                                                                //\n      // We pass when through the Date constructor for backwards compatibility;                                      //\n      // `when` used to be a number.                                                                                 //\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                        // 200\n    }                                                                                                                //\n                                                                                                                     //\n    return _tokenExpiration;                                                                                         //\n  }();                                                                                                               //\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiresSoon = function () {                                                         // 10\n    function _tokenExpiresSoon(when) {                                                                               //\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                           // 204\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                     // 205\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                        // 206\n      return new Date() > new Date(when) - minLifetimeMs;                                                            // 208\n    }                                                                                                                //\n                                                                                                                     //\n    return _tokenExpiresSoon;                                                                                        //\n  }();                                                                                                               //\n                                                                                                                     //\n  return AccountsCommon;                                                                                             //\n}();                                                                                                                 //\n                                                                                                                     //\nvar Ap = AccountsCommon.prototype;                                                                                   // 212\n                                                                                                                     //\n// Note that Accounts is defined separately in accounts_client.js and                                                //\n// accounts_server.js.                                                                                               //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                      //\n * @locus Anywhere but publish functions                                                                             //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.userId = function () {                                                                                        // 222\n  return Accounts.userId();                                                                                          // 223\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                  //\n * @locus Anywhere but publish functions                                                                             //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.user = function () {                                                                                          // 231\n  return Accounts.user();                                                                                            // 232\n};                                                                                                                   //\n                                                                                                                     //\n// how long (in days) until a login token expires                                                                    //\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;                                                                              // 236\n// Clients don't try to auto-login with a token that is going to expire within                                       //\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                        //\n// Tries to avoid abrupt disconnects from expiring tokens.                                                           //\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                  // 240\n// how often (in milliseconds) we check for expired tokens                                                           //\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                                // 242\n// how long we wait before logging out clients when Meteor.logoutOtherClients is                                     //\n// called                                                                                                            //\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;                                                                               // 245\n                                                                                                                     //\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility                              //\nMeteor.startup(function () {                                                                                         // 248\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                  // 249\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                                // 251\n  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                                 // 252\n});                                                                                                                  //\n                                                                                                                     //\n// Thrown when the user cancels the login process (eg, closes an oauth                                               //\n// popup, declines retina scan, etc)                                                                                 //\nvar lceName = 'Accounts.LoginCancelledError';                                                                        // 257\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                      // 258\n  this.message = description;                                                                                        // 261\n});                                                                                                                  //\nAp.LoginCancelledError.prototype.name = lceName;                                                                     // 264\n                                                                                                                     //\n// This is used to transmit specific subclass errors over the wire. We should                                        //\n// come up with a more generic way to do this (eg, with some sort of symbolic                                        //\n// error code rather than a number).                                                                                 //\nAp.LoginCancelledError.numericError = 0x8acdc2f;                                                                     // 269\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"localstorage_token.js\":[\"./accounts_client.js\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/localstorage_token.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _accounts_client = require(\"./accounts_client.js\");                                                              // 1\n                                                                                                                     //\nvar Ap = _accounts_client.AccountsClient.prototype;                                                                  // 2\n                                                                                                                     //\n// This file deals with storing a login token and user id in the                                                     //\n// browser's localStorage facility. It polls local storage every few                                                 //\n// seconds to synchronize login state between multiple tabs in the same                                              //\n// browser.                                                                                                          //\n                                                                                                                     //\n// Login with a Meteor access token. This is the only public function                                                //\n// here.                                                                                                             //\nMeteor.loginWithToken = function (token, callback) {                                                                 // 11\n  return Accounts.loginWithToken(token, callback);                                                                   // 12\n};                                                                                                                   //\n                                                                                                                     //\nAp.loginWithToken = function (token, callback) {                                                                     // 15\n  this.callLoginMethod({                                                                                             // 16\n    methodArguments: [{                                                                                              // 17\n      resume: token                                                                                                  // 18\n    }],                                                                                                              //\n    userCallback: callback                                                                                           // 20\n  });                                                                                                                //\n};                                                                                                                   //\n                                                                                                                     //\n// Semi-internal API. Call this function to re-enable auto login after                                               //\n// if it was disabled at startup.                                                                                    //\nAp._enableAutoLogin = function () {                                                                                  // 26\n  this._autoLoginEnabled = true;                                                                                     // 27\n  this._pollStoredLoginToken();                                                                                      // 28\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// STORING                                                                                                          //\n///                                                                                                                  //\n                                                                                                                     //\n// Call this from the top level of the test file for any test that does                                              //\n// logging in and out, to protect multiple tabs running the same tests                                               //\n// simultaneously from interfering with each others' localStorage.                                                   //\nAp._isolateLoginTokenForTest = function () {                                                                         // 39\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();                                                         // 40\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();                                                                 // 41\n};                                                                                                                   //\n                                                                                                                     //\nAp._storeLoginToken = function (userId, token, tokenExpires) {                                                       // 44\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);                                                            // 45\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);                                                         // 46\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());                                               // 47\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);                                          // 49\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 //\n  // connect a second time                                                                                           //\n  this._lastLoginTokenWhenPolled = token;                                                                            // 44\n};                                                                                                                   //\n                                                                                                                     //\nAp._unstoreLoginToken = function () {                                                                                // 56\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);                                                                 // 57\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);                                                             // 58\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                     // 59\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 //\n  // connect a second time                                                                                           //\n  this._lastLoginTokenWhenPolled = null;                                                                             // 56\n};                                                                                                                   //\n                                                                                                                     //\n// This is private, but it is exported for now because it is used by a                                               //\n// test in accounts-password.                                                                                        //\n//                                                                                                                   //\nAp._storedLoginToken = function () {                                                                                 // 69\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);                                                         // 70\n};                                                                                                                   //\n                                                                                                                     //\nAp._storedLoginTokenExpires = function () {                                                                          // 73\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                 // 74\n};                                                                                                                   //\n                                                                                                                     //\nAp._storedUserId = function () {                                                                                     // 77\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);                                                             // 78\n};                                                                                                                   //\n                                                                                                                     //\nAp._unstoreLoginTokenIfExpiresSoon = function () {                                                                   // 81\n  var tokenExpires = this._storedLoginTokenExpires();                                                                // 82\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {                                              // 83\n    this._unstoreLoginToken();                                                                                       // 84\n  }                                                                                                                  //\n};                                                                                                                   //\n                                                                                                                     //\n///                                                                                                                  //\n/// AUTO-LOGIN                                                                                                       //\n///                                                                                                                  //\n                                                                                                                     //\nAp._initLocalStorage = function () {                                                                                 // 92\n  var self = this;                                                                                                   // 93\n                                                                                                                     //\n  // Key names to use in localStorage                                                                                //\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";                                                                        // 92\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";                                                         // 97\n  self.USER_ID_KEY = \"Meteor.userId\";                                                                                // 98\n                                                                                                                     //\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                            // 100\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {                                                  // 101\n    // We want to keep using the same keys for existing apps that do not                                             //\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have                                           //\n    // to log in again after an app updates to a version of Meteor that                                              //\n    // contains this code, but it's generally preferable to namespace the                                            //\n    // keys so that connections from distinct apps to distinct DDP URLs                                              //\n    // will be distinct in Meteor._localStorage.                                                                     //\n    var namespace = \":\" + this.connection._stream.rawUrl;                                                            // 108\n    if (rootUrlPathPrefix) {                                                                                         // 109\n      namespace += \":\" + rootUrlPathPrefix;                                                                          // 110\n    }                                                                                                                //\n    self.LOGIN_TOKEN_KEY += namespace;                                                                               // 112\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;                                                                       // 113\n    self.USER_ID_KEY += namespace;                                                                                   // 114\n  }                                                                                                                  //\n                                                                                                                     //\n  if (self._autoLoginEnabled) {                                                                                      // 117\n    // Immediately try to log in via local storage, so that any DDP                                                  //\n    // messages are sent after we have established our user account                                                  //\n    self._unstoreLoginTokenIfExpiresSoon();                                                                          // 120\n    var token = self._storedLoginToken();                                                                            // 121\n    if (token) {                                                                                                     // 122\n      // On startup, optimistically present us as logged in while the                                                //\n      // request is in flight. This reduces page flicker on startup.                                                 //\n      var userId = self._storedUserId();                                                                             // 125\n      userId && self.connection.setUserId(userId);                                                                   // 126\n      self.loginWithToken(token, function (err) {                                                                    // 127\n        if (err) {                                                                                                   // 128\n          Meteor._debug(\"Error logging in with token: \" + err);                                                      // 129\n          self.makeClientLoggedOut();                                                                                // 130\n        }                                                                                                            //\n                                                                                                                     //\n        self._pageLoadLogin({                                                                                        // 133\n          type: \"resume\",                                                                                            // 134\n          allowed: !err,                                                                                             // 135\n          error: err,                                                                                                // 136\n          methodName: \"login\",                                                                                       // 137\n          // XXX This is duplicate code with loginWithToken, but                                                     //\n          // loginWithToken can also be called at other times besides                                                //\n          // page load.                                                                                              //\n          methodArguments: [{ resume: token }]                                                                       // 141\n        });                                                                                                          //\n      });                                                                                                            //\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  // Poll local storage every 3 seconds to login if someone logged in in                                             //\n  // another tab                                                                                                     //\n  self._lastLoginTokenWhenPolled = token;                                                                            // 92\n                                                                                                                     //\n  if (self._pollIntervalTimer) {                                                                                     // 151\n    // Unlikely that _initLocalStorage will be called more than once for                                             //\n    // the same AccountsClient instance, but just in case...                                                         //\n    clearInterval(self._pollIntervalTimer);                                                                          // 154\n  }                                                                                                                  //\n                                                                                                                     //\n  self._pollIntervalTimer = setInterval(function () {                                                                // 157\n    self._pollStoredLoginToken();                                                                                    // 158\n  }, 3000);                                                                                                          //\n};                                                                                                                   //\n                                                                                                                     //\nAp._pollStoredLoginToken = function () {                                                                             // 162\n  var self = this;                                                                                                   // 163\n                                                                                                                     //\n  if (!self._autoLoginEnabled) {                                                                                     // 165\n    return;                                                                                                          // 166\n  }                                                                                                                  //\n                                                                                                                     //\n  var currentLoginToken = self._storedLoginToken();                                                                  // 169\n                                                                                                                     //\n  // != instead of !== just to make sure undefined and null are treated the same                                     //\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {                                                         // 162\n    if (currentLoginToken) {                                                                                         // 173\n      self.loginWithToken(currentLoginToken, function (err) {                                                        // 174\n        if (err) {                                                                                                   // 175\n          self.makeClientLoggedOut();                                                                                // 176\n        }                                                                                                            //\n      });                                                                                                            //\n    } else {                                                                                                         //\n      self.logout();                                                                                                 // 180\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  self._lastLoginTokenWhenPolled = currentLoginToken;                                                                // 184\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"url_client.js\":[\"./accounts_client.js\",function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/url_client.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nexports.__esModule = true;                                                                                           //\nexports.AccountsTest = undefined;                                                                                    //\n                                                                                                                     //\nvar _accounts_client = require(\"./accounts_client.js\");                                                              // 1\n                                                                                                                     //\nvar Ap = _accounts_client.AccountsClient.prototype;                                                                  // 3\n                                                                                                                     //\n// All of the special hash URLs we support for accounts interactions                                                 //\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];                                            // 6\n                                                                                                                     //\nvar savedHash = window.location.hash;                                                                                // 8\n                                                                                                                     //\nAp._initUrlMatching = function () {                                                                                  // 10\n  // By default, allow the autologin process to happen.                                                              //\n  this._autoLoginEnabled = true;                                                                                     // 12\n                                                                                                                     //\n  // We only support one callback per URL.                                                                           //\n  this._accountsCallbacks = {};                                                                                      // 10\n                                                                                                                     //\n  // Try to match the saved value of window.location.hash.                                                           //\n  this._attemptToMatchHash();                                                                                        // 10\n};                                                                                                                   //\n                                                                                                                     //\n// Separate out this functionality for testing                                                                       //\n                                                                                                                     //\nAp._attemptToMatchHash = function () {                                                                               // 23\n  _attemptToMatchHash(this, savedHash, defaultSuccessHandler);                                                       // 24\n};                                                                                                                   //\n                                                                                                                     //\n// Note that both arguments are optional and are currently only passed by                                            //\n// accounts_url_tests.js.                                                                                            //\nfunction _attemptToMatchHash(accounts, hash, success) {                                                              // 29\n  _.each(accountsPaths, function (urlPart) {                                                                         // 30\n    var token;                                                                                                       // 31\n                                                                                                                     //\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");                                                   // 33\n    var match = hash.match(tokenRegex);                                                                              // 34\n                                                                                                                     //\n    if (match) {                                                                                                     // 36\n      token = match[1];                                                                                              // 37\n                                                                                                                     //\n      // XXX COMPAT WITH 0.9.3                                                                                       //\n      if (urlPart === \"reset-password\") {                                                                            // 36\n        accounts._resetPasswordToken = token;                                                                        // 41\n      } else if (urlPart === \"verify-email\") {                                                                       //\n        accounts._verifyEmailToken = token;                                                                          // 43\n      } else if (urlPart === \"enroll-account\") {                                                                     //\n        accounts._enrollAccountToken = token;                                                                        // 45\n      }                                                                                                              //\n    } else {                                                                                                         //\n      return;                                                                                                        // 48\n    }                                                                                                                //\n                                                                                                                     //\n    // If no handlers match the hash, then maybe it's meant to be consumed                                           //\n    // by some entirely different code, so we only clear it the first time                                           //\n    // a handler successfully matches. Note that later handlers reuse the                                            //\n    // savedHash, so clearing window.location.hash here will not interfere                                           //\n    // with their needs.                                                                                             //\n    window.location.hash = \"\";                                                                                       // 30\n                                                                                                                     //\n    // Do some stuff with the token we matched                                                                       //\n    success.call(accounts, token, urlPart);                                                                          // 30\n  });                                                                                                                //\n}                                                                                                                    //\n                                                                                                                     //\nfunction defaultSuccessHandler(token, urlPart) {                                                                     // 63\n  var self = this;                                                                                                   // 64\n                                                                                                                     //\n  // put login in a suspended state to wait for the interaction to finish                                            //\n  self._autoLoginEnabled = false;                                                                                    // 63\n                                                                                                                     //\n  // wait for other packages to register callbacks                                                                   //\n  Meteor.startup(function () {                                                                                       // 63\n    // if a callback has been registered for this kind of token, call it                                             //\n    if (self._accountsCallbacks[urlPart]) {                                                                          // 72\n      self._accountsCallbacks[urlPart](token, function () {                                                          // 73\n        self._enableAutoLogin();                                                                                     // 74\n      });                                                                                                            //\n    }                                                                                                                //\n  });                                                                                                                //\n}                                                                                                                    //\n                                                                                                                     //\n// Export for testing                                                                                                //\nvar AccountsTest = exports.AccountsTest = {                                                                          // 81\n  attemptToMatchHash: function () {                                                                                  // 82\n    function attemptToMatchHash(hash, success) {                                                                     // 82\n      return _attemptToMatchHash(Accounts, hash, success);                                                           // 83\n    }                                                                                                                //\n                                                                                                                     //\n    return attemptToMatchHash;                                                                                       //\n  }()                                                                                                                //\n};                                                                                                                   //\n                                                                                                                     //\n// XXX these should be moved to accounts-password eventually. Right now                                              //\n// this is prevented by the need to set autoLoginEnabled=false, but in                                               //\n// some bright future we won't need to do that anymore.                                                              //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when a reset password link is clicked                                        //\n * in an email sent by                                                                                               //\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).                                            //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onResetPasswordLink                                                                                         //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword).                                                              //\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal                             //\n * login process is suspended until this function is called, so that the                                             //\n * password for user A can be reset even if user B was logged in.                                                    //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onResetPasswordLink = function (callback) {                                                                       // 108\n  if (this._accountsCallbacks[\"reset-password\"]) {                                                                   // 109\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"reset-password\"] = callback;                                                              // 114\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when an email verification link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).                                              //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEmailVerificationLink                                                                                     //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: An email verification token that can be passed to                                                     //\n * [`Accounts.verifyEmail`](#accounts_verifyemail).                                                                  //\n * 2. `done`: A function to call when the email verification UI flow is complete.                                    //\n * The normal login process is suspended until this function is called, so                                           //\n * that the user can be notified that they are verifying their email before                                          //\n * being logged in.                                                                                                  //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEmailVerificationLink = function (callback) {                                                                   // 135\n  if (this._accountsCallbacks[\"verify-email\"]) {                                                                     // 136\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"verify-email\"] = callback;                                                                // 141\n};                                                                                                                   //\n                                                                                                                     //\n/**                                                                                                                  //\n * @summary Register a function to call when an account enrollment link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).                                                  //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEnrollmentLink                                                                                            //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly                                             //\n * enrolled account a password.                                                                                      //\n * 2. `done`: A function to call when the enrollment UI flow is complete.                                            //\n * The normal login process is suspended until this function is called, so that                                      //\n * user A can be enrolled even if user B was logged in.                                                              //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEnrollmentLink = function (callback) {                                                                          // 162\n  if (this._accountsCallbacks[\"enroll-account\"]) {                                                                   // 163\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  //\n                                                                                                                     //\n  this._accountsCallbacks[\"enroll-account\"] = callback;                                                              // 168\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/accounts-base/client_main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['accounts-base'] = exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["/packages/accounts-base/client_main.js","/packages/accounts-base/accounts_client.js","/packages/accounts-base/accounts_common.js","/packages/accounts-base/localstorage_token.js","/packages/accounts-base/url_client.js"],"names":[],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nimport {AccountsTest} from \"./url_client.js\";\nimport \"./localstorage_token.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the client version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsClient,\n  AccountsTest,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = false;\n    this._loggingInDeps = new Tracker.Dependency;\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    if (this._loggingIn !== x) {\n      this._loggingIn = x;\n      this._loggingInDeps.changed();\n    }\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    this._loggingInDeps.depend();\n    return this._loggingIn;\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function (error) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    }\n    options.userCallback.apply(this, arguments);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      self.connection.onReconnect = function () {\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks(error);\n            }});\n        }\n      };\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks(error);\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks(e);\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks();\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this.connection.onReconnect = null;\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n}\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]}}]