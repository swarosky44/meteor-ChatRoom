[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar SHA256;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/sha/sha256.js                                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/// METEOR WRAPPER                                                                                            // 1\n//                                                                                                            // 2\nSHA256 = (function () {                                                                                       // 3\n                                                                                                              // 4\n                                                                                                              // 5\n/**                                                                                                           // 6\n*                                                                                                             // 7\n*  Secure Hash Algorithm (SHA256)                                                                             // 8\n*  http://www.webtoolkit.info/javascript-sha256.html                                                          // 9\n*  http://anmar.eu.org/projects/jssha2/                                                                       // 10\n*                                                                                                             // 11\n*  Original code by Angel Marin, Paul Johnston.                                                               // 12\n*                                                                                                             // 13\n**/                                                                                                           // 14\n                                                                                                              // 15\nfunction SHA256(s){                                                                                           // 16\n                                                                                                              // 17\n\tvar chrsz   = 8;                                                                                             // 18\n\tvar hexcase = 0;                                                                                             // 19\n                                                                                                              // 20\n\tfunction safe_add (x, y) {                                                                                   // 21\n\t\tvar lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                      // 22\n\t\tvar msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                              // 23\n\t\treturn (msw << 16) | (lsw & 0xFFFF);                                                                        // 24\n\t}                                                                                                            // 25\n                                                                                                              // 26\n\tfunction S (X, n) { return ( X >>> n ) | (X << (32 - n)); }                                                  // 27\n\tfunction R (X, n) { return ( X >>> n ); }                                                                    // 28\n\tfunction Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }                                                      // 29\n\tfunction Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }                                              // 30\n\tfunction Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }                                            // 31\n\tfunction Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }                                            // 32\n\tfunction Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }                                             // 33\n\tfunction Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }                                           // 34\n                                                                                                              // 35\n\tfunction core_sha256 (m, l) {                                                                                // 36\n\t\tvar K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);\n\t\tvar HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);\n\t\tvar W = new Array(64);                                                                                      // 39\n\t\tvar a, b, c, d, e, f, g, h, i, j;                                                                           // 40\n\t\tvar T1, T2;                                                                                                 // 41\n                                                                                                              // 42\n\t\tm[l >> 5] |= 0x80 << (24 - l % 32);                                                                         // 43\n\t\tm[((l + 64 >> 9) << 4) + 15] = l;                                                                           // 44\n                                                                                                              // 45\n\t\tfor ( var i = 0; i<m.length; i+=16 ) {                                                                      // 46\n\t\t\ta = HASH[0];                                                                                               // 47\n\t\t\tb = HASH[1];                                                                                               // 48\n\t\t\tc = HASH[2];                                                                                               // 49\n\t\t\td = HASH[3];                                                                                               // 50\n\t\t\te = HASH[4];                                                                                               // 51\n\t\t\tf = HASH[5];                                                                                               // 52\n\t\t\tg = HASH[6];                                                                                               // 53\n\t\t\th = HASH[7];                                                                                               // 54\n                                                                                                              // 55\n\t\t\tfor ( var j = 0; j<64; j++) {                                                                              // 56\n\t\t\t\tif (j < 16) W[j] = m[j + i];                                                                              // 57\n\t\t\t\telse W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);\n                                                                                                              // 59\n\t\t\t\tT1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);                    // 60\n\t\t\t\tT2 = safe_add(Sigma0256(a), Maj(a, b, c));                                                                // 61\n                                                                                                              // 62\n\t\t\t\th = g;                                                                                                    // 63\n\t\t\t\tg = f;                                                                                                    // 64\n\t\t\t\tf = e;                                                                                                    // 65\n\t\t\t\te = safe_add(d, T1);                                                                                      // 66\n\t\t\t\td = c;                                                                                                    // 67\n\t\t\t\tc = b;                                                                                                    // 68\n\t\t\t\tb = a;                                                                                                    // 69\n\t\t\t\ta = safe_add(T1, T2);                                                                                     // 70\n\t\t\t}                                                                                                          // 71\n                                                                                                              // 72\n\t\t\tHASH[0] = safe_add(a, HASH[0]);                                                                            // 73\n\t\t\tHASH[1] = safe_add(b, HASH[1]);                                                                            // 74\n\t\t\tHASH[2] = safe_add(c, HASH[2]);                                                                            // 75\n\t\t\tHASH[3] = safe_add(d, HASH[3]);                                                                            // 76\n\t\t\tHASH[4] = safe_add(e, HASH[4]);                                                                            // 77\n\t\t\tHASH[5] = safe_add(f, HASH[5]);                                                                            // 78\n\t\t\tHASH[6] = safe_add(g, HASH[6]);                                                                            // 79\n\t\t\tHASH[7] = safe_add(h, HASH[7]);                                                                            // 80\n\t\t}                                                                                                           // 81\n\t\treturn HASH;                                                                                                // 82\n\t}                                                                                                            // 83\n                                                                                                              // 84\n\tfunction str2binb (str) {                                                                                    // 85\n\t\tvar bin = Array();                                                                                          // 86\n\t\tvar mask = (1 << chrsz) - 1;                                                                                // 87\n\t\tfor(var i = 0; i < str.length * chrsz; i += chrsz) {                                                        // 88\n\t\t\tbin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32);                                            // 89\n\t\t}                                                                                                           // 90\n\t\treturn bin;                                                                                                 // 91\n\t}                                                                                                            // 92\n                                                                                                              // 93\n\tfunction Utf8Encode(string) {                                                                                // 94\n\t\t// METEOR change:                                                                                           // 95\n\t\t// The webtoolkit.info version of this code added this                                                      // 96\n\t\t// Utf8Encode function (which does seem necessary for dealing                                               // 97\n\t\t// with arbitrary Unicode), but the following line seems                                                    // 98\n\t\t// problematic:                                                                                             // 99\n\t\t//                                                                                                          // 100\n\t\t// string = string.replace(/\\r\\n/g,\"\\n\");                                                                   // 101\n\t\tvar utftext = \"\";                                                                                           // 102\n                                                                                                              // 103\n\t\tfor (var n = 0; n < string.length; n++) {                                                                   // 104\n                                                                                                              // 105\n\t\t\tvar c = string.charCodeAt(n);                                                                              // 106\n                                                                                                              // 107\n\t\t\tif (c < 128) {                                                                                             // 108\n\t\t\t\tutftext += String.fromCharCode(c);                                                                        // 109\n\t\t\t}                                                                                                          // 110\n\t\t\telse if((c > 127) && (c < 2048)) {                                                                         // 111\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);                                                           // 112\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);                                                           // 113\n\t\t\t}                                                                                                          // 114\n\t\t\telse {                                                                                                     // 115\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);                                                          // 116\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);                                                    // 117\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);                                                           // 118\n\t\t\t}                                                                                                          // 119\n                                                                                                              // 120\n\t\t}                                                                                                           // 121\n                                                                                                              // 122\n\t\treturn utftext;                                                                                             // 123\n\t}                                                                                                            // 124\n                                                                                                              // 125\n\tfunction binb2hex (binarray) {                                                                               // 126\n\t\tvar hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";                                            // 127\n\t\tvar str = \"\";                                                                                               // 128\n\t\tfor(var i = 0; i < binarray.length * 4; i++) {                                                              // 129\n\t\t\tstr += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +                                         // 130\n\t\t\thex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);                                                 // 131\n\t\t}                                                                                                           // 132\n\t\treturn str;                                                                                                 // 133\n\t}                                                                                                            // 134\n                                                                                                              // 135\n\ts = Utf8Encode(s);                                                                                           // 136\n\treturn binb2hex(core_sha256(str2binb(s), s.length * chrsz));                                                 // 137\n                                                                                                              // 138\n}                                                                                                             // 139\n                                                                                                              // 140\n/// METEOR WRAPPER                                                                                            // 141\nreturn SHA256;                                                                                                // 142\n})();                                                                                                         // 143\n                                                                                                              // 144\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.sha = {}, {\n  SHA256: SHA256\n});\n\n})();\n","servePath":"/packages/sha.js"}]