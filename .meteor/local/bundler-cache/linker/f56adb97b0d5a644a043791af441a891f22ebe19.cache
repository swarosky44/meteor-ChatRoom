[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar module, FastClick;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/fastclick/pre.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Define an object named module.exports. This will cause fastclick.js to put                                          // 1\n// FastClick as a field on it, instead of in the global namespace.                                                     // 2\n// See also post.js.                                                                                                   // 3\nmodule = {                                                                                                             // 4\n  exports: {}                                                                                                          // 5\n};                                                                                                                     // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/fastclick/fastclick.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\t/**                                                                                                                   // 1\n\t * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.                                   // 2\n\t *                                                                                                                    // 3\n\t * @codingstandard ftlabs-jsv2                                                                                        // 4\n\t * @copyright The Financial Times Limited [All Rights Reserved]                                                       // 5\n\t * @license MIT License (see LICENSE.txt)                                                                             // 6\n\t */                                                                                                                   // 7\n                                                                                                                       // 8\n\t/*jslint browser:true, node:true*/                                                                                    // 9\n\t/*global define, Event, Node*/                                                                                        // 10\n                                                                                                                       // 11\n                                                                                                                       // 12\n\t/**                                                                                                                   // 13\n\t * Instantiate fast-clicking listeners on the specified layer.                                                        // 14\n\t *                                                                                                                    // 15\n\t * @constructor                                                                                                       // 16\n\t * @param {Element} layer The layer to listen on                                                                      // 17\n\t * @param {Object} [options={}] The options to override the defaults                                                  // 18\n\t */                                                                                                                   // 19\n\tfunction FastClick(layer, options) {                                                                                  // 20\n    'use strict';                                                                                                      // 21\n\t\tvar oldOnClick;                                                                                                      // 22\n                                                                                                                       // 23\n\t\toptions = options || {};                                                                                             // 24\n                                                                                                                       // 25\n\t\t/**                                                                                                                  // 26\n\t\t * Whether a click is currently being tracked.                                                                       // 27\n\t\t *                                                                                                                   // 28\n\t\t * @type boolean                                                                                                     // 29\n\t\t */                                                                                                                  // 30\n\t\tthis.trackingClick = false;                                                                                          // 31\n                                                                                                                       // 32\n                                                                                                                       // 33\n\t\t/**                                                                                                                  // 34\n\t\t * Timestamp for when click tracking started.                                                                        // 35\n\t\t *                                                                                                                   // 36\n\t\t * @type number                                                                                                      // 37\n\t\t */                                                                                                                  // 38\n\t\tthis.trackingClickStart = 0;                                                                                         // 39\n                                                                                                                       // 40\n                                                                                                                       // 41\n\t\t/**                                                                                                                  // 42\n\t\t * The element being tracked for a click.                                                                            // 43\n\t\t *                                                                                                                   // 44\n\t\t * @type EventTarget                                                                                                 // 45\n\t\t */                                                                                                                  // 46\n\t\tthis.targetElement = null;                                                                                           // 47\n                                                                                                                       // 48\n                                                                                                                       // 49\n\t\t/**                                                                                                                  // 50\n\t\t * X-coordinate of touch start event.                                                                                // 51\n\t\t *                                                                                                                   // 52\n\t\t * @type number                                                                                                      // 53\n\t\t */                                                                                                                  // 54\n\t\tthis.touchStartX = 0;                                                                                                // 55\n                                                                                                                       // 56\n                                                                                                                       // 57\n\t\t/**                                                                                                                  // 58\n\t\t * Y-coordinate of touch start event.                                                                                // 59\n\t\t *                                                                                                                   // 60\n\t\t * @type number                                                                                                      // 61\n\t\t */                                                                                                                  // 62\n\t\tthis.touchStartY = 0;                                                                                                // 63\n                                                                                                                       // 64\n                                                                                                                       // 65\n\t\t/**                                                                                                                  // 66\n\t\t * ID of the last touch, retrieved from Touch.identifier.                                                            // 67\n\t\t *                                                                                                                   // 68\n\t\t * @type number                                                                                                      // 69\n\t\t */                                                                                                                  // 70\n\t\tthis.lastTouchIdentifier = 0;                                                                                        // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\n\t\t/**                                                                                                                  // 74\n\t\t * Touchmove boundary, beyond which a click will be cancelled.                                                       // 75\n\t\t *                                                                                                                   // 76\n\t\t * @type number                                                                                                      // 77\n\t\t */                                                                                                                  // 78\n\t\tthis.touchBoundary = options.touchBoundary || 10;                                                                    // 79\n                                                                                                                       // 80\n                                                                                                                       // 81\n\t\t/**                                                                                                                  // 82\n\t\t * The FastClick layer.                                                                                              // 83\n\t\t *                                                                                                                   // 84\n\t\t * @type Element                                                                                                     // 85\n\t\t */                                                                                                                  // 86\n\t\tthis.layer = layer;                                                                                                  // 87\n                                                                                                                       // 88\n\t\t/**                                                                                                                  // 89\n\t\t * The minimum time between tap(touchstart and touchend) events                                                      // 90\n\t\t *                                                                                                                   // 91\n\t\t * @type number                                                                                                      // 92\n\t\t */                                                                                                                  // 93\n\t\tthis.tapDelay = options.tapDelay || 200;                                                                             // 94\n                                                                                                                       // 95\n\t\t/**                                                                                                                  // 96\n\t\t * The maximum time for a tap                                                                                        // 97\n\t\t *                                                                                                                   // 98\n\t\t * @type number                                                                                                      // 99\n\t\t */                                                                                                                  // 100\n\t\tthis.tapTimeout = options.tapTimeout || 700;                                                                         // 101\n                                                                                                                       // 102\n\t\tif (FastClick.notNeeded(layer)) {                                                                                    // 103\n\t\t\treturn;                                                                                                             // 104\n\t\t}                                                                                                                    // 105\n                                                                                                                       // 106\n\t\t// Some old versions of Android don't have Function.prototype.bind                                                   // 107\n\t\tfunction bind(method, context) {                                                                                     // 108\n\t\t\treturn function() { return method.apply(context, arguments); };                                                     // 109\n\t\t}                                                                                                                    // 110\n                                                                                                                       // 111\n                                                                                                                       // 112\n\t\tvar methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];                  // 113\n\t\tvar context = this;                                                                                                  // 114\n\t\tfor (var i = 0, l = methods.length; i < l; i++) {                                                                    // 115\n\t\t\tcontext[methods[i]] = bind(context[methods[i]], context);                                                           // 116\n\t\t}                                                                                                                    // 117\n                                                                                                                       // 118\n\t\t// Set up event handlers as required                                                                                 // 119\n\t\tif (deviceIsAndroid) {                                                                                               // 120\n\t\t\tlayer.addEventListener('mouseover', this.onMouse, true);                                                            // 121\n\t\t\tlayer.addEventListener('mousedown', this.onMouse, true);                                                            // 122\n\t\t\tlayer.addEventListener('mouseup', this.onMouse, true);                                                              // 123\n\t\t}                                                                                                                    // 124\n                                                                                                                       // 125\n\t\tlayer.addEventListener('click', this.onClick, true);                                                                 // 126\n\t\tlayer.addEventListener('touchstart', this.onTouchStart, false);                                                      // 127\n\t\tlayer.addEventListener('touchmove', this.onTouchMove, false);                                                        // 128\n\t\tlayer.addEventListener('touchend', this.onTouchEnd, false);                                                          // 129\n\t\tlayer.addEventListener('touchcancel', this.onTouchCancel, false);                                                    // 130\n                                                                                                                       // 131\n\t\t// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)                  // 132\n\t\t// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick              // 133\n\t\t// layer when they are cancelled.                                                                                    // 134\n\t\tif (!Event.prototype.stopImmediatePropagation) {                                                                     // 135\n\t\t\tlayer.removeEventListener = function(type, callback, capture) {                                                     // 136\n\t\t\t\tvar rmv = Node.prototype.removeEventListener;                                                                      // 137\n\t\t\t\tif (type === 'click') {                                                                                            // 138\n\t\t\t\t\trmv.call(layer, type, callback.hijacked || callback, capture);                                                    // 139\n\t\t\t\t} else {                                                                                                           // 140\n\t\t\t\t\trmv.call(layer, type, callback, capture);                                                                         // 141\n\t\t\t\t}                                                                                                                  // 142\n\t\t\t};                                                                                                                  // 143\n                                                                                                                       // 144\n\t\t\tlayer.addEventListener = function(type, callback, capture) {                                                        // 145\n\t\t\t\tvar adv = Node.prototype.addEventListener;                                                                         // 146\n\t\t\t\tif (type === 'click') {                                                                                            // 147\n\t\t\t\t\tadv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {                                 // 148\n\t\t\t\t\t\tif (!event.propagationStopped) {                                                                                 // 149\n\t\t\t\t\t\t\tcallback(event);                                                                                                // 150\n\t\t\t\t\t\t}                                                                                                                // 151\n\t\t\t\t\t}), capture);                                                                                                     // 152\n\t\t\t\t} else {                                                                                                           // 153\n\t\t\t\t\tadv.call(layer, type, callback, capture);                                                                         // 154\n\t\t\t\t}                                                                                                                  // 155\n\t\t\t};                                                                                                                  // 156\n\t\t}                                                                                                                    // 157\n                                                                                                                       // 158\n\t\t// If a handler is already declared in the element's onclick attribute, it will be fired before                      // 159\n\t\t// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and                        // 160\n\t\t// adding it as listener.                                                                                            // 161\n\t\tif (typeof layer.onclick === 'function') {                                                                           // 162\n                                                                                                                       // 163\n\t\t\t// Android browser on at least 3.2 requires a new reference to the function in layer.onclick                        // 164\n\t\t\t// - the old one won't work if passed to addEventListener directly.                                                 // 165\n\t\t\toldOnClick = layer.onclick;                                                                                         // 166\n\t\t\tlayer.addEventListener('click', function(event) {                                                                   // 167\n\t\t\t\toldOnClick(event);                                                                                                 // 168\n\t\t\t}, false);                                                                                                          // 169\n\t\t\tlayer.onclick = null;                                                                                               // 170\n\t\t}                                                                                                                    // 171\n\t}                                                                                                                     // 172\n                                                                                                                       // 173\n\t/**                                                                                                                   // 174\n\t* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.                                          // 175\n\t*                                                                                                                     // 176\n\t* @type boolean                                                                                                       // 177\n\t*/                                                                                                                    // 178\n\tvar deviceIsWindowsPhone = navigator.userAgent.indexOf(\"Windows Phone\") >= 0;                                         // 179\n                                                                                                                       // 180\n\t/**                                                                                                                   // 181\n\t * Android requires exceptions.                                                                                       // 182\n\t *                                                                                                                    // 183\n\t * @type boolean                                                                                                      // 184\n\t */                                                                                                                   // 185\n\tvar deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;                            // 186\n                                                                                                                       // 187\n                                                                                                                       // 188\n\t/**                                                                                                                   // 189\n\t * iOS requires exceptions.                                                                                           // 190\n\t *                                                                                                                    // 191\n\t * @type boolean                                                                                                      // 192\n\t */                                                                                                                   // 193\n\tvar deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;                                // 194\n                                                                                                                       // 195\n                                                                                                                       // 196\n\t/**                                                                                                                   // 197\n\t * iOS 4 requires an exception for select elements.                                                                   // 198\n\t *                                                                                                                    // 199\n\t * @type boolean                                                                                                      // 200\n\t */                                                                                                                   // 201\n\tvar deviceIsIOS4 = deviceIsIOS && (/OS 4_\\d(_\\d)?/).test(navigator.userAgent);                                        // 202\n                                                                                                                       // 203\n                                                                                                                       // 204\n\t/**                                                                                                                   // 205\n\t * iOS 6.0-7.* requires the target element to be manually derived                                                     // 206\n\t *                                                                                                                    // 207\n\t * @type boolean                                                                                                      // 208\n\t */                                                                                                                   // 209\n\tvar deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\\d/).test(navigator.userAgent);                              // 210\n                                                                                                                       // 211\n\t/**                                                                                                                   // 212\n\t * BlackBerry requires exceptions.                                                                                    // 213\n\t *                                                                                                                    // 214\n\t * @type boolean                                                                                                      // 215\n\t */                                                                                                                   // 216\n\tvar deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;                                                   // 217\n                                                                                                                       // 218\n\t/**                                                                                                                   // 219\n\t * Determine whether a given element requires a native click.                                                         // 220\n\t *                                                                                                                    // 221\n\t * @param {EventTarget|Element} target Target DOM element                                                             // 222\n\t * @returns {boolean} Returns true if the element needs a native click                                                // 223\n\t */                                                                                                                   // 224\n\tFastClick.prototype.needsClick = function(target) {                                                                   // 225\n\t\tswitch (target.nodeName.toLowerCase()) {                                                                             // 226\n                                                                                                                       // 227\n\t\t// Don't send a synthetic click to disabled inputs (issue #62)                                                       // 228\n\t\tcase 'button':                                                                                                       // 229\n\t\tcase 'select':                                                                                                       // 230\n\t\tcase 'textarea':                                                                                                     // 231\n\t\t\tif (target.disabled) {                                                                                              // 232\n\t\t\t\treturn true;                                                                                                       // 233\n\t\t\t}                                                                                                                   // 234\n                                                                                                                       // 235\n\t\t\tbreak;                                                                                                              // 236\n\t\tcase 'input':                                                                                                        // 237\n                                                                                                                       // 238\n\t\t\t// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)                                           // 239\n\t\t\tif ((deviceIsIOS && target.type === 'file') || target.disabled) {                                                   // 240\n\t\t\t\treturn true;                                                                                                       // 241\n\t\t\t}                                                                                                                   // 242\n                                                                                                                       // 243\n\t\t\tbreak;                                                                                                              // 244\n\t\tcase 'label':                                                                                                        // 245\n\t\tcase 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames                                       // 246\n\t\tcase 'video':                                                                                                        // 247\n\t\t\treturn true;                                                                                                        // 248\n\t\t}                                                                                                                    // 249\n                                                                                                                       // 250\n\t\treturn (/\\bneedsclick\\b/).test(target.className);                                                                    // 251\n\t};                                                                                                                    // 252\n                                                                                                                       // 253\n                                                                                                                       // 254\n\t/**                                                                                                                   // 255\n\t * Determine whether a given element requires a call to focus to simulate click into element.                         // 256\n\t *                                                                                                                    // 257\n\t * @param {EventTarget|Element} target Target DOM element                                                             // 258\n\t * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.                  // 259\n\t */                                                                                                                   // 260\n\tFastClick.prototype.needsFocus = function(target) {                                                                   // 261\n\t\tswitch (target.nodeName.toLowerCase()) {                                                                             // 262\n\t\tcase 'textarea':                                                                                                     // 263\n\t\t\treturn true;                                                                                                        // 264\n\t\tcase 'select':                                                                                                       // 265\n\t\t\treturn !deviceIsAndroid;                                                                                            // 266\n\t\tcase 'input':                                                                                                        // 267\n\t\t\tswitch (target.type) {                                                                                              // 268\n\t\t\tcase 'button':                                                                                                      // 269\n\t\t\tcase 'checkbox':                                                                                                    // 270\n\t\t\tcase 'file':                                                                                                        // 271\n\t\t\tcase 'image':                                                                                                       // 272\n\t\t\tcase 'radio':                                                                                                       // 273\n\t\t\tcase 'submit':                                                                                                      // 274\n\t\t\t\treturn false;                                                                                                      // 275\n\t\t\t}                                                                                                                   // 276\n                                                                                                                       // 277\n\t\t\t// No point in attempting to focus disabled inputs                                                                  // 278\n\t\t\treturn !target.disabled && !target.readOnly;                                                                        // 279\n\t\tdefault:                                                                                                             // 280\n\t\t\treturn (/\\bneedsfocus\\b/).test(target.className);                                                                   // 281\n\t\t}                                                                                                                    // 282\n\t};                                                                                                                    // 283\n                                                                                                                       // 284\n                                                                                                                       // 285\n\t/**                                                                                                                   // 286\n\t * Send a click event to the specified element.                                                                       // 287\n\t *                                                                                                                    // 288\n\t * @param {EventTarget|Element} targetElement                                                                         // 289\n\t * @param {Event} event                                                                                               // 290\n\t */                                                                                                                   // 291\n\tFastClick.prototype.sendClick = function(targetElement, event) {                                                      // 292\n\t\tvar clickEvent, touch;                                                                                               // 293\n                                                                                                                       // 294\n\t\t// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)\n\t\tif (document.activeElement && document.activeElement !== targetElement) {                                            // 296\n\t\t\tdocument.activeElement.blur();                                                                                      // 297\n\t\t}                                                                                                                    // 298\n                                                                                                                       // 299\n\t\ttouch = event.changedTouches[0];                                                                                     // 300\n                                                                                                                       // 301\n\t\t// Synthesise a click event, with an extra attribute so it can be tracked                                            // 302\n\t\tclickEvent = document.createEvent('MouseEvents');                                                                    // 303\n\t\tclickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n\t\tclickEvent.forwardedTouchEvent = true;                                                                               // 305\n\t\ttargetElement.dispatchEvent(clickEvent);                                                                             // 306\n\t};                                                                                                                    // 307\n                                                                                                                       // 308\n\tFastClick.prototype.determineEventType = function(targetElement) {                                                    // 309\n                                                                                                                       // 310\n\t\t//Issue #159: Android Chrome Select Box does not open with a synthetic click event                                   // 311\n\t\tif (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {                                           // 312\n\t\t\treturn 'mousedown';                                                                                                 // 313\n\t\t}                                                                                                                    // 314\n                                                                                                                       // 315\n\t\treturn 'click';                                                                                                      // 316\n\t};                                                                                                                    // 317\n                                                                                                                       // 318\n                                                                                                                       // 319\n\t/**                                                                                                                   // 320\n\t * @param {EventTarget|Element} targetElement                                                                         // 321\n\t */                                                                                                                   // 322\n\tFastClick.prototype.focus = function(targetElement) {                                                                 // 323\n\t\tvar length;                                                                                                          // 324\n                                                                                                                       // 325\n\t\t// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.\n\t\tif (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {\n\t\t\tlength = targetElement.value.length;                                                                                // 328\n\t\t\ttargetElement.setSelectionRange(length, length);                                                                    // 329\n\t\t} else {                                                                                                             // 330\n\t\t\ttargetElement.focus();                                                                                              // 331\n\t\t}                                                                                                                    // 332\n\t};                                                                                                                    // 333\n                                                                                                                       // 334\n                                                                                                                       // 335\n\t/**                                                                                                                   // 336\n\t * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.               // 337\n\t *                                                                                                                    // 338\n\t * @param {EventTarget|Element} targetElement                                                                         // 339\n\t */                                                                                                                   // 340\n\tFastClick.prototype.updateScrollParent = function(targetElement) {                                                    // 341\n\t\tvar scrollParent, parentElement;                                                                                     // 342\n                                                                                                                       // 343\n\t\tscrollParent = targetElement.fastClickScrollParent;                                                                  // 344\n                                                                                                                       // 345\n\t\t// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the            // 346\n\t\t// target element was moved to another parent.                                                                       // 347\n\t\tif (!scrollParent || !scrollParent.contains(targetElement)) {                                                        // 348\n\t\t\tparentElement = targetElement;                                                                                      // 349\n\t\t\tdo {                                                                                                                // 350\n\t\t\t\tif (parentElement.scrollHeight > parentElement.offsetHeight) {                                                     // 351\n\t\t\t\t\tscrollParent = parentElement;                                                                                     // 352\n\t\t\t\t\ttargetElement.fastClickScrollParent = parentElement;                                                              // 353\n\t\t\t\t\tbreak;                                                                                                            // 354\n\t\t\t\t}                                                                                                                  // 355\n                                                                                                                       // 356\n\t\t\t\tparentElement = parentElement.parentElement;                                                                       // 357\n\t\t\t} while (parentElement);                                                                                            // 358\n\t\t}                                                                                                                    // 359\n                                                                                                                       // 360\n\t\t// Always update the scroll top tracker if possible.                                                                 // 361\n\t\tif (scrollParent) {                                                                                                  // 362\n\t\t\tscrollParent.fastClickLastScrollTop = scrollParent.scrollTop;                                                       // 363\n\t\t}                                                                                                                    // 364\n\t};                                                                                                                    // 365\n                                                                                                                       // 366\n                                                                                                                       // 367\n\t/**                                                                                                                   // 368\n\t * @param {EventTarget} targetElement                                                                                 // 369\n\t * @returns {Element|EventTarget}                                                                                     // 370\n\t */                                                                                                                   // 371\n\tFastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {                                         // 372\n                                                                                                                       // 373\n\t\t// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.           // 374\n\t\tif (eventTarget.nodeType === Node.TEXT_NODE) {                                                                       // 375\n\t\t\treturn eventTarget.parentNode;                                                                                      // 376\n\t\t}                                                                                                                    // 377\n                                                                                                                       // 378\n\t\treturn eventTarget;                                                                                                  // 379\n\t};                                                                                                                    // 380\n                                                                                                                       // 381\n                                                                                                                       // 382\n\t/**                                                                                                                   // 383\n\t * On touch start, record the position and scroll offset.                                                             // 384\n\t *                                                                                                                    // 385\n\t * @param {Event} event                                                                                               // 386\n\t * @returns {boolean}                                                                                                 // 387\n\t */                                                                                                                   // 388\n\tFastClick.prototype.onTouchStart = function(event) {                                                                  // 389\n\t\tvar targetElement, touch, selection;                                                                                 // 390\n                                                                                                                       // 391\n\t\t// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).\n\t\tif (event.targetTouches.length > 1) {                                                                                // 393\n\t\t\treturn true;                                                                                                        // 394\n\t\t}                                                                                                                    // 395\n                                                                                                                       // 396\n\t\ttargetElement = this.getTargetElementFromEventTarget(event.target);                                                  // 397\n\t\ttouch = event.targetTouches[0];                                                                                      // 398\n                                                                                                                       // 399\n\t\tif (deviceIsIOS) {                                                                                                   // 400\n                                                                                                                       // 401\n\t\t\t// Only trusted events will deselect text on iOS (issue #49)                                                        // 402\n\t\t\tselection = window.getSelection();                                                                                  // 403\n\t\t\tif (selection.rangeCount && !selection.isCollapsed) {                                                               // 404\n\t\t\t\treturn true;                                                                                                       // 405\n\t\t\t}                                                                                                                   // 406\n                                                                                                                       // 407\n\t\t\tif (!deviceIsIOS4) {                                                                                                // 408\n                                                                                                                       // 409\n\t\t\t\t// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):   // 410\n\t\t\t\t// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched            // 411\n\t\t\t\t// with the same identifier as the touch event that previously triggered the click that triggered the alert.       // 412\n\t\t\t\t// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an        // 413\n\t\t\t\t// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.                    // 414\n\t\t\t\t// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,\n\t\t\t\t// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,\n\t\t\t\t// random integers, it's safe to to continue if the identifier is 0 here.                                          // 417\n\t\t\t\tif (touch.identifier && touch.identifier === this.lastTouchIdentifier) {                                           // 418\n\t\t\t\t\tevent.preventDefault();                                                                                           // 419\n\t\t\t\t\treturn false;                                                                                                     // 420\n\t\t\t\t}                                                                                                                  // 421\n                                                                                                                       // 422\n\t\t\t\tthis.lastTouchIdentifier = touch.identifier;                                                                       // 423\n                                                                                                                       // 424\n\t\t\t\t// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:           // 425\n\t\t\t\t// 1) the user does a fling scroll on the scrollable layer                                                         // 426\n\t\t\t\t// 2) the user stops the fling scroll with another tap                                                             // 427\n\t\t\t\t// then the event.target of the last 'touchend' event will be the element that was under the user's finger         // 428\n\t\t\t\t// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check       // 429\n\t\t\t\t// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).            // 430\n\t\t\t\tthis.updateScrollParent(targetElement);                                                                            // 431\n\t\t\t}                                                                                                                   // 432\n\t\t}                                                                                                                    // 433\n                                                                                                                       // 434\n\t\tthis.trackingClick = true;                                                                                           // 435\n\t\tthis.trackingClickStart = event.timeStamp;                                                                           // 436\n\t\tthis.targetElement = targetElement;                                                                                  // 437\n                                                                                                                       // 438\n\t\tthis.touchStartX = touch.pageX;                                                                                      // 439\n\t\tthis.touchStartY = touch.pageY;                                                                                      // 440\n                                                                                                                       // 441\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)                                                             // 442\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {                                                        // 443\n\t\t\tevent.preventDefault();                                                                                             // 444\n\t\t}                                                                                                                    // 445\n                                                                                                                       // 446\n\t\treturn true;                                                                                                         // 447\n\t};                                                                                                                    // 448\n                                                                                                                       // 449\n                                                                                                                       // 450\n\t/**                                                                                                                   // 451\n\t * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.             // 452\n\t *                                                                                                                    // 453\n\t * @param {Event} event                                                                                               // 454\n\t * @returns {boolean}                                                                                                 // 455\n\t */                                                                                                                   // 456\n\tFastClick.prototype.touchHasMoved = function(event) {                                                                 // 457\n\t\tvar touch = event.changedTouches[0], boundary = this.touchBoundary;                                                  // 458\n                                                                                                                       // 459\n\t\tif (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {    // 460\n\t\t\treturn true;                                                                                                        // 461\n\t\t}                                                                                                                    // 462\n                                                                                                                       // 463\n\t\treturn false;                                                                                                        // 464\n\t};                                                                                                                    // 465\n                                                                                                                       // 466\n                                                                                                                       // 467\n\t/**                                                                                                                   // 468\n\t * Update the last position.                                                                                          // 469\n\t *                                                                                                                    // 470\n\t * @param {Event} event                                                                                               // 471\n\t * @returns {boolean}                                                                                                 // 472\n\t */                                                                                                                   // 473\n\tFastClick.prototype.onTouchMove = function(event) {                                                                   // 474\n\t\tif (!this.trackingClick) {                                                                                           // 475\n\t\t\treturn true;                                                                                                        // 476\n\t\t}                                                                                                                    // 477\n                                                                                                                       // 478\n\t\t// If the touch has moved, cancel the click tracking                                                                 // 479\n\t\tif (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {        // 480\n\t\t\tthis.trackingClick = false;                                                                                         // 481\n\t\t\tthis.targetElement = null;                                                                                          // 482\n\t\t}                                                                                                                    // 483\n                                                                                                                       // 484\n\t\treturn true;                                                                                                         // 485\n\t};                                                                                                                    // 486\n                                                                                                                       // 487\n                                                                                                                       // 488\n\t/**                                                                                                                   // 489\n\t * Attempt to find the labelled control for the given label element.                                                  // 490\n\t *                                                                                                                    // 491\n\t * @param {EventTarget|HTMLLabelElement} labelElement                                                                 // 492\n\t * @returns {Element|null}                                                                                            // 493\n\t */                                                                                                                   // 494\n\tFastClick.prototype.findControl = function(labelElement) {                                                            // 495\n                                                                                                                       // 496\n\t\t// Fast path for newer browsers supporting the HTML5 control attribute                                               // 497\n\t\tif (labelElement.control !== undefined) {                                                                            // 498\n\t\t\treturn labelElement.control;                                                                                        // 499\n\t\t}                                                                                                                    // 500\n                                                                                                                       // 501\n\t\t// All browsers under test that support touch events also support the HTML5 htmlFor attribute                        // 502\n\t\tif (labelElement.htmlFor) {                                                                                          // 503\n\t\t\treturn document.getElementById(labelElement.htmlFor);                                                               // 504\n\t\t}                                                                                                                    // 505\n                                                                                                                       // 506\n\t\t// If no for attribute exists, attempt to retrieve the first labellable descendant element                           // 507\n\t\t// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label                           // 508\n\t\treturn labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');\n\t};                                                                                                                    // 510\n                                                                                                                       // 511\n                                                                                                                       // 512\n\t/**                                                                                                                   // 513\n\t * On touch end, determine whether to send a click event at once.                                                     // 514\n\t *                                                                                                                    // 515\n\t * @param {Event} event                                                                                               // 516\n\t * @returns {boolean}                                                                                                 // 517\n\t */                                                                                                                   // 518\n\tFastClick.prototype.onTouchEnd = function(event) {                                                                    // 519\n\t\tvar forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;          // 520\n                                                                                                                       // 521\n\t\tif (!this.trackingClick) {                                                                                           // 522\n\t\t\treturn true;                                                                                                        // 523\n\t\t}                                                                                                                    // 524\n                                                                                                                       // 525\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)                                                             // 526\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {                                                        // 527\n\t\t\tthis.cancelNextClick = true;                                                                                        // 528\n\t\t\treturn true;                                                                                                        // 529\n\t\t}                                                                                                                    // 530\n                                                                                                                       // 531\n\t\tif ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {                                                 // 532\n\t\t\treturn true;                                                                                                        // 533\n\t\t}                                                                                                                    // 534\n                                                                                                                       // 535\n\t\t// Reset to prevent wrong click cancel on input (issue #156).                                                        // 536\n\t\tthis.cancelNextClick = false;                                                                                        // 537\n                                                                                                                       // 538\n\t\tthis.lastClickTime = event.timeStamp;                                                                                // 539\n                                                                                                                       // 540\n\t\ttrackingClickStart = this.trackingClickStart;                                                                        // 541\n\t\tthis.trackingClick = false;                                                                                          // 542\n\t\tthis.trackingClickStart = 0;                                                                                         // 543\n                                                                                                                       // 544\n\t\t// On some iOS devices, the targetElement supplied with the event is invalid if the layer                            // 545\n\t\t// is performing a transition or scroll, and has to be re-detected manually. Note that                               // 546\n\t\t// for this to function correctly, it must be called *after* the event target is checked!                            // 547\n\t\t// See issue #57; also filed as rdar://13048589 .                                                                    // 548\n\t\tif (deviceIsIOSWithBadTarget) {                                                                                      // 549\n\t\t\ttouch = event.changedTouches[0];                                                                                    // 550\n                                                                                                                       // 551\n\t\t\t// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null         // 552\n\t\t\ttargetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;\n\t\t\ttargetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;                                     // 554\n\t\t}                                                                                                                    // 555\n                                                                                                                       // 556\n\t\ttargetTagName = targetElement.tagName.toLowerCase();                                                                 // 557\n\t\tif (targetTagName === 'label') {                                                                                     // 558\n\t\t\tforElement = this.findControl(targetElement);                                                                       // 559\n\t\t\tif (forElement) {                                                                                                   // 560\n\t\t\t\tthis.focus(targetElement);                                                                                         // 561\n\t\t\t\tif (deviceIsAndroid) {                                                                                             // 562\n\t\t\t\t\treturn false;                                                                                                     // 563\n\t\t\t\t}                                                                                                                  // 564\n                                                                                                                       // 565\n\t\t\t\ttargetElement = forElement;                                                                                        // 566\n\t\t\t}                                                                                                                   // 567\n\t\t} else if (this.needsFocus(targetElement)) {                                                                         // 568\n                                                                                                                       // 569\n\t\t\t// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.\n\t\t\t// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).\n\t\t\tif ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n\t\t\t\tthis.targetElement = null;                                                                                         // 573\n\t\t\t\treturn false;                                                                                                      // 574\n\t\t\t}                                                                                                                   // 575\n                                                                                                                       // 576\n\t\t\tthis.focus(targetElement);                                                                                          // 577\n\t\t\tthis.sendClick(targetElement, event);                                                                               // 578\n                                                                                                                       // 579\n\t\t\t// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.                   // 580\n\t\t\t// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)                    // 581\n\t\t\tif (!deviceIsIOS || targetTagName !== 'select') {                                                                   // 582\n\t\t\t\tthis.targetElement = null;                                                                                         // 583\n\t\t\t\tevent.preventDefault();                                                                                            // 584\n\t\t\t}                                                                                                                   // 585\n                                                                                                                       // 586\n\t\t\treturn false;                                                                                                       // 587\n\t\t}                                                                                                                    // 588\n                                                                                                                       // 589\n\t\tif (deviceIsIOS && !deviceIsIOS4) {                                                                                  // 590\n                                                                                                                       // 591\n\t\t\t// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled    // 592\n\t\t\t// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).                     // 593\n\t\t\tscrollParent = targetElement.fastClickScrollParent;                                                                 // 594\n\t\t\tif (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {                               // 595\n\t\t\t\treturn true;                                                                                                       // 596\n\t\t\t}                                                                                                                   // 597\n\t\t}                                                                                                                    // 598\n                                                                                                                       // 599\n\t\t// Prevent the actual click from going though - unless the target node is marked as requiring                        // 600\n\t\t// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.                // 601\n\t\tif (!this.needsClick(targetElement)) {                                                                               // 602\n\t\t\tevent.preventDefault();                                                                                             // 603\n\t\t\tthis.sendClick(targetElement, event);                                                                               // 604\n\t\t}                                                                                                                    // 605\n                                                                                                                       // 606\n\t\treturn false;                                                                                                        // 607\n\t};                                                                                                                    // 608\n                                                                                                                       // 609\n                                                                                                                       // 610\n\t/**                                                                                                                   // 611\n\t * On touch cancel, stop tracking the click.                                                                          // 612\n\t *                                                                                                                    // 613\n\t * @returns {void}                                                                                                    // 614\n\t */                                                                                                                   // 615\n\tFastClick.prototype.onTouchCancel = function() {                                                                      // 616\n\t\tthis.trackingClick = false;                                                                                          // 617\n\t\tthis.targetElement = null;                                                                                           // 618\n\t};                                                                                                                    // 619\n                                                                                                                       // 620\n                                                                                                                       // 621\n\t/**                                                                                                                   // 622\n\t * Determine mouse events which should be permitted.                                                                  // 623\n\t *                                                                                                                    // 624\n\t * @param {Event} event                                                                                               // 625\n\t * @returns {boolean}                                                                                                 // 626\n\t */                                                                                                                   // 627\n\tFastClick.prototype.onMouse = function(event) {                                                                       // 628\n                                                                                                                       // 629\n\t\t// If a target element was never set (because a touch event was never fired) allow the event                         // 630\n\t\tif (!this.targetElement) {                                                                                           // 631\n\t\t\treturn true;                                                                                                        // 632\n\t\t}                                                                                                                    // 633\n                                                                                                                       // 634\n\t\tif (event.forwardedTouchEvent) {                                                                                     // 635\n\t\t\treturn true;                                                                                                        // 636\n\t\t}                                                                                                                    // 637\n                                                                                                                       // 638\n\t\t// Programmatically generated events targeting a specific element should be permitted                                // 639\n\t\tif (!event.cancelable) {                                                                                             // 640\n\t\t\treturn true;                                                                                                        // 641\n\t\t}                                                                                                                    // 642\n                                                                                                                       // 643\n\t\t// Derive and check the target element to see whether the mouse event needs to be permitted;                         // 644\n\t\t// unless explicitly enabled, prevent non-touch click events from triggering actions,                                // 645\n\t\t// to prevent ghost/doubleclicks.                                                                                    // 646\n\t\tif (!this.needsClick(this.targetElement) || this.cancelNextClick) {                                                  // 647\n                                                                                                                       // 648\n\t\t\t// Prevent any user-added listeners declared on FastClick element from being fired.                                 // 649\n\t\t\tif (event.stopImmediatePropagation) {                                                                               // 650\n\t\t\t\tevent.stopImmediatePropagation();                                                                                  // 651\n\t\t\t} else {                                                                                                            // 652\n                                                                                                                       // 653\n\t\t\t\t// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)                // 654\n\t\t\t\tevent.propagationStopped = true;                                                                                   // 655\n\t\t\t}                                                                                                                   // 656\n                                                                                                                       // 657\n\t\t\t// Cancel the event                                                                                                 // 658\n\t\t\tevent.stopPropagation();                                                                                            // 659\n\t\t\tevent.preventDefault();                                                                                             // 660\n                                                                                                                       // 661\n\t\t\treturn false;                                                                                                       // 662\n\t\t}                                                                                                                    // 663\n                                                                                                                       // 664\n\t\t// If the mouse event is permitted, return true for the action to go through.                                        // 665\n\t\treturn true;                                                                                                         // 666\n\t};                                                                                                                    // 667\n                                                                                                                       // 668\n                                                                                                                       // 669\n\t/**                                                                                                                   // 670\n\t * On actual clicks, determine whether this is a touch-generated click, a click action occurring                      // 671\n\t * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or                       // 672\n\t * an actual click which should be permitted.                                                                         // 673\n\t *                                                                                                                    // 674\n\t * @param {Event} event                                                                                               // 675\n\t * @returns {boolean}                                                                                                 // 676\n\t */                                                                                                                   // 677\n\tFastClick.prototype.onClick = function(event) {                                                                       // 678\n\t\tvar permitted;                                                                                                       // 679\n                                                                                                                       // 680\n\t\t// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.\n\t\tif (this.trackingClick) {                                                                                            // 682\n\t\t\tthis.targetElement = null;                                                                                          // 683\n\t\t\tthis.trackingClick = false;                                                                                         // 684\n\t\t\treturn true;                                                                                                        // 685\n\t\t}                                                                                                                    // 686\n                                                                                                                       // 687\n\t\t// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.\n\t\tif (event.target.type === 'submit' && event.detail === 0) {                                                          // 689\n\t\t\treturn true;                                                                                                        // 690\n\t\t}                                                                                                                    // 691\n                                                                                                                       // 692\n\t\tpermitted = this.onMouse(event);                                                                                     // 693\n                                                                                                                       // 694\n\t\t// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.\n\t\tif (!permitted) {                                                                                                    // 696\n\t\t\tthis.targetElement = null;                                                                                          // 697\n\t\t}                                                                                                                    // 698\n                                                                                                                       // 699\n\t\t// If clicks are permitted, return true for the action to go through.                                                // 700\n\t\treturn permitted;                                                                                                    // 701\n\t};                                                                                                                    // 702\n                                                                                                                       // 703\n                                                                                                                       // 704\n\t/**                                                                                                                   // 705\n\t * Remove all FastClick's event listeners.                                                                            // 706\n\t *                                                                                                                    // 707\n\t * @returns {void}                                                                                                    // 708\n\t */                                                                                                                   // 709\n\tFastClick.prototype.destroy = function() {                                                                            // 710\n\t\tvar layer = this.layer;                                                                                              // 711\n                                                                                                                       // 712\n\t\tif (deviceIsAndroid) {                                                                                               // 713\n\t\t\tlayer.removeEventListener('mouseover', this.onMouse, true);                                                         // 714\n\t\t\tlayer.removeEventListener('mousedown', this.onMouse, true);                                                         // 715\n\t\t\tlayer.removeEventListener('mouseup', this.onMouse, true);                                                           // 716\n\t\t}                                                                                                                    // 717\n                                                                                                                       // 718\n\t\tlayer.removeEventListener('click', this.onClick, true);                                                              // 719\n\t\tlayer.removeEventListener('touchstart', this.onTouchStart, false);                                                   // 720\n\t\tlayer.removeEventListener('touchmove', this.onTouchMove, false);                                                     // 721\n\t\tlayer.removeEventListener('touchend', this.onTouchEnd, false);                                                       // 722\n\t\tlayer.removeEventListener('touchcancel', this.onTouchCancel, false);                                                 // 723\n\t};                                                                                                                    // 724\n                                                                                                                       // 725\n                                                                                                                       // 726\n\t/**                                                                                                                   // 727\n\t * Check whether FastClick is needed.                                                                                 // 728\n\t *                                                                                                                    // 729\n\t * @param {Element} layer The layer to listen on                                                                      // 730\n\t */                                                                                                                   // 731\n\tFastClick.notNeeded = function(layer) {                                                                               // 732\n\t\tvar metaViewport;                                                                                                    // 733\n\t\tvar chromeVersion;                                                                                                   // 734\n\t\tvar blackberryVersion;                                                                                               // 735\n\t\tvar firefoxVersion;                                                                                                  // 736\n                                                                                                                       // 737\n\t\t// Devices that don't support touch don't need FastClick                                                             // 738\n\t\tif (typeof window.ontouchstart === 'undefined') {                                                                    // 739\n\t\t\treturn true;                                                                                                        // 740\n\t\t}                                                                                                                    // 741\n                                                                                                                       // 742\n\t\t// Chrome version - zero for other browsers                                                                          // 743\n\t\tchromeVersion = +(/Chrome\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];                                          // 744\n                                                                                                                       // 745\n\t\tif (chromeVersion) {                                                                                                 // 746\n                                                                                                                       // 747\n\t\t\tif (deviceIsAndroid) {                                                                                              // 748\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');                                                      // 749\n                                                                                                                       // 750\n\t\t\t\tif (metaViewport) {                                                                                                // 751\n\t\t\t\t\t// Chrome on Android with user-scalable=\"no\" doesn't need FastClick (issue #89)                                   // 752\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {                                                    // 753\n\t\t\t\t\t\treturn true;                                                                                                     // 754\n\t\t\t\t\t}                                                                                                                 // 755\n\t\t\t\t\t// Chrome 32 and above with width=device-width or less don't need FastClick                                       // 756\n\t\t\t\t\tif (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {                            // 757\n\t\t\t\t\t\treturn true;                                                                                                     // 758\n\t\t\t\t\t}                                                                                                                 // 759\n\t\t\t\t}                                                                                                                  // 760\n                                                                                                                       // 761\n\t\t\t// Chrome desktop doesn't need FastClick (issue #15)                                                                // 762\n\t\t\t} else {                                                                                                            // 763\n\t\t\t\treturn true;                                                                                                       // 764\n\t\t\t}                                                                                                                   // 765\n\t\t}                                                                                                                    // 766\n                                                                                                                       // 767\n\t\tif (deviceIsBlackBerry10) {                                                                                          // 768\n\t\t\tblackberryVersion = navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/);                                       // 769\n                                                                                                                       // 770\n\t\t\t// BlackBerry 10.3+ does not require Fastclick library.                                                             // 771\n\t\t\t// https://github.com/ftlabs/fastclick/issues/251                                                                   // 772\n\t\t\tif (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {                                                      // 773\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');                                                      // 774\n                                                                                                                       // 775\n\t\t\t\tif (metaViewport) {                                                                                                // 776\n\t\t\t\t\t// user-scalable=no eliminates click delay.                                                                       // 777\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {                                                    // 778\n\t\t\t\t\t\treturn true;                                                                                                     // 779\n\t\t\t\t\t}                                                                                                                 // 780\n\t\t\t\t\t// width=device-width (or less than device-width) eliminates click delay.                                         // 781\n\t\t\t\t\tif (document.documentElement.scrollWidth <= window.outerWidth) {                                                  // 782\n\t\t\t\t\t\treturn true;                                                                                                     // 783\n\t\t\t\t\t}                                                                                                                 // 784\n\t\t\t\t}                                                                                                                  // 785\n\t\t\t}                                                                                                                   // 786\n\t\t}                                                                                                                    // 787\n                                                                                                                       // 788\n\t\t// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)                   // 789\n\t\tif (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {                            // 790\n\t\t\treturn true;                                                                                                        // 791\n\t\t}                                                                                                                    // 792\n                                                                                                                       // 793\n\t\t// Firefox version - zero for other browsers                                                                         // 794\n\t\tfirefoxVersion = +(/Firefox\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];                                        // 795\n                                                                                                                       // 796\n\t\tif (firefoxVersion >= 27) {                                                                                          // 797\n\t\t\t// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896\n                                                                                                                       // 799\n\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');                                                       // 800\n\t\t\tif (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {\n\t\t\t\treturn true;                                                                                                       // 802\n\t\t\t}                                                                                                                   // 803\n\t\t}                                                                                                                    // 804\n                                                                                                                       // 805\n\t\t// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version            // 806\n\t\t// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx                                                // 807\n\t\tif (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {                              // 808\n\t\t\treturn true;                                                                                                        // 809\n\t\t}                                                                                                                    // 810\n                                                                                                                       // 811\n\t\treturn false;                                                                                                        // 812\n\t};                                                                                                                    // 813\n                                                                                                                       // 814\n                                                                                                                       // 815\n\t/**                                                                                                                   // 816\n\t * Factory method for creating a FastClick object                                                                     // 817\n\t *                                                                                                                    // 818\n\t * @param {Element} layer The layer to listen on                                                                      // 819\n\t * @param {Object} [options={}] The options to override the defaults                                                  // 820\n\t */                                                                                                                   // 821\n\tFastClick.attach = function(layer, options) {                                                                         // 822\n\t\treturn new FastClick(layer, options);                                                                                // 823\n\t};                                                                                                                    // 824\n                                                                                                                       // 825\n                                                                                                                       // 826\n\tif (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {                                   // 827\n                                                                                                                       // 828\n\t\t// AMD. Register as an anonymous module.                                                                             // 829\n\t\tdefine(function() {                                                                                                  // 830\n\t\t\treturn FastClick;                                                                                                   // 831\n\t\t});                                                                                                                  // 832\n\t} else if (typeof module !== 'undefined' && module.exports) {                                                         // 833\n\t\tmodule.exports = FastClick.attach;                                                                                   // 834\n\t\tmodule.exports.FastClick = FastClick;                                                                                // 835\n\t} else {                                                                                                              // 836\n\t\twindow.FastClick = FastClick;                                                                                        // 837\n\t}                                                                                                                     // 838\n                                                                                                                       // 839\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/fastclick/post.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This exports object was created in pre.js.  Now copy the 'FastClick' object                                         // 1\n// from it into the package-scope variable `FastClick`, which will get exported.                                       // 2\n                                                                                                                       // 3\nFastClick = module.exports.FastClick;                                                                                  // 4\n                                                                                                                       // 5\nMeteor.startup(function () {                                                                                           // 6\n  FastClick.attach(document.body);                                                                                     // 7\n});                                                                                                                    // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.fastclick = {}, {\n  FastClick: FastClick\n});\n\n})();\n","servePath":"/packages/fastclick.js"}]