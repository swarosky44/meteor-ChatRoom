[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"msgs.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// imports/api/msgs.js                                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nexports.__esModule = true;                                                                                        //\nexports.Msgs = undefined;                                                                                         //\n                                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                                           // 1\n                                                                                                                  //\nvar _mongo = require('meteor/mongo');                                                                             // 2\n                                                                                                                  //\nvar _check = require('meteor/check');                                                                             // 3\n                                                                                                                  //\nvar Msgs = exports.Msgs = new _mongo.Mongo.Collection('msgs');                                                    // 5\nif (_meteor.Meteor.isServer) {                                                                                    // 6\n  _meteor.Meteor.publish('msgs', function () {                                                                    // 7\n    function msgsPublication() {                                                                                  // 7\n      return Msgs.find({                                                                                          // 8\n        $or: [{ send_id: this.userId }, { recevier_id: this.userId }]                                             // 9\n      });                                                                                                         //\n    }                                                                                                             //\n                                                                                                                  //\n    return msgsPublication;                                                                                       //\n  }());                                                                                                           //\n}                                                                                                                 //\n_meteor.Meteor.methods({                                                                                          // 16\n  chatMsg: function () {                                                                                          // 17\n    function chatMsg(friend_id) {                                                                                 // 17\n      (0, _check.check)(friend_id, String);                                                                       // 18\n      return Msgs.find({                                                                                          // 19\n        $or: [{ send_id: this.userId, recevier_id: friend_id }, { send_id: friend_id, recevier_id: this.userId }]\n      }).fetch();                                                                                                 //\n    }                                                                                                             //\n                                                                                                                  //\n    return chatMsg;                                                                                               //\n  }(),                                                                                                            //\n                                                                                                                  //\n  'msgs.insert': function () {                                                                                    // 27\n    function msgsInsert(text, r_id) {                                                                             //\n      (0, _check.check)(text, String);                                                                            // 28\n                                                                                                                  //\n      if (!_meteor.Meteor.userId()) {                                                                             // 30\n        throw new _meteor.Meteor.Error('not-authorized');                                                         // 31\n      }                                                                                                           //\n                                                                                                                  //\n      Msgs.insert({                                                                                               // 34\n        send_id: _meteor.Meteor.userId(),                                                                         // 35\n        recevier_id: r_id,                                                                                        // 36\n        content: text,                                                                                            // 37\n        time: new Date(),                                                                                         // 38\n        isUnread: true                                                                                            // 39\n      });                                                                                                         //\n    }                                                                                                             //\n                                                                                                                  //\n    return msgsInsert;                                                                                            //\n  }()                                                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// imports/api/tasks.js                                                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nexports.__esModule = true;                                                                                        //\nexports.Tasks = undefined;                                                                                        //\n                                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                                           // 1\n                                                                                                                  //\nvar _mongo = require('meteor/mongo');                                                                             // 2\n                                                                                                                  //\nvar _check = require('meteor/check');                                                                             // 3\n                                                                                                                  //\nvar Tasks = exports.Tasks = new _mongo.Mongo.Collection('tasks');                                                 // 5\nif (_meteor.Meteor.isServer) {                                                                                    // 6\n  // This code only runs on the server                                                                            //\n  // Only return public tasks and private tasks belong to owner                                                   //\n  _meteor.Meteor.publish('tasks', function () {                                                                   // 9\n    function tasksPublication() {                                                                                 // 9\n      return Tasks.find({                                                                                         // 10\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]                                               // 11\n      });                                                                                                         //\n    }                                                                                                             //\n                                                                                                                  //\n    return tasksPublication;                                                                                      //\n  }());                                                                                                           //\n}                                                                                                                 //\n_meteor.Meteor.methods({                                                                                          // 18\n  'tasks.insert': function () {                                                                                   // 19\n    function tasksInsert(text) {                                                                                  //\n      (0, _check.check)(text, String);                                                                            // 20\n                                                                                                                  //\n      // Make sure the user is logged in before inserting a task                                                  //\n      if (!_meteor.Meteor.userId()) {                                                                             // 19\n        throw new _meteor.Meteor.Error('not-authorized');                                                         // 24\n      }                                                                                                           //\n                                                                                                                  //\n      Tasks.insert({                                                                                              // 27\n        text: text,                                                                                               // 28\n        createdAt: new Date(),                                                                                    // 29\n        owner: _meteor.Meteor.userId(),                                                                           // 30\n        username: _meteor.Meteor.user().username                                                                  // 31\n      });                                                                                                         //\n    }                                                                                                             //\n                                                                                                                  //\n    return tasksInsert;                                                                                           //\n  }(),                                                                                                            //\n  'tasks.remove': function () {                                                                                   // 34\n    function tasksRemove(taskId) {                                                                                //\n      (0, _check.check)(taskId, String);                                                                          // 35\n                                                                                                                  //\n      var task = Tasks.findOne(taskId);                                                                           // 37\n      if (task['private'] && task.owner !== _meteor.Meteor.userId()) {                                            // 38\n        // If the task is private, make sure only the owner can delete it                                         //\n        throw new _meteor.Meteor.Error('not-authorized');                                                         // 40\n      }                                                                                                           //\n                                                                                                                  //\n      Tasks.remove(taskId);                                                                                       // 43\n    }                                                                                                             //\n                                                                                                                  //\n    return tasksRemove;                                                                                           //\n  }(),                                                                                                            //\n  'tasks.setChecked': function () {                                                                               // 45\n    function tasksSetChecked(taskId, setChecked) {                                                                //\n      (0, _check.check)(taskId, String);                                                                          // 46\n      (0, _check.check)(setChecked, Boolean);                                                                     // 47\n      var task = Tasks.findOne(taskId);                                                                           // 48\n      if (task['private'] && task.owner !== _meteor.Meteor.userId()) {                                            // 49\n        // If the task is private, make sure only the owner can check it off                                      //\n        throw new _meteor.Meteor.Error('not-authorized');                                                         // 51\n      }                                                                                                           //\n      Tasks.update(taskId, { $set: { checked: setChecked } });                                                    // 53\n    }                                                                                                             //\n                                                                                                                  //\n    return tasksSetChecked;                                                                                       //\n  }(),                                                                                                            //\n  'tasks.setPrivate': function () {                                                                               // 55\n    function tasksSetPrivate(taskId, setToPrivate) {                                                              //\n      (0, _check.check)(taskId, String);                                                                          // 56\n      (0, _check.check)(setToPrivate, Boolean);                                                                   // 57\n                                                                                                                  //\n      var task = Tasks.findOne(taskId);                                                                           // 59\n                                                                                                                  //\n      // Make sure only the task owner can make a task private                                                    //\n      if (task.owner !== _meteor.Meteor.userId()) {                                                               // 55\n        throw new _meteor.Meteor.Error('not-authorized');                                                         // 63\n      }                                                                                                           //\n                                                                                                                  //\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });                                                // 66\n    }                                                                                                             //\n                                                                                                                  //\n    return tasksSetPrivate;                                                                                       //\n  }()                                                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"users.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// imports/api/users.js                                                                                           //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nexports.__esModule = true;                                                                                        //\nexports.Users = undefined;                                                                                        //\n                                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                                           // 1\n                                                                                                                  //\nvar _mongo = require('meteor/mongo');                                                                             // 2\n                                                                                                                  //\nvar _check = require('meteor/check');                                                                             // 3\n                                                                                                                  //\nvar Users = exports.Users = _meteor.Meteor.users;                                                                 // 5\nif (_meteor.Meteor.isServer) {                                                                                    // 6\n  _meteor.Meteor.publish('users', function () {                                                                   // 7\n    function usersPublication() {                                                                                 // 7\n      return Users.find({});                                                                                      // 8\n    }                                                                                                             //\n                                                                                                                  //\n    return usersPublication;                                                                                      //\n  }());                                                                                                           //\n}                                                                                                                 //\n_meteor.Meteor.methods({                                                                                          // 11\n  findUser: function () {                                                                                         // 12\n    function findUser(u_id) {                                                                                     // 12\n      return Users.findOne({                                                                                      // 13\n        _id: u_id                                                                                                 // 14\n      }, {                                                                                                        //\n        fields: {                                                                                                 // 16\n          'username': 1                                                                                           // 17\n        }                                                                                                         //\n      });                                                                                                         //\n    }                                                                                                             //\n                                                                                                                  //\n    return findUser;                                                                                              //\n  }()                                                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/tasks.js\",\"../imports/api/msgs.js\",\"../imports/api/users.js\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// server/main.js                                                                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                                           // 1\n                                                                                                                  //\nrequire('../imports/api/tasks.js');                                                                               // 2\n                                                                                                                  //\nrequire('../imports/api/msgs.js');                                                                                // 3\n                                                                                                                  //\nrequire('../imports/api/users.js');                                                                               // 4\n                                                                                                                  //\n_meteor.Meteor.startup(function () {                                                                              // 5\n  // code to run on server at startup                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/msgs.js","/imports/api/tasks.js","/imports/api/users.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Msgs = new Mongo.Collection('msgs');\nif (Meteor.isServer) {\n  Meteor.publish('msgs', function msgsPublication() {\n    return Msgs.find({\n      $or: [\n        { send_id: this.userId },\n        { recevier_id: this.userId },\n      ],\n    })\n  })\n} \nMeteor.methods({\n  chatMsg: function(friend_id){\n    check(friend_id, String)\n    return Msgs.find({\n      $or: [\n        {send_id: this.userId, recevier_id: friend_id}, \n        {send_id: friend_id, recevier_id: this.userId}\n      ] \n    }).fetch()\n  },\n\n  'msgs.insert'(text, r_id) {\n    check(text, String)\n\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n\n    Msgs.insert({\n      send_id: Meteor.userId(),\n      recevier_id: r_id,\n      content: text,\n      time: new Date(),\n      isUnread: true\n    })\n  }\n})","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only return public tasks and private tasks belong to owner\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n} \nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n \n    const task = Tasks.findOne(taskId);\n \n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});","import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Users = Meteor.users;\nif (Meteor.isServer) {\n  Meteor.publish('users', function usersPublication() {\n    return Users.find({})\n  })\n} \nMeteor.methods({\n  findUser: function(u_id) {\n    return Users.findOne({\n      _id: u_id\n    }, {\n      fields: {\n        'username': 1\n      }\n    });\n  }\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/tasks.js';\nimport '../imports/api/msgs.js';\nimport '../imports/api/users.js';\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]