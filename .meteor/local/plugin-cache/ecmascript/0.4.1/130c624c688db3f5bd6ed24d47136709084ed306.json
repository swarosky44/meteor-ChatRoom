{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/doc_fetcher_tests.js","filenameRelative":"/packages/mongo/doc_fetcher_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/doc_fetcher_tests.js.map","sourceFileName":"/packages/mongo/doc_fetcher_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"doc_fetcher_tests"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [function (test, expect) {\n  var self = this;\n  var collName = \"docfetcher-\" + Random.id();\n  var collection = new Mongo.Collection(collName);\n  var id1 = collection.insert({ x: 1 });\n  var id2 = collection.insert({ y: 2 });\n\n  var fetcher = new MongoTest.DocFetcher(MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n  // Test basic operation.\n  fetcher.fetch(collName, id1, Random.id(), expect(null, { _id: id1, x: 1 }));\n  fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n  var fetched = false;\n  var cacheKey = Random.id();\n  var expected = { _id: id2, y: 2 };\n  fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n    fetched = true;\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n  // The fetcher yields.\n  test.isFalse(fetched);\n\n  // Now ask for another document with the same cache key. Because a fetch for\n  // that cache key is in flight, we will get the other fetch's document, not\n  // this random document.\n  fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/doc_fetcher_tests.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,IAAI,OAAJ,CAAY,QAAZ,CAAR;AACJ,IAAI,SAAS,IAAI,OAAJ,CAAY,eAAZ,CAAT;;AAEJ,eAAe,8BAAf,EAA+C,CAC7C,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAP,CADkB;AAEtB,MAAI,WAAW,gBAAgB,OAAO,EAAP,EAAhB,CAFO;AAGtB,MAAI,aAAa,IAAI,MAAM,UAAN,CAAiB,QAArB,CAAb,CAHkB;AAItB,MAAI,MAAM,WAAW,MAAX,CAAkB,EAAC,GAAG,CAAH,EAAnB,CAAN,CAJkB;AAKtB,MAAI,MAAM,WAAW,MAAX,CAAkB,EAAC,GAAG,CAAH,EAAnB,CAAN,CALkB;;AAOtB,MAAI,UAAU,IAAI,UAAU,UAAV,CAChB,eAAe,6BAAf,GAA+C,KAA/C,CADE;;;AAPkB,SAWtB,CAAQ,KAAR,CAAc,QAAd,EAAwB,GAAxB,EAA6B,OAAO,EAAP,EAA7B,EAA0C,OAAO,IAAP,EAAa,EAAC,KAAK,GAAL,EAAU,GAAG,CAAH,EAAxB,CAA1C,EAXsB;AAYtB,UAAQ,KAAR,CAAc,QAAd,EAAwB,cAAxB,EAAwC,OAAO,EAAP,EAAxC,EAAqD,OAAO,IAAP,EAAa,IAAb,CAArD,EAZsB;;AActB,MAAI,UAAU,KAAV,CAdkB;AAetB,MAAI,WAAW,OAAO,EAAP,EAAX,CAfkB;AAgBtB,MAAI,WAAW,EAAC,KAAK,GAAL,EAAU,GAAG,CAAH,EAAtB,CAhBkB;AAiBtB,UAAQ,KAAR,CAAc,QAAd,EAAwB,GAAxB,EAA6B,QAA7B,EAAuC,OAAO,UAAU,CAAV,EAAa,CAAb,EAAgB;AAC5D,cAAU,IAAV,CAD4D;AAE5D,SAAK,OAAL,CAAa,CAAb,EAF4D;AAG5D,SAAK,KAAL,CAAW,CAAX,EAAc,QAAd,EAH4D;GAAhB,CAA9C;;AAjBsB,MAuBtB,CAAK,OAAL,CAAa,OAAb;;;;;AAvBsB,SA4BtB,CAAQ,KAAR,CAAc,QAAd,EAAwB,OAAO,EAAP,EAAxB,EAAqC,QAArC,EAA+C,OAAO,UAAU,CAAV,EAAa,CAAb,EAAgB;AACpE,SAAK,OAAL,CAAa,CAAb,EADoE;AAEpE,SAAK,KAAL,CAAW,CAAX,EAAc,QAAd,EAFoE;GAAhB,CAAtD,EA5BsB;CAAxB,CADF","file":"/packages/mongo/doc_fetcher_tests.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [\n  function (test, expect) {\n    var self = this;\n    var collName = \"docfetcher-\" + Random.id();\n    var collection = new Mongo.Collection(collName);\n    var id1 = collection.insert({x: 1});\n    var id2 = collection.insert({y: 2});\n\n    var fetcher = new MongoTest.DocFetcher(\n      MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n    // Test basic operation.\n    fetcher.fetch(collName, id1, Random.id(), expect(null, {_id: id1, x: 1}));\n    fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n    var fetched = false;\n    var cacheKey = Random.id();\n    var expected = {_id: id2, y: 2};\n    fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n      fetched = true;\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n    // The fetcher yields.\n    test.isFalse(fetched);\n\n    // Now ask for another document with the same cache key. Because a fetch for\n    // that cache key is in flight, we will get the other fetch's document, not\n    // this random document.\n    fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n  }\n]);\n"]},"hash":"130c624c688db3f5bd6ed24d47136709084ed306"}
