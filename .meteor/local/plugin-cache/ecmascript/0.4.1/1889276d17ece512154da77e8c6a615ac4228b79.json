{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/reactive-dict/migration.js","filenameRelative":"/packages/reactive-dict/migration.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/reactive-dict/migration.js.map","sourceFileName":"/packages/reactive-dict/migration.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"migration"},"ignored":false,"code":"ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n    }return [true, { dicts: dataToMigrate }];\n  });\n}","ast":null,"map":{"version":3,"sources":["/packages/reactive-dict/migration.js"],"names":[],"mappings":"AAAA,aAAa,iBAAb,GAAiC,EAAjC;AACA,aAAa,eAAb,GAA+B,EAA/B;;AAEA,aAAa,iBAAb,GAAiC,UAAU,QAAV,EAAoB;AACnD,MAAI,EAAE,GAAF,CAAM,aAAa,iBAAb,EAAgC,QAAtC,CAAJ,EACE,OAAO,aAAa,iBAAb,CAA+B,QAA/B,CAAP,CADF;;AAGA,SAAO,IAAP,CAJmD;CAApB;;AAOjC,aAAa,uBAAb,GAAuC,UAAU,QAAV,EAAoB,IAApB,EAA0B;AAC/D,MAAI,EAAE,GAAF,CAAM,aAAa,eAAb,EAA8B,QAApC,CAAJ,EACE,MAAM,IAAI,KAAJ,CAAU,kCAAkC,QAAlC,CAAhB,CADF;;AAGA,eAAa,eAAb,CAA6B,QAA7B,IAAyC,IAAzC,CAJ+D;CAA1B;;AAOvC,IAAI,OAAO,QAAP,IAAmB,QAAQ,MAAR,EAAgB;;;AAGrC,MAAI,gBAAgB,QAAQ,MAAR,CAAe,MAAf,CAAsB,cAAtB,CAAqC,eAArC,CAAhB,CAHiC;AAIrC,MAAI,iBAAiB,cAAc,KAAd,EACnB,aAAa,iBAAb,GAAiC,cAAc,KAAd,CADnC;;;;AAJqC,SASrC,CAAQ,MAAR,CAAe,MAAf,CAAsB,UAAtB,CAAiC,eAAjC,EAAkD,YAAY;AAC5D,QAAI,iBAAiB,aAAa,eAAb,CADuC;AAE5D,QAAI,gBAAgB,EAAhB,CAFwD;;AAI5D,SAAK,IAAI,QAAJ,2CAAgB,eAArB;AACE,oBAAc,QAAd,IAA0B,eAAe,QAAf,EAAyB,iBAAzB,EAA1B;KADF,OAGO,CAAC,IAAD,EAAO,EAAC,OAAO,aAAP,EAAR,CAAP,CAP4D;GAAZ,CAAlD,CATqC;CAAvC","file":"/packages/reactive-dict/migration.js.map","sourcesContent":["ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]},"hash":"1889276d17ece512154da77e8c6a615ac4228b79"}
