{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/mongo_driver.js","filenameRelative":"/packages/mongo/mongo_driver.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/mongo_driver.js.map","sourceFileName":"/packages/mongo/mongo_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mongo_driver"},"ignored":false,"code":"var _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function replaceNames(filter, thing) {\n  if ((typeof thing === 'undefined' ? 'undefined' : (0, _typeof3['default'])(thing)) === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function makeMongoLegal(name) {\n  return \"EJSON\" + name;\n};\nvar unmakeMongoLegal = function unmakeMongoLegal(name) {\n  return name.substr(5);\n};\n\nvar replaceMongoAtomWithMeteor = function replaceMongoAtomWithMeteor(document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function replaceMeteorAtomWithMongo(document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function replaceTypes(document, atomTransformer) {\n  if ((typeof document === 'undefined' ? 'undefined' : (0, _typeof3['default'])(document)) !== 'object' || document === null) return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document) ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\nMongoConnection = function MongoConnection(url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook();\n\n  var mongoOptions = { db: { safe: true }, server: {}, replSet: {} };\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!/[\\?&]auto_?[rR]econnect=/.test(url)) {\n    mongoOptions.server.auto_reconnect = true;\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // XXX maybe we should have a better way of allowing users to configure the\n  // underlying Mongo driver\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n  var connectFuture = new Future();\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, db) {\n    if (err) {\n      throw err;\n    }\n\n    // First, figure out what the current primary is, if any.\n    if (db.serverConfig._state.master) self._primary = db.serverConfig._state.master.name;\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {\n      if (kind === 'primary') {\n        if (doc.primary !== self._primary) {\n          self._primary = doc.primary;\n          self._onFailoverHook.each(function (callback) {\n            callback();\n            return true;\n          });\n        }\n      } else if (doc.me === self._primary) {\n        // The thing we thought was primary is now something other than\n        // primary.  Forget that we thought it was primary.  (This means\n        // that if a server stops being primary and then starts being\n        // primary again without another server becoming primary in the\n        // middle, we'll correctly count it as a failover.)\n        self._primary = null;\n      }\n    }));\n\n    // Allow the constructor to return.\n    connectFuture['return'](db);\n  }, connectFuture.resolver() // onException\n  ));\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && !Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function () {\n  var self = this;\n\n  if (!self.db) throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle) oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(collectionName, { capped: true, size: byteSize, max: maxDocuments }, future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) return fence.beginWrite();else return { committed: function () {\n      function committed() {}\n\n      return committed;\n    }() };\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function writeCallback(write, refresh, callback) {\n  return function (err, result) {\n    if (!err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) callback(err, result);else if (err) throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function bindEnvironmentForWrite(callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document, callback) {\n  var self = this;\n\n  var sendError = function sendError(e) {\n    if (callback) return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), { safe: true }, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = { collection: collectionName };\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({ id: id }, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) return callback(e);else throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), { safe: true }, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ collection: collectionName, id: null,\n      dropCollection: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {\n  var self = this;\n\n  if (!callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) return callback(e);else throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || (typeof mod === 'undefined' ? 'undefined' : (0, _typeof3['default'])(mod)) !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = { safe: true };\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && !isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && !knownId && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, isModify, options,\n      // This callback does not need to be bindEnvironment'ed because\n      // simulateUpsertWithInsertedId() wraps it and then passes it through\n      // bindEnvironmentForWrite.\n      function (err, result) {\n        // If we got here via a upsert() call, then options._returnObject will\n        // be set and we should return the whole object. Otherwise, we should\n        // just return the number of affected docs to match the mongo API.\n        if (result && !options._returnObject) callback(err, result.numberAffected);else callback(err, result);\n      });\n    } else {\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result, extra) {\n        if (!err) {\n          if (result && options._returnObject) {\n            result = { numberAffected: result };\n            // If this was an upsert() call, and we ended up\n            // inserting a new doc and we know its id, then\n            // return that id as well.\n            if (options.upsert && knownId && !extra.updatedExisting) result.insertedId = knownId;\n          }\n        }\n        callback(err, result);\n      }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function isModificationMod(mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in meteorBabelHelpers.sanitizeForInObject(mod)) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596) return true;\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0) return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0) return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function simulateUpsertWithInsertedId(collection, selector, mod, isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while (key = trail.shift()) {\n          if ((0, _typeof3['default'])(obj[key]) !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, { isInsert: true });\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function doUpdate() {\n    tries--;\n    if (!tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {\n        if (err) callback(err);else if (result) callback(null, {\n          numberAffected: result\n        });else doConditionalInsert();\n      }));\n    }\n  };\n\n  var doConditionalInsert = function doConditionalInsert() {\n    var replacementWithId = _.extend(replaceTypes({ _id: insertedId }, replaceMeteorAtomWithMongo), newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {\n        // figure out if this is a\n        // \"cannot change _id of document\" error, and\n        // if so, try doUpdate() again, up to 3 times.\n        if (MongoConnection._isCannotChangeIdError(err)) {\n          doUpdate();\n        } else {\n          callback(err);\n        }\n      } else {\n        callback(null, {\n          numberAffected: result,\n          insertedId: insertedId\n        });\n      }\n    }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function () /* arguments */{\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1) selector = {};\n\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {\n  var self = this;\n  if (arguments.length === 1) selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function CursorDescription(collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function Cursor(mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {\n        // Make sure that the \"self\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: self,\n        useTransform: true\n      });\n    }\n\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function SynchronousCursor(dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap();\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    function _nextObject() {\n      var self = this;\n\n      while (true) {\n        var doc = self._synchronousNextObject().wait();\n\n        if (!doc) return null;\n        doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n        if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n          // Did Mongo give us duplicate documents in the same cursor? If so,\n          // ignore this one. (Do this before the transform, since transform might\n          // return some unrelated value.) We don't do this for tailable cursors,\n          // because we want to maintain O(1) memory usage. And if there isn't _id\n          // for some reason (maybe it's the oplog), then we don't do this either.\n          // (Be careful to do this for falsey but existing _id, though.)\n          if (self._visitedIds.has(doc._id)) continue;\n          self._visitedIds.set(doc._id, true);\n        }\n\n        if (self._transform) doc = self._transform(doc);\n\n        return doc;\n      }\n    }\n\n    return _nextObject;\n  }(),\n\n  forEach: function () {\n    function forEach(callback, thisArg) {\n      var self = this;\n\n      // Get back to the beginning.\n      self._rewind();\n\n      // We implement the loop ourself instead of using self._dbCursor.each,\n      // because \"each\" will call its callback outside of a fiber which makes it\n      // much more complex to make this function synchronous.\n      var index = 0;\n      while (true) {\n        var doc = self._nextObject();\n        if (!doc) return;\n        callback.call(thisArg, doc, index++, self._selfForIteration);\n      }\n    }\n\n    return forEach;\n  }(),\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function () {\n    function map(callback, thisArg) {\n      var self = this;\n      var res = [];\n      self.forEach(function (doc, index) {\n        res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n      });\n      return res;\n    }\n\n    return map;\n  }(),\n\n  _rewind: function () {\n    function _rewind() {\n      var self = this;\n\n      // known to be synchronous\n      self._dbCursor.rewind();\n\n      self._visitedIds = new LocalCollection._IdMap();\n    }\n\n    return _rewind;\n  }(),\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    function close() {\n      var self = this;\n\n      self._dbCursor.close();\n    }\n\n    return close;\n  }(),\n\n  fetch: function () {\n    function fetch() {\n      var self = this;\n      return self.map(_.identity);\n    }\n\n    return fetch;\n  }(),\n\n  count: function () {\n    function count() {\n      var self = this;\n      return self._synchronousCount().wait();\n    }\n\n    return count;\n  }(),\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function () {\n    function getRawObjects(ordered) {\n      var self = this;\n      if (ordered) {\n        return self.fetch();\n      } else {\n        var results = new LocalCollection._IdMap();\n        self.forEach(function (doc) {\n          results.set(doc._id, doc);\n        });\n        return results;\n      }\n    }\n\n    return getRawObjects;\n  }()\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function loop() {\n    while (true) {\n      if (stopped) return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped) return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = { $gt: lastTS };\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      function stop() {\n        stopped = true;\n        cursor.close();\n      }\n\n      return stop;\n    }()\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(_.extend({ ordered: ordered }, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          function onStop() {\n            delete self._observeMultiplexers[observeKey];\n            observeDriver.stop();\n          }\n\n          return onStop;\n        }()\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([function () {\n      // At a bare minimum, using the oplog requires us to have an oplog, to\n      // want unordered callbacks, and to not want a callback on the polls\n      // that won't happen.\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;\n    }, function () {\n      // We need to be able to compile the selector. Fall back to polling for\n      // some newfangled $selector that minimongo doesn't support yet.\n      try {\n        matcher = new Minimongo.Matcher(cursorDescription.selector);\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }, function () {\n      // ... and the selector itself needs to support oplog.\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n    }, function () {\n      // And we need to be able to compile the sort, if any.  eg, can't be\n      // {$natural: 1}.\n      if (!cursorDescription.options.sort) return true;\n      try {\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort, { matcher: matcher });\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }], function (f) {\n      return f();\n    }); // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher, // ignored by polling\n      sorter: sorter, // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function listenAll(cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      function stop() {\n        _.each(listeners, function (listener) {\n          listener.stop();\n        });\n      }\n\n      return stop;\n    }()\n  };\n};\n\nforEachTrigger = function forEachTrigger(cursorDescription, triggerCallback) {\n  var key = { collection: cursorDescription.collectionName };\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({ id: id }, key));\n    });\n    triggerCallback(_.extend({ dropCollection: true, id: null }, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;","ast":null,"map":{"version":3,"sources":["/packages/mongo/mongo_driver.js"],"names":[],"mappings":"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","file":"/packages/mongo/mongo_driver.js.map","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = {db: {safe: true}, server: {}, replSet: {}};\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\n    mongoOptions.server.auto_reconnect = true;\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // XXX maybe we should have a better way of allowing users to configure the\n  // underlying Mongo driver\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig._state.master)\n          self._primary = db.serverConfig._state.master.name;\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result, extra) {\n          if (! err) {\n            if (result && options._returnObject) {\n              result = { numberAffected: result };\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && knownId &&\n                  ! extra.updatedExisting)\n                result.insertedId = knownId;\n            }\n          }\n          callback(err, result);\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err)\n                            callback(err);\n                          else if (result)\n                            callback(null, {\n                              numberAffected: result\n                            });\n                          else\n                            doConditionalInsert();\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result,\n                            insertedId: insertedId\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n"]},"hash":"1a28c677e6a7387eab1ff340c7084f14cabed081"}
