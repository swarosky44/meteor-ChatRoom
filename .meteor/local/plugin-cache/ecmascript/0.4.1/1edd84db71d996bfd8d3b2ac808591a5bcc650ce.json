{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/random/random_tests.js","filenameRelative":"/packages/random/random_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/random/random_tests.js.map","sourceFileName":"/packages/random/random_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"random_tests"},"ignored":false,"code":"Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/random/random_tests.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,QAAb,EAAuB,UAAU,IAAV,EAAgB;;;;;;;;;AASrC,MAAI,SAAS,OAAO,eAAP,CAAuB,CAAvB,CAAT,CATiC;AAUrC,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB,EAVqC;AAWrC,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB,EAXqC;AAYrC,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB,EAZqC;AAarC,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB,EAbqC;CAAhB,CAAvB;;;;AAkBA,SAAS,GAAT,CAAa,iBAAb,EAAgC,UAAU,IAAV,EAAgB;AAC9C,MAAI,QAAQ,EAAR,CAD0C;AAE9C,OAAK,KAAL,CAAW,OAAO,EAAP,GAAY,MAAZ,EAAoB,KAA/B,EAF8C;AAG9C,OAAK,KAAL,CAAW,OAAO,EAAP,CAAU,EAAV,EAAc,MAAd,EAAsB,EAAjC,EAH8C;AAI9C,MAAI,YAAY,CAAZ,CAJ0C;AAK9C,MAAI,SAAS,OAAO,SAAP,CAAiB,SAAjB,CAAT,CAL0C;AAM9C,OAAK,KAAL,CAAW,OAAO,MAAP,EAAe,SAA1B,EAN8C;AAO9C,WAAS,MAAT,EAAiB,EAAjB;AAP8C,MAQ1C,OAAO,OAAO,QAAP,EAAP,CAR0C;AAS9C,OAAK,MAAL,CAAY,OAAO,GAAP,CAAZ,CAT8C;AAU9C,OAAK,MAAL,CAAY,QAAQ,GAAR,CAAZ,CAV8C;;AAY9C,OAAK,KAAL,CAAW,OAAO,MAAP,GAAgB,MAAhB,EAAwB,EAAnC,EAZ8C;AAa9C,OAAK,KAAL,CAAW,OAAO,MAAP,CAAc,EAAd,EAAkB,MAAlB,EAA0B,EAArC,EAb8C;CAAhB,CAAhC;;AAgBA,SAAS,GAAT,CAAa,8BAAb,EAA6C,UAAU,IAAV,EAAgB;AAC3D,MAAI,OAAO,QAAP,EAAiB;AACnB,SAAK,MAAL,CAAY,OAAO,IAAP,KAAgB,SAAhB,CAAZ,CADmB;GAArB;AAGA,MAAI,OAAO,QAAP,EAAiB;AACnB,QAAI,qBAAqB,CAAC,EAAE,OAAO,MAAP,KAAkB,WAAlB,IACxB,OAAO,MAAP,IAAiB,OAAO,MAAP,CAAc,eAAd,CADK,CADP;AAGnB,SAAK,KAAL,CAAW,OAAO,IAAP,KAAgB,SAAhB,EAA2B,kBAAtC,EAHmB;GAArB;CAJ2C,CAA7C;;AAWA,SAAS,GAAT,CAAa,8CAAb,EAA6D,UAAU,IAAV,EAAgB;AAC3E,OAAK,MAAL,CAAY,YAAY;AACtB,WAAO,eAAP,GADsB;GAAZ,CAAZ,CAD2E;CAAhB,CAA7D","file":"/packages/random/random_tests.js.map","sourcesContent":["Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" &&\n        window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});\n"]},"hash":"1edd84db71d996bfd8d3b2ac808591a5bcc650ce"}
