{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/polling_observe_driver.js","filenameRelative":"/packages/mongo/polling_observe_driver.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/polling_observe_driver.js.map","sourceFileName":"/packages/mongo/polling_observe_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"polling_observe_driver"},"ignored":false,"code":"PollingObserveDriver = function PollingObserveDriver(options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {\n    // When someone does a transaction that might affect us, schedule a poll\n    // of the database. If that transaction happens inside of a write fence,\n    // block the fence until we've polled and notified observers.\n    var fence = DDPServer._CurrentWriteFence.get();\n    if (fence) self._pendingWrites.push(fence.beginWrite());\n    // Ensure a poll is scheduled... but if we already know that one is,\n    // don't hit the throttled _ensurePollIsScheduled function (which might\n    // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();\n  });\n  self._stopCallbacks.push(function () {\n    listenersHandle.stop();\n  });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval = self._cursorDescription.options.pollingIntervalMs || self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n    10 * 1000;\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    function _unthrottledEnsurePollIsScheduled() {\n      var self = this;\n      if (self._pollsScheduledButNotStarted > 0) return;\n      ++self._pollsScheduledButNotStarted;\n      self._taskQueue.queueTask(function () {\n        self._pollMongo();\n      });\n    }\n\n    return _unthrottledEnsurePollIsScheduled;\n  }(),\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function () {\n    function _suspendPolling() {\n      var self = this;\n      // Pretend that there's another poll scheduled (which will prevent\n      // _ensurePollIsScheduled from queueing any more polls).\n      ++self._pollsScheduledButNotStarted;\n      // Now block until all currently running or scheduled polls are done.\n      self._taskQueue.runTask(function () {});\n\n      // Confirm that there is only one \"poll\" (the fake one we're pretending to\n      // have) scheduled.\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n    }\n\n    return _suspendPolling;\n  }(),\n  _resumePolling: function () {\n    function _resumePolling() {\n      var self = this;\n      // We should be in the same state as in the end of _suspendPolling.\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n      // Run a poll synchronously (which will counteract the\n      // ++_pollsScheduledButNotStarted from _suspendPolling).\n      self._taskQueue.runTask(function () {\n        self._pollMongo();\n      });\n    }\n\n    return _resumePolling;\n  }(),\n\n  _pollMongo: function () {\n    function _pollMongo() {\n      var self = this;\n      --self._pollsScheduledButNotStarted;\n\n      if (self._stopped) return;\n\n      var first = false;\n      var oldResults = self._results;\n      if (!oldResults) {\n        first = true;\n        // XXX maybe use OrderedDict instead?\n        oldResults = self._ordered ? [] : new LocalCollection._IdMap();\n      }\n\n      self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n      // Save the list of pending writes which this round will commit.\n      var writesForCycle = self._pendingWrites;\n      self._pendingWrites = [];\n\n      // Get the new query results. (This yields.)\n      try {\n        var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n      } catch (e) {\n        if (first && typeof e.code === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we should\n          // NOT retry. Instead, we should halt the observe (which ends up calling\n          // `stop` on us).\n          self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n          return;\n        }\n\n        // getRawObjects can throw if we're having trouble talking to the\n        // database.  That's fine --- we will repoll later anyway. But we should\n        // make sure not to lose track of this cycle's writes.\n        // (It also can throw if there's just something invalid about this query;\n        // unfortunately the ObserveDriver API doesn't provide a good way to\n        // \"cancel\" the observe from the inside in this case.\n        Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n        Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n        return;\n      }\n\n      // Run diffs.\n      if (!self._stopped) {\n        LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);\n      }\n\n      // Signals the multiplexer to allow all observeChanges calls that share this\n      // multiplexer to return. (This happens asynchronously, via the\n      // multiplexer's queue.)\n      if (first) self._multiplexer.ready();\n\n      // Replace self._results atomically.  (This assignment is what makes `first`\n      // stay through on the next cycle, so we've waited until after we've\n      // committed to ready-ing the multiplexer.)\n      self._results = newResults;\n\n      // Once the ObserveMultiplexer has processed everything we've done in this\n      // round, mark all the writes which existed before this call as\n      // commmitted. (If new writes have shown up in the meantime, there'll\n      // already be another _pollMongo task scheduled.)\n      self._multiplexer.onFlush(function () {\n        _.each(writesForCycle, function (w) {\n          w.committed();\n        });\n      });\n    }\n\n    return _pollMongo;\n  }(),\n\n  stop: function () {\n    function stop() {\n      var self = this;\n      self._stopped = true;\n      _.each(self._stopCallbacks, function (c) {\n        c();\n      });\n      // Release any write fences that are waiting on us.\n      _.each(self._pendingWrites, function (w) {\n        w.committed();\n      });\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);\n    }\n\n    return stop;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/polling_observe_driver.js"],"names":[],"mappings":"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","file":"/packages/mongo/polling_observe_driver.js.map","sourcesContent":["PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n"]},"hash":"218d85c80362513865c22b729bc030c73bb0a161"}
