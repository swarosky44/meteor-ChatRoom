{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/remote_collection_driver.js","filenameRelative":"/packages/mongo/remote_collection_driver.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/remote_collection_driver.js.map","sourceFileName":"/packages/mongo/remote_collection_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"remote_collection_driver"},"ignored":false,"code":"MongoInternals.RemoteCollectionDriver = function (mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function () {\n    function open(name) {\n      var self = this;\n      var ret = {};\n      _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n      return ret;\n    }\n\n    return open;\n  }()\n});\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/remote_collection_driver.js"],"names":[],"mappings":"AAAA,eAAe,sBAAf,GAAwC,UACtC,SADsC,EAC3B,OAD2B,EAClB;AACpB,MAAI,OAAO,IAAP,CADgB;AAEpB,OAAK,KAAL,GAAa,IAAI,eAAJ,CAAoB,SAApB,EAA+B,OAA/B,CAAb,CAFoB;CADkB;;AAMxC,EAAE,MAAF,CAAS,eAAe,sBAAf,CAAsC,SAAtC,EAAiD;AACxD;AAAM,kBAAU,IAAV,EAAgB;AACpB,UAAI,OAAO,IAAP,CADgB;AAEpB,UAAI,MAAM,EAAN,CAFgB;AAGpB,QAAE,IAAF,CACE,CAAC,MAAD,EAAS,SAAT,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,QAAxC,EACC,QADD,EACW,cADX,EAC2B,YAD3B,EACyC,yBADzC,EAEC,gBAFD,EAEmB,eAFnB,CADF,EAIE,UAAU,CAAV,EAAa;AACX,YAAI,CAAJ,IAAS,EAAE,IAAF,CAAO,KAAK,KAAL,CAAW,CAAX,CAAP,EAAsB,KAAK,KAAL,EAAY,IAAlC,CAAT,CADW;OAAb,CAJF,CAHoB;AAUpB,aAAO,GAAP,CAVoB;KAAhB;;;KAAN;CADF;;;;;AAmBA,eAAe,6BAAf,GAA+C,EAAE,IAAF,CAAO,YAAY;AAChE,MAAI,oBAAoB,EAApB,CAD4D;;AAGhE,MAAI,WAAW,QAAQ,GAAR,CAAY,SAAZ,CAHiD;;AAKhE,MAAI,QAAQ,GAAR,CAAY,eAAZ,EAA6B;AAC/B,sBAAkB,QAAlB,GAA6B,QAAQ,GAAR,CAAY,eAAZ,CADE;GAAjC;;AAIA,MAAI,CAAE,QAAF,EACF,MAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN,CADF;;AAGA,SAAO,IAAI,eAAe,sBAAf,CAAsC,QAA1C,EAAoD,iBAApD,CAAP,CAZgE;CAAZ,CAAtD","file":"/packages/mongo/remote_collection_driver.js.map","sourcesContent":["MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n"]},"hash":"2af10c0a41619b273efcc3b776273cf3b206abda"}
