{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Msgs"],"specifiers":[{"kind":"local","local":"Msgs","exported":"Msgs"}]}}},"options":{"filename":"/imports/api/msgs.js","filenameRelative":"/imports/api/msgs.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/msgs.js.map","sourceFileName":"/imports/api/msgs.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"msgs"},"ignored":false,"code":"exports.__esModule = true;\nexports.Msgs = undefined;\n\nvar _meteor = require('meteor/meteor');\n\nvar _mongo = require('meteor/mongo');\n\nvar _check = require('meteor/check');\n\nvar Msgs = exports.Msgs = new _mongo.Mongo.Collection('msgs');\nif (_meteor.Meteor.isServer) {\n  _meteor.Meteor.publish('msgs', function () {\n    function msgsPublication() {\n      return Msgs.find({\n        $or: [{ 'sender.id': this.userId }, { 'recevier.id': this.userId }]\n      });\n    }\n\n    return msgsPublication;\n  }());\n  _meteor.Meteor.publish('chatMsgs', function () {\n    function chatMsgsPublication(friend_id) {\n      console.log(friend_id, 'asdsadsdsadasdas');\n      return Msgs.find({\n        $or: [{ 'sender.id': this.userId, 'recevier.id': friend_id }, { 'sender.id': friend_id, 'recevier.id': this.userId }]\n      });\n    }\n\n    return chatMsgsPublication;\n  }());\n}\n\n_meteor.Meteor.methods({\n  'msgs.insert': function () {\n    function msgsInsert(text, friend) {\n      (0, _check.check)(text, String);\n\n      if (!_meteor.Meteor.userId()) {\n        throw new _meteor.Meteor.Error('not-authorized');\n      }\n\n      Msgs.insert({\n        sender: {\n          id: _meteor.Meteor.userId(),\n          name: _meteor.Meteor.user().username\n        },\n        recevier: friend,\n        content: text,\n        time: new Date(),\n        isUnread: true\n      });\n    }\n\n    return msgsInsert;\n  }(),\n  'msgs.setUnread': function () {\n    function msgsSetUnread(_id) {\n      (0, _check.check)(_id, String);\n      if (!_meteor.Meteor.userId()) {\n        throw new _meteor.Meteor.Error('not-authorized');\n      }\n      Msgs.update(_id, { $set: { isUnread: false } });\n    }\n\n    return msgsSetUnread;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/msgs.js"],"names":[],"mappings":";;;AAAA;;AACA;;AACA;;AAEO,IAAM,sBAAO,IAAI,aAAM,UAAN,CAAiB,MAArB,CAAP;AACb,IAAI,eAAO,QAAP,EAAiB;AACnB,iBAAO,OAAP,CAAe,MAAf;AAAuB,aAAS,eAAT,GAA2B;AAChD,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAE,aAAa,KAAK,MAAL,EADZ,EAEH,EAAE,eAAe,KAAK,MAAL,EAFd,CAAL;OADK,CAAP,CADgD;KAA3B;;WAAS;KAAhC,EADmB;AASnB,iBAAO,OAAP,CAAe,UAAf;AAA2B,aAAS,mBAAT,CAA6B,SAA7B,EAAwC;AACjE,cAAQ,GAAR,CAAY,SAAZ,EAAsB,kBAAtB,EADiE;AAEjE,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAC,aAAa,KAAK,MAAL,EAAa,eAAe,SAAf,EADxB,EAEH,EAAC,aAAa,SAAb,EAAwB,eAAe,KAAK,MAAL,EAFrC,CAAL;OADK,CAAP,CAFiE;KAAxC;;WAAS;KAApC,EATmB;CAArB;;AAoBA,eAAO,OAAP,CAAe;AACb;wBAAc,MAAM,QAAQ;AAC1B,wBAAM,IAAN,EAAY,MAAZ,EAD0B;;AAG1B,UAAI,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;;AAIA,WAAK,MAAL,CAAY;AACV,gBAAQ;AACN,cAAI,eAAO,MAAP,EAAJ;AACA,gBAAM,eAAO,IAAP,GAAc,QAAd;SAFR;AAIA,kBAAU,MAAV;AACA,iBAAS,IAAT;AACA,cAAM,IAAI,IAAJ,EAAN;AACA,kBAAU,IAAV;OARF,EAP0B;;;;KADf;AAmBb;2BAAiB,KAAK;AACpB,wBAAM,GAAN,EAAW,MAAX,EADoB;AAEpB,UAAI,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;AAGA,WAAK,MAAL,CAAY,GAAZ,EAAiB,EAAE,MAAM,EAAE,UAAU,KAAV,EAAR,EAAnB,EALoB;;;;KAnBT;CAAf","file":"/imports/api/msgs.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Msgs = new Mongo.Collection('msgs');\nif (Meteor.isServer) {\n  Meteor.publish('msgs', function msgsPublication() {\n    return Msgs.find({\n      $or: [\n        { 'sender.id': this.userId },\n        { 'recevier.id': this.userId },\n      ],\n    })\n  })\n  Meteor.publish('chatMsgs', function chatMsgsPublication(friend_id) {\n    console.log(friend_id,'asdsadsdsadasdas')\n    return Msgs.find({\n      $or: [\n        {'sender.id': this.userId, 'recevier.id': friend_id}, \n        {'sender.id': friend_id, 'recevier.id': this.userId}\n      ] \n    })\n  })\n}\n \nMeteor.methods({\n  'msgs.insert'(text, friend) {\n    check(text, String)\n\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n\n    Msgs.insert({\n      sender: {\n        id: Meteor.userId(),\n        name: Meteor.user().username\n      },\n      recevier: friend,\n      content: text,\n      time: new Date(),\n      isUnread: true\n    })\n  },\n  'msgs.setUnread'(_id) {\n    check(_id, String)\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n    Msgs.update(_id, { $set: { isUnread: false } })\n  }\n})"]},"hash":"3fe255c14641f6a12fee9e718a897cced5e4f0eb"}
