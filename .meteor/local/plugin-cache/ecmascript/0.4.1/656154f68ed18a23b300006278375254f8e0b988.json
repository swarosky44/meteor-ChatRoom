{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./accounts_client.js","imported":["AccountsClient"],"specifiers":[{"kind":"named","imported":"AccountsClient","local":"AccountsClient"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-base/localstorage_token.js","filenameRelative":"/packages/accounts-base/localstorage_token.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-base/localstorage_token.js.map","sourceFileName":"/packages/accounts-base/localstorage_token.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"localstorage_token"},"ignored":false,"code":"var _accounts_client = require(\"./accounts_client.js\");\n\nvar Ap = _accounts_client.AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{ resume: token }]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (!self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};","ast":null,"map":{"version":3,"sources":["/packages/accounts-base/localstorage_token.js"],"names":[],"mappings":"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","file":"/packages/accounts-base/localstorage_token.js.map","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n"]},"hash":"656154f68ed18a23b300006278375254f8e0b988"}
