{"metadata":{"usedHelpers":["classCallCheck","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/react-meteor-data/ReactMeteorData.jsx","filenameRelative":"/packages/react-meteor-data/ReactMeteorData.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourceFileName":"/packages/react-meteor-data/ReactMeteorData.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ReactMeteorData"},"ignored":false,"code":"exports.__esModule = true;\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar ReactMeteorData = {\n  componentWillMount: function () {\n    function componentWillMount() {\n      this.data = {};\n      this._meteorDataManager = new MeteorDataManager(this);\n      var newData = this._meteorDataManager.calculateData();\n      this._meteorDataManager.updateData(newData);\n    }\n\n    return componentWillMount;\n  }(),\n  componentWillUpdate: function () {\n    function componentWillUpdate(nextProps, nextState) {\n      var saveProps = this.props;\n      var saveState = this.state;\n      var newData = void 0;\n      try {\n        // Temporarily assign this.state and this.props,\n        // so that they are seen by getMeteorData!\n        // This is a simulation of how the proposed Observe API\n        // for React will work, which calls observe() after\n        // componentWillUpdate and after props and state are\n        // updated, but before render() is called.\n        // See https://github.com/facebook/react/issues/3398.\n        this.props = nextProps;\n        this.state = nextState;\n        newData = this._meteorDataManager.calculateData();\n      } finally {\n        this.props = saveProps;\n        this.state = saveState;\n      }\n\n      this._meteorDataManager.updateData(newData);\n    }\n\n    return componentWillUpdate;\n  }(),\n  componentWillUnmount: function () {\n    function componentWillUnmount() {\n      this._meteorDataManager.dispose();\n    }\n\n    return componentWillUnmount;\n  }()\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\n\nvar MeteorDataManager = function () {\n  function MeteorDataManager(component) {\n    (0, _classCallCheck3[\"default\"])(this, MeteorDataManager);\n\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  MeteorDataManager.prototype.dispose = function () {\n    function dispose() {\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n    }\n\n    return dispose;\n  }();\n\n  MeteorDataManager.prototype.calculateData = function () {\n    function calculateData() {\n      var component = this.component;\n\n      if (!component.getMeteorData) {\n        return null;\n      }\n\n      // When rendering on the server, we don't want to use the Tracker.\n      // We only do the first rendering on the server so we can get the data right away\n      if (Meteor.isServer) {\n        return component.getMeteorData();\n      }\n\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n\n      var data = void 0;\n      // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n      // This can happen if someone calls `ReactDOM.render` inside a Computation.\n      // In that case, we want to opt out of the normal behavior of nested\n      // Computations, where if the outer one is invalidated or stopped,\n      // it stops the inner one.\n      this.computation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function (c) {\n          if (c.firstRun) {\n            var savedSetState = component.setState;\n            try {\n              component.setState = function () {\n                throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n              };\n\n              data = component.getMeteorData();\n            } finally {\n              component.setState = savedSetState;\n            }\n          } else {\n            // Stop this computation instead of using the re-run.\n            // We use a brand-new autorun for each call to getMeteorData\n            // to capture dependencies on any reactive data sources that\n            // are accessed.  The reason we can't use a single autorun\n            // for the lifetime of the component is that Tracker only\n            // re-runs autoruns at flush time, while we need to be able to\n            // re-call getMeteorData synchronously whenever we want, e.g.\n            // from componentWillUpdate.\n            c.stop();\n            // Calling forceUpdate() triggers componentWillUpdate which\n            // recalculates getMeteorData() and re-renders the component.\n            component.forceUpdate();\n          }\n        });\n      });\n\n      if (Package.mongo && Package.mongo.Mongo) {\n        Object.keys(data).forEach(function (key) {\n          if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n            console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n          }\n        });\n      }\n\n      return data;\n    }\n\n    return calculateData;\n  }();\n\n  MeteorDataManager.prototype.updateData = function () {\n    function updateData(newData) {\n      var component = this.component;\n      var oldData = this.oldData;\n\n      if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : (0, _typeof3[\"default\"])(newData)) === 'object')) {\n        throw new Error(\"Expected object returned from getMeteorData\");\n      }\n      // update componentData in place based on newData\n      for (var key in meteorBabelHelpers.sanitizeForInObject(newData)) {\n        component.data[key] = newData[key];\n      }\n      // if there is oldData (which is every time this method is called\n      // except the first), delete keys in newData that aren't in\n      // oldData.  don't interfere with other keys, in case we are\n      // co-existing with something else that writes to a component's\n      // this.data.\n      if (oldData) {\n        for (var _key in meteorBabelHelpers.sanitizeForInObject(oldData)) {\n          if (!(_key in newData)) {\n            delete component.data[_key];\n          }\n        }\n      }\n      this.oldData = newData;\n    }\n\n    return updateData;\n  }();\n\n  return MeteorDataManager;\n}();\n\nexports[\"default\"] = ReactMeteorData;","ast":null,"map":{"version":3,"sources":["/packages/react-meteor-data/ReactMeteorData.jsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAM,kBAAkB;AACtB;kCAAqB;AACnB,WAAK,IAAL,GAAY,EAAZ,CADmB;AAEnB,WAAK,kBAAL,GAA0B,IAAI,iBAAJ,CAAsB,IAAtB,CAA1B,CAFmB;AAGnB,UAAM,UAAU,KAAK,kBAAL,CAAwB,aAAxB,EAAV,CAHa;AAInB,WAAK,kBAAL,CAAwB,UAAxB,CAAmC,OAAnC,EAJmB;;;;KADC;AAOtB;iCAAoB,WAAW,WAAW;AACxC,UAAM,YAAY,KAAK,KAAL,CADsB;AAExC,UAAM,YAAY,KAAK,KAAL,CAFsB;AAGxC,UAAI,gBAAJ,CAHwC;AAIxC,UAAI;;;;;;;;AAQF,aAAK,KAAL,GAAa,SAAb,CARE;AASF,aAAK,KAAL,GAAa,SAAb,CATE;AAUF,kBAAU,KAAK,kBAAL,CAAwB,aAAxB,EAAV,CAVE;OAAJ,SAWU;AACR,aAAK,KAAL,GAAa,SAAb,CADQ;AAER,aAAK,KAAL,GAAa,SAAb,CAFQ;OAXV;;AAgBA,WAAK,kBAAL,CAAwB,UAAxB,CAAmC,OAAnC,EApBwC;;;;KAPpB;AA6BtB;oCAAuB;AACrB,WAAK,kBAAL,CAAwB,OAAxB,GADqB;;;;KA7BD;CAAlB;;;;;IAoCA;AACJ,WADI,iBACJ,CAAY,SAAZ,EAAuB;2CADnB,mBACmB;;AACrB,SAAK,SAAL,GAAiB,SAAjB,CADqB;AAErB,SAAK,WAAL,GAAmB,IAAnB,CAFqB;AAGrB,SAAK,OAAL,GAAe,IAAf,CAHqB;GAAvB;;AADI,8BAOJ;uBAAU;AACR,UAAI,KAAK,WAAL,EAAkB;AACpB,aAAK,WAAL,CAAiB,IAAjB,GADoB;AAEpB,aAAK,WAAL,GAAmB,IAAnB,CAFoB;OAAtB;;;;;;AARE,8BAcJ;6BAAgB;AACd,UAAM,YAAY,KAAK,SAAL,CADJ;;AAGd,UAAI,CAAE,UAAU,aAAV,EAAyB;AAC7B,eAAO,IAAP,CAD6B;OAA/B;;;;AAHc,UASV,OAAO,QAAP,EAAiB;AACnB,eAAO,UAAU,aAAV,EAAP,CADmB;OAArB;;AAIA,UAAI,KAAK,WAAL,EAAkB;AACpB,aAAK,WAAL,CAAiB,IAAjB,GADoB;AAEpB,aAAK,WAAL,GAAmB,IAAnB,CAFoB;OAAtB;;AAKA,UAAI,aAAJ;;;;;;AAlBc,UAwBd,CAAK,WAAL,GAAmB,QAAQ,WAAR,CAAoB,YAAM;AAC3C,eAAO,QAAQ,OAAR,CAAgB,UAAC,CAAD,EAAO;AAC5B,cAAI,EAAE,QAAF,EAAY;AACd,gBAAM,gBAAgB,UAAU,QAAV,CADR;AAEd,gBAAI;AACF,wBAAU,QAAV,GAAqB,YAAM;AACzB,sBAAM,IAAI,KAAJ,CACpB,gFACA,2EADA,GAEA,8EAFA,GAGA,0EAHA,GAIA,mBAJA,CADc,CADyB;eAAN,CADnB;;AAUF,qBAAO,UAAU,aAAV,EAAP,CAVE;aAAJ,SAWU;AACR,wBAAU,QAAV,GAAqB,aAArB,CADQ;aAXV;WAFF,MAgBO;;;;;;;;;AASL,cAAE,IAAF;;;AATK,qBAYL,CAAU,WAAV,GAZK;WAhBP;SADqB,CAAvB,CAD2C;OAAN,CAAvC,CAxBc;;AA2Dd,UAAI,QAAQ,KAAR,IAAiB,QAAQ,KAAR,CAAc,KAAd,EAAqB;AACxC,eAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAU,GAAV,EAAe;AACvC,cAAI,KAAK,GAAL,aAAqB,QAAQ,KAAR,CAAc,KAAd,CAAoB,MAApB,EAA4B;AACnD,oBAAQ,IAAR,CACR,8EACA,2EADA,GAEA,sBAFA,CADQ,CADmD;WAArD;SADwB,CAA1B,CADwC;OAA1C;;AAWA,aAAO,IAAP,CAtEc;;;;;;AAdZ,8BAuFJ;wBAAW,SAAS;AAClB,UAAM,YAAY,KAAK,SAAL,CADA;AAElB,UAAM,UAAU,KAAK,OAAL,CAFE;;AAIlB,UAAI,EAAG,WAAW,QAAQ,0EAAR,KAAqB,QAArB,CAAd,EAA8C;AAChD,cAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN,CADgD;OAAlD;;AAJkB,WAQb,IAAI,GAAJ,2CAAW,QAAhB,EAAyB;AACvB,kBAAU,IAAV,CAAe,GAAf,IAAsB,QAAQ,GAAR,CAAtB,CADuB;OAAzB;;;;;;AARkB,UAgBd,OAAJ,EAAa;AACX,aAAK,IAAI,IAAJ,2CAAW,QAAhB,EAAyB;AACvB,cAAI,EAAE,QAAO,OAAP,CAAF,EAAmB;AACrB,mBAAO,UAAU,IAAV,CAAe,IAAf,CAAP,CADqB;WAAvB;SADF;OADF;AAOA,WAAK,OAAL,GAAe,OAAf,CAvBkB;;;;;;SAvFhB;;;qBAkHS","file":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourcesContent":["const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n"]},"hash":"6a23bfeb865e1fb1c78c7a626c85da79afb41e41"}
