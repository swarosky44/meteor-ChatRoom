{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/email_tests.js","filenameRelative":"/packages/accounts-password/email_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/email_tests.js.map","sourceFileName":"/packages/accounts-password/email_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"email_tests"},"ignored":false,"code":"var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [function (test, expect) {\n  var _this = this;\n\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n  // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n  Accounts.createUser({ email: \"another@example.com\" + this.randomSuffix, password: 'foobar' }, expect(function (error) {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", _this.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({ email: this.email }, expect(function (error) {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n    var options = result[1];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\ntestAsyncMulti(\"accounts emails - reset password flow with case insensitive email\", [function (test, expect) {\n  var _this2 = this;\n\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n  // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n  Accounts.createUser({ email: \"another@example.com\" + this.randomSuffix, password: 'foobar' }, expect(function (error) {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", _this2.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({ email: \"ada-intercept@example.com\" + this.randomSuffix }, expect(function (error) {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n    var options = result[1];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, \"newPassword\", expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getVerifyEmailToken = function getVerifyEmailToken(email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    verifyEmailToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\nvar loggedIn = function loggedIn(test, expect) {\n  return expect(function (error) {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [function (test, expect) {\n  this.email = Random.id() + \"-intercept@example.com\";\n  this.anotherEmail = Random.id() + \"-intercept@example.com\";\n  Accounts.createUser({ email: this.email, password: 'foobar' }, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isFalse(Meteor.user().emails[0].verified);\n  // We should NOT be publishing things like verification tokens!\n  test.isFalse(_.has(Meteor.user(), 'services'));\n}, function (test, expect) {\n  getVerifyEmailToken(this.email, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in.\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  var _this3 = this;\n\n  Accounts.connection.call(\"addEmailForTestAndVerify\", this.anotherEmail, expect(function (error, result) {\n    test.isFalse(error);\n    test.equal(Meteor.user().emails.length, 2);\n    test.equal(Meteor.user().emails[1].address, _this3.anotherEmail);\n    test.isFalse(Meteor.user().emails[1].verified);\n  }));\n}, function (test, expect) {\n  getVerifyEmailToken(this.anotherEmail, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in. (And if we don't\n  // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n  test.isTrue(Meteor.user().emails[1].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getEnrollAccountToken = function getEnrollAccountToken(email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect(function (error, result) {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    enrollAccountToken = match[1];\n    test.isTrue(options.html.match(re));\n\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [function (test, expect) {\n  var _this4 = this;\n\n  this.email = Random.id() + \"-intercept@example.com\";\n  Accounts.connection.call(\"createUserOnServer\", this.email, expect(function (error, result) {\n    test.isFalse(error);\n    var user = result;\n    test.equal(user.emails.length, 1);\n    test.equal(user.emails[0].address, _this4.email);\n    test.isFalse(user.emails[0].verified);\n  }));\n}, function (test, expect) {\n  getEnrollAccountToken(this.email, test, expect);\n}, function (test, expect) {\n  Accounts.resetPassword(enrollAccountToken, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({ email: this.email }, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(function (error) {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/email_tests.js"],"names":[],"mappings":"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","file":"/packages/accounts-password/email_tests.js.map","sourcesContent":["var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: this.email}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\ntestAsyncMulti(`accounts emails - \\\nreset password flow with case insensitive email`, [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: \"ada-intercept@example.com\" + this.randomSuffix}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getVerifyEmailToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n      var match = options.text.match(re);\n      test.isTrue(match);\n      verifyEmailToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\nvar loggedIn = function (test, expect) {\n  return expect((error) => {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    this.anotherEmail = Random.id() + \"-intercept@example.com\";\n    Accounts.createUser(\n      {email: this.email, password: 'foobar'},\n      loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isFalse(Meteor.user().emails[0].verified);\n    // We should NOT be publishing things like verification tokens!\n    test.isFalse(_.has(Meteor.user(), 'services'));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in.\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"addEmailForTestAndVerify\", this.anotherEmail,\n      expect((error, result) => {\n        test.isFalse(error);\n        test.equal(Meteor.user().emails.length, 2);\n        test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n        test.isFalse(Meteor.user().emails[1].verified);\n      }));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.anotherEmail, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in. (And if we don't\n    // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n    test.isTrue(Meteor.user().emails[1].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getEnrollAccountToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\")\n      var match = options.text.match(re);\n      test.isTrue(match);\n      enrollAccountToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    Accounts.connection.call(\"createUserOnServer\", this.email,\n      expect((error, result) => {\n        test.isFalse(error);\n        var user = result;\n        test.equal(user.emails.length, 1);\n        test.equal(user.emails[0].address, this.email);\n        test.isFalse(user.emails[0].verified);\n      }));\n  },\n  function (test, expect) {\n    getEnrollAccountToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    Accounts.resetPassword(enrollAccountToken, 'password',\n                           loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword({email: this.email}, 'password',\n                             loggedIn(test ,expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n"]},"hash":"6b300af7a0e873e7175a6f362090d67c497228bd"}
