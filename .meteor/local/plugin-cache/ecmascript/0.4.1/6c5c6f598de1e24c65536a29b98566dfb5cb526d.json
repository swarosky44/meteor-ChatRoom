{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/password_tests.js","filenameRelative":"/packages/accounts-password/password_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/password_tests.js.map","sourceFileName":"/packages/accounts-password/password_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"password_tests"},"ignored":false,"code":"Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n\n  Meteor.methods({\n    getResetToken: function () {\n      function getResetToken() {\n        var token = Meteor.users.findOne(this.userId).services.password.reset;\n        return token;\n      }\n\n      return getResetToken;\n    }(),\n    addSkipCaseInsensitiveChecksForTest: function () {\n      function addSkipCaseInsensitiveChecksForTest(value) {\n        Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n      }\n\n      return addSkipCaseInsensitiveChecksForTest;\n    }(),\n    removeSkipCaseInsensitiveChecksForTest: function () {\n      function removeSkipCaseInsensitiveChecksForTest(value) {\n        delete Accounts._skipCaseInsensitiveChecksForTest[value];\n      }\n\n      return removeSkipCaseInsensitiveChecksForTest;\n    }(),\n    countUsersOnServer: function () {\n      function countUsersOnServer(query) {\n        return Meteor.users.find(query).count();\n      }\n\n      return countUsersOnServer;\n    }()\n  });\n}\n\nif (Meteor.isClient) (function () {\n\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function addSkipCaseInsensitiveChecksForTest(value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function removeSkipCaseInsensitiveChecksForTest(value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function createUserStep(test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email = \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  };\n  var logoutStep = function logoutStep(test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.user(), null);\n    }));\n  };\n  var loggedInAs = function loggedInAs(someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n  var loggedInUserHasEmail = function loggedInUserHasEmail(someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function (email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n  var expectError = function expectError(expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n  var expectUserNotFound = function expectUserNotFound(test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n  var waitForLoggedOutStep = function waitForLoggedOutStep(test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n  var invalidateLoginsStep = function invalidateLoginsStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var hideActualLoginErrorStep = function hideActualLoginErrorStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var validateLoginsStep = function validateLoginsStep(test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.notEqual(Meteor.userId(), null);\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // This next step tests reactive contexts which are reactive on\n  // Meteor.user().\n  function (test, expect) {\n    // Set up a reactive context that only refreshes when Meteor.user() is\n    // invalidated.\n    var loaded = false;\n    var handle = Tracker.autorun(function () {\n      if (Meteor.user() && Meteor.user().emails) loaded = true;\n    });\n    // At the beginning, we're not logged in.\n    test.isFalse(loaded);\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.equal(error, undefined);\n      test.notEqual(Meteor.userId(), null);\n      // By the time of the login callback, the user should be loaded.\n      test.isTrue(Meteor.user().emails);\n      // Flushing should get us the rerun as well.\n      Tracker.flush();\n      test.isTrue(loaded);\n      handle.stop();\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({ email: this.email }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - plain text passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n\n    // create user with raw password (no API, need to invoke callLoginMethod\n    // directly)\n    Accounts.callLoginMethod({\n      methodName: 'createUser',\n      methodArguments: [{ username: this.username, password: this.password }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep,\n  // check can login normally with this password.\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // plain text password. no API for this, have to invoke callLoginMethod\n  // directly.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      // wrong password\n      methodArguments: [{ user: { username: this.username }, password: 'wrong' }],\n      userCallback: expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      }) });\n  }, function (test, expect) {\n    Accounts.callLoginMethod({\n      // right password\n      methodArguments: [{ user: { username: this.username },\n        password: this.password }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [createUserStep, logoutStep,\n  // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"adalovelace\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"with non-ASCII characters\", [function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = '√ÅdaL√òvelaüòàe' + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep,\n  // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"√°dal√∏velaüòàe\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should escape regex special characters\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a regex expression for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \".+\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should require a match of the full string\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a partial match for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"lovelace\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'Adalovelace' + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  },\n  // Create another user with a username that only differs in case\n  function (test, expect) {\n    Accounts.createUser({ username: this.otherUsername, password: this.password }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  },\n  // We shouldn't be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: \"adalovelace\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  },\n  // We should still be able to log in with the username in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({ username: this.username }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"username\", [createUserStep, logoutStep,\n  // Attempting to create another user with a username that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newUsername = 'adalovelace' + this.randomSuffix;\n    Accounts.createUser({ username: this.newUsername, password: this.password }, expectError(new Meteor.Error(403, \"Username already exists.\"), test, expect));\n  },\n  // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', { username: this.newUsername }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [createUserStep, logoutStep,\n  // We should be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"ada-intercept@lovelace.com\" + this.randomSuffix }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"escape regex special characters\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a regex expression for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \".+\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"require a match of the full string\", [createUserStep, logoutStep,\n  // We shouldn't be able to log in with a partial match for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"com\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'AdaLovelace' + Random.id(10);\n    this.otherEmail = \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n  },\n  // Create another user with an email that only differs in case\n  function (test, expect) {\n    Accounts.createUser({ username: this.otherUsername,\n      email: this.otherEmail,\n      password: this.password }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  }, logoutStep,\n  // We shouldn't be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: \"ada-intercept@lovelace.com\" + this.randomSuffix }, this.password, expectUserNotFound(test, expect));\n  },\n  // We should still be able to log in with the email in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({ email: this.email }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"email\", [createUserStep, logoutStep,\n  // Attempting to create another user with an email that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newEmail = \"ada-intercept@lovelace.com\" + this.randomSuffix;\n    Accounts.createUser({ email: this.newEmail, password: this.password }, expectError(new Meteor.Error(403, \"Email already exists.\"), test, expect));\n  },\n  // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', { 'emails.address': this.newEmail }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - changing passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  },\n  // Send a password reset email so that we can test that password\n  // reset tokens get deleted on password change.\n  function (test, expect) {\n    Meteor.call(\"forgotPassword\", { email: this.email }, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isTrue(token);\n      self.token = token;\n    }));\n  },\n  // change password with bad old password. we stay logged in.\n  function (test, expect) {\n    var self = this;\n    Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n      test.isTrue(error);\n      test.equal(Meteor.user().username, self.username);\n    }));\n  },\n  // change password with good old password.\n  function (test, expect) {\n    Accounts.changePassword(this.password, this.password2, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isFalse(token);\n    }));\n  }, logoutStep,\n  // old password, failed login\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.isFalse(Meteor.user());\n    }));\n  },\n  // new password, success\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password2, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [function (test, expect) {\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n    Accounts.createUser({ username: this.username, email: this.email, password: this.password }, loggedInAs(this.username, test, expect));\n  },\n  // Log in a second connection as this user.\n  function (test, expect) {\n    var self = this;\n\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n    self.secondConn.call('login', { user: { username: self.username }, password: self.password }, expect(function (err, result) {\n      test.isFalse(err);\n      self.secondConn.setUserId(result.id);\n      test.isTrue(self.secondConn.userId());\n\n      self.secondConn.onReconnect = function () {\n        self.secondConn.apply('login', [{ resume: result.token }], { wait: true }, function (err, result) {\n          self.secondConn.setUserId(result && result.id || null);\n        });\n      };\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Accounts.changePassword(self.password, self.password2, expect(function (err) {\n      test.isFalse(err);\n    }));\n  },\n  // Now that we've changed the password, wait until the second\n  // connection gets logged out.\n  function (test, expect) {\n    var self = this;\n    pollUntil(expect, function () {\n      return self.secondConn.userId() === null;\n    }, 10 * 1000, 100);\n  }]);\n\n  testAsyncMulti(\"passwords - new user hooks\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n  },\n  // test Accounts.validateNewUser\n  function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      // should fail the new user validators\n      profile: { invalid: true } }, expect(function (error) {\n      test.equal(error.error, 403);\n      test.equal(error.reason, \"User validation failed\");\n    }));\n  }, logoutStep, function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      // should fail the new user validator with a special\n      // exception\n      profile: { invalidAndThrowException: true } }, expect(function (error) {\n      test.equal(error.reason, \"An exception thrown within Accounts.validateNewUser\");\n    }));\n  },\n  // test Accounts.onCreateUser\n  function (test, expect) {\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - Meteor.user()\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  },\n  // test Meteor.user(). This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    var self = this;\n    var clientUser = Meteor.user();\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(result._id, clientUser._id);\n      test.equal(result.username, clientUser.username);\n      test.equal(result.username, self.username);\n      test.equal(result.profile.touchedByOnCreateUser, true);\n      test.equal(err, undefined);\n    }));\n  }, function (test, expect) {\n    // Test that even with no published fields, we still have a document.\n    Accounts.connection.call('clearUsernameAndProfile', expect(function () {\n      test.isTrue(Meteor.userId());\n      var user = Meteor.user();\n      test.equal(user, { _id: Meteor.userId() });\n    }));\n  }, logoutStep, function (test, expect) {\n    var clientUser = Meteor.user();\n    test.equal(clientUser, null);\n    test.equal(Meteor.userId(), null);\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(err, undefined);\n      test.equal(result, null);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - allow rules\", [\n  // create a second user to have an id for in a later test\n  function (test, expect) {\n    this.otherUsername = Random.id();\n    Accounts.createUser({ username: this.otherUsername, password: 'dontcare',\n      testOnCreateUserHook: true }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    this.otherUserId = Meteor.userId();\n  }, function (test, expect) {\n    // real setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password,\n      testOnCreateUserHook: true }, loggedInAs(this.username, test, expect));\n  },\n  // test the default Meteor.users allow rule. This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    this.userId = Meteor.userId();\n    test.notEqual(this.userId, null);\n    test.notEqual(this.userId, this.otherUserId);\n    // Can't update fields other than profile.\n    Meteor.users.update(this.userId, { $set: { disallowed: true, 'profile.updated': 42 } }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n      test.isFalse(_.has(Meteor.user(), 'disallowed'));\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    }));\n  }, function (test, expect) {\n    // Can't update another user.\n    Meteor.users.update(this.otherUserId, { $set: { 'profile.updated': 42 } }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n    }));\n  }, function (test, expect) {\n    // Can't update using a non-ID selector. (This one is thrown client-side.)\n    test.throws(function () {\n      Meteor.users.update({ username: this.username }, { $set: { 'profile.updated': 42 } });\n    });\n    test.isFalse(_.has(Meteor.user().profile, 'updated'));\n  }, function (test, expect) {\n    // Can update own profile using ID.\n    Meteor.users.update(this.userId, { $set: { 'profile.updated': 42 } }, expect(function (err) {\n      test.isFalse(err);\n      test.equal(42, Meteor.user().profile.updated);\n    }));\n  }, logoutStep]);\n\n  testAsyncMulti(\"passwords - tokens\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    // we can't login with an invalid token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    Meteor.loginWithToken('invalid', expectLoginError);\n  }, function (test, expect) {\n    // we can login with a valid token\n    var expectLoginOK = expect(function (err) {\n      test.isFalse(err);\n    });\n    Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n  }, function (test, expect) {\n    // test logging out invalidates our token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    var token = Accounts._storedLoginToken();\n    test.isTrue(token);\n    Meteor.logout(function () {\n      Meteor.loginWithToken(token, expectLoginError);\n    });\n  }, function (test, expect) {\n    var self = this;\n    // Test that login tokens get expired. We should get logged out when a\n    // token expires, and not be able to log in again with the same token.\n    var expectNoError = expect(function (err) {\n      test.isFalse(err);\n    });\n\n    Meteor.loginWithPassword(this.username, this.password, function (error) {\n      self.token = Accounts._storedLoginToken();\n      test.isTrue(self.token);\n      expectNoError(error);\n      Accounts.connection.call(\"expireTokens\");\n    });\n  }, waitForLoggedOutStep, function (test, expect) {\n    var token = Accounts._storedLoginToken();\n    test.isFalse(token);\n  }, function (test, expect) {\n    // Test that once expireTokens is finished, we can't login again with our\n    // previous token.\n    Meteor.loginWithToken(this.token, expect(function (err, result) {\n      test.isTrue(err);\n      test.equal(Meteor.userId(), null);\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    // Test that Meteor.logoutOtherClients logs out a second\n    // authentcated connection while leaving Accounts.connection\n    // logged in.\n    var secondConn = DDP.connect(Meteor.absoluteUrl());\n    var token;\n\n    var expectSecondConnLoggedOut = expect(function (err, result) {\n      test.isTrue(err);\n    });\n\n    var expectAccountsConnLoggedIn = expect(function (err, result) {\n      test.isFalse(err);\n    });\n\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err);\n      Meteor.logoutOtherClients(function (err) {\n        test.isFalse(err);\n        secondConn.call('login', { resume: token }, expectSecondConnLoggedOut);\n        Accounts.connection.call('login', {\n          resume: Accounts._storedLoginToken()\n        }, expectAccountsConnLoggedIn);\n      });\n    });\n\n    Meteor.loginWithPassword(self.username, self.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      secondConn.call('login', { resume: token }, expectSecondConnLoggedIn);\n    }));\n  }, logoutStep,\n\n  // The tests below this point are for the deprecated\n  // `logoutOtherClients` method.\n\n  function (test, expect) {\n    var self = this;\n\n    // Test that Meteor.logoutOtherClients logs out a second authenticated\n    // connection while leaving Accounts.connection logged in.\n    var token;\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    var expectValidToken = expect(function (err, result) {\n      test.isFalse(err);\n      test.isTrue(result);\n      self.tokenFromLogoutOthers = result.token;\n    });\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err);\n      // This test will fail if an unrelated reconnect triggers before the\n      // connection is logged out. In general our tests aren't resilient to\n      // mid-test reconnects.\n      self.secondConn.onReconnect = function () {\n        self.secondConn.call(\"login\", { resume: token }, expectLoginError);\n      };\n      Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n    });\n\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      self.beforeLogoutOthersToken = token;\n      test.isTrue(token);\n      self.secondConn.call(\"login\", { resume: token }, expectSecondConnLoggedIn);\n    }));\n  },\n  // Test that logoutOtherClients logged out Accounts.connection and that the\n  // previous token is no longer valid.\n  waitForLoggedOutStep, function (test, expect) {\n    var self = this;\n    var token = Accounts._storedLoginToken();\n    test.isFalse(token);\n    this.secondConn.close();\n    Meteor.loginWithToken(self.beforeLogoutOthersToken, expect(function (err) {\n      test.isTrue(err);\n      test.isFalse(Meteor.userId());\n    }));\n  },\n  // Test that logoutOtherClients returned a new token that we can use to\n  // log in.\n  function (test, expect) {\n    var self = this;\n    Meteor.loginWithToken(self.tokenFromLogoutOthers, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(Meteor.userId());\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    // Test that deleting a user logs out that user's connections.\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      Accounts.connection.call(\"removeUser\", self.username);\n    }));\n  }, waitForLoggedOutStep]);\n\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, invalidateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, \"Login forbidden\");\n    }));\n  }, validateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'User not found');\n    }));\n  }, hideActualLoginErrorStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'hide actual error');\n    }));\n  }, validateLoginsStep]);\n\n  testAsyncMulti(\"passwords - server onLogin hook\", [function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isTrue(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isTrue(attempt.allowed);\n      test.equal(attempt.methodArguments[0].username, self.username);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - client onLogin hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n\n    this.onLogin = Accounts.onLogin(function (attempt) {\n      self.attempt = true;\n    });\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    this.onLogin.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"Incorrect password\");\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"User not found\");\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n\n    this.onLoginFailure = Accounts.onLoginFailure(function () {\n      self.attempt = true;\n    });\n\n    Accounts.createUser({ username: this.username, password: this.password }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    this.onLoginFailure.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [logoutStep,\n  // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  },\n  // We are able to login with the old style credentials in the database.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep,\n  // After the upgrade to bcrypt we're still able to login.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"removeUser\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [logoutStep,\n  // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  },\n  // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      methodName: \"login\",\n      methodArguments: [{ user: { username: this.username }, password: \"abcdef\" }],\n      userCallback: expect(function (err) {\n        test.isFalse(err);\n      })\n    });\n  }, function (test, expect) {\n    Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  },\n  // Changing our password should upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  },\n  // And after the upgrade we should be able to change our password again.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep]);\n})();\n\nif (Meteor.isServer) (function () {\n\n  Tinytest.add('passwords - setup more than one onCreateUserHook', function (test) {\n    test.throws(function () {\n      Accounts.onCreateUser(function () {});\n    });\n  });\n\n  Tinytest.add('passwords - createUser hooks', function (test) {\n    var username = Random.id();\n    test.throws(function () {\n      // should fail the new user validators\n      Accounts.createUser({ username: username, profile: { invalid: true } });\n    });\n\n    var userId = Accounts.createUser({ username: username,\n      testOnCreateUserHook: true });\n\n    test.isTrue(userId);\n    var user = Meteor.users.findOne(userId);\n    test.equal(user.profile.touchedByOnCreateUser, true);\n  });\n\n  Tinytest.add('passwords - setPassword', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({ username: username, email: email });\n\n    var user = Meteor.users.findOne(userId);\n    // no services yet.\n    test.equal(user.services.password, undefined);\n\n    // set a new password.\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var oldSaltedHash = user.services.password.bcrypt;\n    test.isTrue(oldSaltedHash);\n\n    // Send a reset password email (setting a reset token) and insert a login\n    // token.\n    Accounts.sendResetPasswordEmail(userId, email);\n    Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n    test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // reset with the same password, see we get a different salted hash\n    Accounts.setPassword(userId, 'new password', { logout: false });\n    user = Meteor.users.findOne(userId);\n    var newSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newSaltedHash);\n    test.notEqual(oldSaltedHash, newSaltedHash);\n    // No more reset token.\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n    // But loginTokens are still here since we did logout: false.\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // reset again, see that the login tokens are gone.\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var newerSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newerSaltedHash);\n    test.notEqual(oldSaltedHash, newerSaltedHash);\n    test.notEqual(newSaltedHash, newerSaltedHash);\n    // No more tokens.\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n    test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n    // cleanup\n    Meteor.users.remove(userId);\n  });\n\n  // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  });\n\n  // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync('passwords - login token observes get cleaned up', function (test, onComplete) {\n    var username = Random.id();\n    Accounts.createUser({\n      username: username,\n      password: 'password'\n    });\n\n    makeTestConnection(test, function (clientConn, serverConn) {\n      serverConn.onClose(function () {\n        test.isFalse(Accounts._getUserObserve(serverConn.id));\n        onComplete();\n      });\n      var result = clientConn.call('login', {\n        user: { username: username },\n        password: 'password'\n      });\n      test.isTrue(result);\n      var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n      test.isTrue(token);\n\n      // We poll here, instead of just checking `_getUserObserve`\n      // once, because the login method defers the creation of the\n      // observe, and setting up the observe yields, so we could end\n      // up here before the observe has been set up.\n      simplePoll(function () {\n        return !!Accounts._getUserObserve(serverConn.id);\n      }, function () {\n        test.isTrue(Accounts._getUserObserve(serverConn.id));\n        clientConn.disconnect();\n      }, function () {\n        test.fail(\"timed out waiting for user observe for connection \" + serverConn.id);\n        onComplete();\n      });\n    }, onComplete);\n  });\n\n  Tinytest.add('passwords - reset password doesn\\t work if email changed after email sent', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n\n    var user = Meteor.users.findOne(userId);\n\n    Accounts.sendResetPasswordEmail(userId, email);\n\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n\n    var newEmail = Random.id() + '-new@example.com';\n    Meteor.users.update(userId, { $set: { \"emails.0.address\": newEmail } });\n\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n    }, /Token has invalid email address/);\n    test.throws(function () {\n      Meteor.call(\"login\", { user: { username: username }, password: \"new-password\" });\n    }, /Incorrect password/);\n  });\n\n  // We should be able to change the username\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).username, newUsername);\n\n    // Test findUserByUsername as well while we're here\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - change username to a new one only differing \" + \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).username, newUsername);\n  });\n\n  // We should not be able to change the username to one that only\n  // differs in case from an existing one\n  Tinytest.add(\"passwords - change username should fail when there are \" + \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n\n    test.equal(Accounts._findUserByQuery({ id: userId2 }).username, user2OriginalUsername);\n  });\n\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: newEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    // Test findUserByEmail as well while we're here\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - add email when the user has an existing email \" + \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: thirdEmail, verified: true }, { address: newEmail, verified: false }]);\n  });\n\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" + \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n\n    test.equal(Accounts._findUserByQuery({ id: userId1 }).emails, [{ address: user1Email, verified: false }]);\n\n    test.equal(Accounts._findUserByQuery({ id: userId2 }).emails, [{ address: user2Email, verified: false }]);\n  });\n\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: newEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    Accounts.removeEmail(userId, newEmail);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: origEmail, verified: false }, { address: thirdEmail, verified: true }]);\n\n    Accounts.removeEmail(userId, origEmail);\n\n    test.equal(Accounts._findUserByQuery({ id: userId }).emails, [{ address: thirdEmail, verified: true }]);\n  });\n})();","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/password_tests.js"],"names":[],"mappings":"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","file":"/packages/accounts-password/password_tests.js.map","sourcesContent":["Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n  \n  Meteor.methods({\n    getResetToken: function () {\n      var token = Meteor.users.findOne(this.userId).services.password.reset;\n      return token;\n    },\n    addSkipCaseInsensitiveChecksForTest: function (value) {\n      Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n    },\n    removeSkipCaseInsensitiveChecksForTest: function (value) {\n      delete Accounts._skipCaseInsensitiveChecksForTest[value];\n    },\n    countUsersOnServer: function (query) {\n      return Meteor.users.find(query).count();\n    }\n  });\n}\n\nif (Meteor.isClient) (function () {\n\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email =  \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser(\n      {username: this.username, email: this.email, password: this.password},\n      loggedInAs(this.username, test, expect));\n  };\n  var logoutStep = function (test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.user(), null);\n    }));\n  };\n  var loggedInAs = function (someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n  var loggedInUserHasEmail = function (someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function(email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n  var expectError = function (expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n  var expectUserNotFound = function (test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n  var waitForLoggedOutStep = function (test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n  var invalidateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var hideActualLoginErrorStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var validateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      test.notEqual(Meteor.userId(), null);\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // This next step tests reactive contexts which are reactive on\n    // Meteor.user().\n    function (test, expect) {\n      // Set up a reactive context that only refreshes when Meteor.user() is\n      // invalidated.\n      var loaded = false;\n      var handle = Tracker.autorun(function () {\n        if (Meteor.user() && Meteor.user().emails)\n          loaded = true;\n      });\n      // At the beginning, we're not logged in.\n      test.isFalse(loaded);\n      Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n        test.equal(error, undefined);\n        test.notEqual(Meteor.userId(), null);\n        // By the time of the login callback, the user should be loaded.\n        test.isTrue(Meteor.user().emails);\n        // Flushing should get us the rerun as well.\n        Tracker.flush();\n        test.isTrue(loaded);\n        handle.stop();\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({email: this.email}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - plain text passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      // create user with raw password (no API, need to invoke callLoginMethod\n      // directly)\n      Accounts.callLoginMethod({\n        methodName: 'createUser',\n        methodArguments: [{username: this.username, password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep,\n    // check can login normally with this password.\n    function(test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // plain text password. no API for this, have to invoke callLoginMethod\n    // directly.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // wrong password\n        methodArguments: [{user: {username: this.username}, password: 'wrong'}],\n        userCallback: expect(function (error) {\n          test.isTrue(error);\n          test.isFalse(Meteor.user());\n        })});\n    },\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // right password\n        methodArguments: [{user: {username: this.username},\n                           password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"with non-ASCII characters\", [\n    function (test, expect) {\n      // Hack because Tinytest does not clean the database between tests/runs\n      this.randomSuffix = Random.id(10);\n      this.username = '√ÅdaL√òvelaüòàe' + this.randomSuffix;\n      this.password = 'password';\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"√°dal√∏velaüòàe\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"should escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n     \"should require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"lovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'Adalovelace' + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // Create another user with a username that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername, password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // We shouldn't be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the username in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: this.username },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"username\", [\n    createUserStep,\n    logoutStep,\n    // Attempting to create another user with a username that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newUsername = 'adalovelace' + this.randomSuffix;\n      Accounts.createUser(\n        { username: this.newUsername, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Username already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { username: this.newUsername },\n        expect(function (error, result) {\n          test.equal(result, 0);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n      \"escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n     \"require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'AdaLovelace' + Random.id(10);\n      this.otherEmail =  \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n    },\n    // Create another user with an email that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername,\n          email: this.otherEmail,\n          password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    logoutStep,\n    // We shouldn't be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the email in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: this.email },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"email\", [\n    createUserStep,\n    logoutStep,\n    // Attempting to create another user with an email that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newEmail =  \"ada-intercept@lovelace.com\" + this.randomSuffix;\n      Accounts.createUser(\n        { email: this.newEmail, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Email already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { 'emails.address': this.newEmail },\n        expect (function (error, result) {\n          test.equal(result, 0);\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - changing passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Send a password reset email so that we can test that password\n    // reset tokens get deleted on password change.\n    function (test, expect) {\n      Meteor.call(\"forgotPassword\",\n        { email: this.email }, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isTrue(token);\n        self.token = token;\n      }));\n    },\n    // change password with bad old password. we stay logged in.\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n        test.isTrue(error);\n        test.equal(Meteor.user().username, self.username);\n      }));\n    },\n    // change password with good old password.\n    function (test, expect) {\n      Accounts.changePassword(this.password, this.password2,\n                              loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isFalse(token);\n      }));\n    },\n    logoutStep,\n    // old password, failed login\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      }));\n    },\n    // new password, success\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password2,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Log in a second connection as this user.\n    function (test, expect) {\n      var self = this;\n\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n      self.secondConn.call('login',\n                { user: { username: self.username }, password: self.password },\n                expect(function (err, result) {\n                  test.isFalse(err);\n                  self.secondConn.setUserId(result.id);\n                  test.isTrue(self.secondConn.userId());\n\n                  self.secondConn.onReconnect = function () {\n                    self.secondConn.apply(\n                      'login',\n                      [{ resume: result.token }],\n                      { wait: true },\n                      function (err, result) {\n                        self.secondConn.setUserId(result && result.id || null);\n                      }\n                    );\n                  };\n                }));\n    },\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword(self.password, self.password2, expect(function (err) {\n        test.isFalse(err);\n      }));\n    },\n    // Now that we've changed the password, wait until the second\n    // connection gets logged out.\n    function (test, expect) {\n      var self = this;\n      pollUntil(expect, function () {\n        return self.secondConn.userId() === null;\n      }, 10 * 1000, 100);\n    }\n  ]);\n\n\n  testAsyncMulti(\"passwords - new user hooks\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n    },\n    // test Accounts.validateNewUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validators\n         profile: {invalid: true}},\n        expect(function (error) {\n          test.equal(error.error, 403);\n          test.equal(error.reason, \"User validation failed\");\n        }));\n    },\n    logoutStep,\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validator with a special\n         // exception\n         profile: {invalidAndThrowException: true}},\n        expect(function (error) {\n          test.equal(\n            error.reason,\n            \"An exception thrown within Accounts.validateNewUser\");\n        }));\n    },\n    // test Accounts.onCreateUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    function(test, expect) {\n      test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - Meteor.user()\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test Meteor.user(). This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      var self = this;\n      var clientUser = Meteor.user();\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(result._id, clientUser._id);\n        test.equal(result.username, clientUser.username);\n        test.equal(result.username, self.username);\n        test.equal(result.profile.touchedByOnCreateUser, true);\n        test.equal(err, undefined);\n      }));\n    },\n    function(test, expect) {\n      // Test that even with no published fields, we still have a document.\n      Accounts.connection.call('clearUsernameAndProfile', expect(function() {\n        test.isTrue(Meteor.userId());\n        var user = Meteor.user();\n        test.equal(user, {_id: Meteor.userId()});\n      }));\n    },\n    logoutStep,\n    function(test, expect) {\n      var clientUser = Meteor.user();\n      test.equal(clientUser, null);\n      test.equal(Meteor.userId(), null);\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(err, undefined);\n        test.equal(result, null);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - allow rules\", [\n    // create a second user to have an id for in a later test\n    function (test, expect) {\n      this.otherUsername = Random.id();\n      Accounts.createUser(\n        {username: this.otherUsername, password: 'dontcare',\n         testOnCreateUserHook: true},\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      this.otherUserId = Meteor.userId();\n    },\n    function (test, expect) {\n      // real setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test the default Meteor.users allow rule. This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      this.userId = Meteor.userId();\n      test.notEqual(this.userId, null);\n      test.notEqual(this.userId, this.otherUserId);\n      // Can't update fields other than profile.\n      Meteor.users.update(\n        this.userId, {$set: {disallowed: true, 'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n          test.isFalse(_.has(Meteor.user(), 'disallowed'));\n          test.isFalse(_.has(Meteor.user().profile, 'updated'));\n        }));\n    },\n    function(test, expect) {\n      // Can't update another user.\n      Meteor.users.update(\n        this.otherUserId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n        }));\n    },\n    function(test, expect) {\n      // Can't update using a non-ID selector. (This one is thrown client-side.)\n      test.throws(function () {\n        Meteor.users.update(\n          {username: this.username}, {$set: {'profile.updated': 42}});\n      });\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    },\n    function(test, expect) {\n      // Can update own profile using ID.\n      Meteor.users.update(\n        this.userId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isFalse(err);\n          test.equal(42, Meteor.user().profile.updated);\n        }));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - tokens\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n\n    function (test, expect) {\n      // we can't login with an invalid token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      Meteor.loginWithToken('invalid', expectLoginError);\n    },\n\n    function (test, expect) {\n      // we can login with a valid token\n      var expectLoginOK = expect(function (err) {\n        test.isFalse(err);\n      });\n      Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n    },\n\n    function (test, expect) {\n      // test logging out invalidates our token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      Meteor.logout(function () {\n        Meteor.loginWithToken(token, expectLoginError);\n      });\n    },\n\n    function (test, expect) {\n      var self = this;\n      // Test that login tokens get expired. We should get logged out when a\n      // token expires, and not be able to log in again with the same token.\n      var expectNoError = expect(function (err) {\n        test.isFalse(err);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, function (error) {\n        self.token = Accounts._storedLoginToken();\n        test.isTrue(self.token);\n        expectNoError(error);\n        Accounts.connection.call(\"expireTokens\");\n      });\n    },\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n    },\n    function (test, expect) {\n      // Test that once expireTokens is finished, we can't login again with our\n      // previous token.\n      Meteor.loginWithToken(this.token, expect(function (err, result) {\n        test.isTrue(err);\n        test.equal(Meteor.userId(), null);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      var self = this;\n      // Test that Meteor.logoutOtherClients logs out a second\n      // authentcated connection while leaving Accounts.connection\n      // logged in.\n      var secondConn = DDP.connect(Meteor.absoluteUrl());\n      var token;\n\n      var expectSecondConnLoggedOut = expect(function (err, result) {\n        test.isTrue(err);\n      });\n\n      var expectAccountsConnLoggedIn = expect(function (err, result) {\n        test.isFalse(err);\n      });\n\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        Meteor.logoutOtherClients(function (err) {\n          test.isFalse(err);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedOut);\n          Accounts.connection.call('login', {\n            resume: Accounts._storedLoginToken()\n          }, expectAccountsConnLoggedIn);\n        });\n      });\n\n      Meteor.loginWithPassword(\n        self.username,\n        self.password,\n        expect(function (err) {\n          test.isFalse(err);\n          token = Accounts._storedLoginToken();\n          test.isTrue(token);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedIn);\n        })\n      );\n    },\n    logoutStep,\n\n    // The tests below this point are for the deprecated\n    // `logoutOtherClients` method.\n\n    function (test, expect) {\n      var self = this;\n\n      // Test that Meteor.logoutOtherClients logs out a second authenticated\n      // connection while leaving Accounts.connection logged in.\n      var token;\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var expectValidToken = expect(function (err, result) {\n        test.isFalse(err);\n        test.isTrue(result);\n        self.tokenFromLogoutOthers = result.token;\n      });\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        // This test will fail if an unrelated reconnect triggers before the\n        // connection is logged out. In general our tests aren't resilient to\n        // mid-test reconnects.\n        self.secondConn.onReconnect = function () {\n          self.secondConn.call(\"login\", { resume: token }, expectLoginError);\n        };\n        Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        token = Accounts._storedLoginToken();\n        self.beforeLogoutOthersToken = token;\n        test.isTrue(token);\n        self.secondConn.call(\"login\", { resume: token },\n                             expectSecondConnLoggedIn);\n      }));\n    },\n    // Test that logoutOtherClients logged out Accounts.connection and that the\n    // previous token is no longer valid.\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var self = this;\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n      this.secondConn.close();\n      Meteor.loginWithToken(\n        self.beforeLogoutOthersToken,\n        expect(function (err) {\n          test.isTrue(err);\n          test.isFalse(Meteor.userId());\n        })\n      );\n    },\n    // Test that logoutOtherClients returned a new token that we can use to\n    // log in.\n    function (test, expect) {\n      var self = this;\n      Meteor.loginWithToken(\n        self.tokenFromLogoutOthers,\n        expect(function (err) {\n          test.isFalse(err);\n          test.isTrue(Meteor.userId());\n        })\n      );\n    },\n    logoutStep,\n\n\n\n    function (test, expect) {\n      var self = this;\n      // Test that deleting a user logs out that user's connections.\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        Accounts.connection.call(\"removeUser\", self.username);\n      }));\n    },\n    waitForLoggedOutStep\n  ]);\n\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    invalidateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        this.username,\n        this.password,\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, \"Login forbidden\");\n        })\n      );\n    },\n    validateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'User not found');\n        })\n      );\n    },\n    hideActualLoginErrorStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'hide actual error');\n        })\n      );\n    },\n    validateLoginsStep\n  ]);\n\n  testAsyncMulti(\"passwords - server onLogin hook\", [\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isTrue(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isTrue(attempt.allowed);\n        test.equal(attempt.methodArguments[0].username, self.username);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLogin hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLogin = Accounts.onLogin(function (attempt) {\n        self.attempt = true;\n      });\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      this.onLogin.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"Incorrect password\");\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"User not found\");\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLoginFailure = Accounts.onLoginFailure(function () {\n        self.attempt = true;\n      })\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      this.onLoginFailure.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // We are able to login with the old style credentials in the database.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    // After the upgrade to bcrypt we're still able to login.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"removeUser\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        methodName: \"login\",\n        methodArguments: [ { user: { username: this.username }, password: \"abcdef\" } ],\n        userCallback: expect(function (err) {\n          test.isFalse(err);\n        })\n      });\n    },\n    function (test, expect) {\n      Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // Changing our password should upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // And after the upgrade we should be able to change our password again.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep\n  ]);\n}) ();\n\n\nif (Meteor.isServer) (function () {\n\n  Tinytest.add(\n    'passwords - setup more than one onCreateUserHook',\n    function (test) {\n      test.throws(function() {\n        Accounts.onCreateUser(function () {});\n      });\n    });\n\n\n  Tinytest.add(\n    'passwords - createUser hooks',\n    function (test) {\n      var username = Random.id();\n      test.throws(function () {\n        // should fail the new user validators\n        Accounts.createUser({username: username, profile: {invalid: true}});\n      });\n\n      var userId = Accounts.createUser({username: username,\n                                        testOnCreateUserHook: true});\n\n      test.isTrue(userId);\n      var user = Meteor.users.findOne(userId);\n      test.equal(user.profile.touchedByOnCreateUser, true);\n    });\n\n\n  Tinytest.add(\n    'passwords - setPassword',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({username: username, email: email});\n\n      var user = Meteor.users.findOne(userId);\n      // no services yet.\n      test.equal(user.services.password, undefined);\n\n      // set a new password.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var oldSaltedHash = user.services.password.bcrypt;\n      test.isTrue(oldSaltedHash);\n\n      // Send a reset password email (setting a reset token) and insert a login\n      // token.\n      Accounts.sendResetPasswordEmail(userId, email);\n      Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n      test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset with the same password, see we get a different salted hash\n      Accounts.setPassword(userId, 'new password', {logout: false});\n      user = Meteor.users.findOne(userId);\n      var newSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newSaltedHash);\n      test.notEqual(oldSaltedHash, newSaltedHash);\n      // No more reset token.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      // But loginTokens are still here since we did logout: false.\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset again, see that the login tokens are gone.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var newerSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newerSaltedHash);\n      test.notEqual(oldSaltedHash, newerSaltedHash);\n      test.notEqual(newSaltedHash, newerSaltedHash);\n      // No more tokens.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // cleanup\n      Meteor.users.remove(userId);\n    });\n\n\n  // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  });\n\n  // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync(\n    'passwords - login token observes get cleaned up',\n    function (test, onComplete) {\n      var username = Random.id();\n      Accounts.createUser({\n        username: username,\n        password: 'password'\n      });\n\n      makeTestConnection(\n        test,\n        function (clientConn, serverConn) {\n          serverConn.onClose(function () {\n            test.isFalse(Accounts._getUserObserve(serverConn.id));\n            onComplete();\n          });\n          var result = clientConn.call('login', {\n            user: {username: username},\n            password: 'password'\n          });\n          test.isTrue(result);\n          var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n          test.isTrue(token);\n\n          // We poll here, instead of just checking `_getUserObserve`\n          // once, because the login method defers the creation of the\n          // observe, and setting up the observe yields, so we could end\n          // up here before the observe has been set up.\n          simplePoll(\n            function () {\n              return !! Accounts._getUserObserve(serverConn.id);\n            },\n            function () {\n              test.isTrue(Accounts._getUserObserve(serverConn.id));\n              clientConn.disconnect();\n            },\n            function () {\n              test.fail(\"timed out waiting for user observe for connection \" +\n                        serverConn.id);\n              onComplete();\n            }\n          );\n        },\n        onComplete\n      );\n    }\n  );\n\n  Tinytest.add(\n    'passwords - reset password doesn\\t work if email changed after email sent',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      var newEmail = Random.id() + '-new@example.com';\n      Meteor.users.update(userId, {$set: {\"emails.0.address\": newEmail}});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n      }, /Token has invalid email address/);\n      test.throws(function () {\n        Meteor.call(\"login\", {user: {username: username}, password: \"new-password\"});\n      }, /Incorrect password/);\n    });\n\n  // We should be able to change the username\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n\n    // Test findUserByUsername as well while we're here\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - change username to a new one only differing \" +\n      \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n  });\n\n  // We should not be able to change the username to one that only\n  // differs in case from an existing one\n  Tinytest.add(\"passwords - change username should fail when there are \" +\n      \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).username,\n      user2OriginalUsername);\n  });\n\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    // Test findUserByEmail as well while we're here\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - add email when the user has an existing email \" +\n      \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true },\n      { address: newEmail, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" +\n      \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId1}).emails, [\n      { address: user1Email, verified: false }\n    ]);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).emails, [\n      { address: user2Email, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, newEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, origEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true }\n    ]);\n  });\n\n}) ();\n"]},"hash":"6c5c6f598de1e24c65536a29b98566dfb5cb526d"}
