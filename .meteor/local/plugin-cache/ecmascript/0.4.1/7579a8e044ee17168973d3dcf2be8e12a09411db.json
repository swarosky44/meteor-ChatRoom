{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":["AccountsCommon"],"specifiers":[{"kind":"local","local":"AccountsCommon","exported":"AccountsCommon"}]}}},"options":{"filename":"/packages/accounts-base/accounts_common.js","filenameRelative":"/packages/accounts-base/accounts_common.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-base/accounts_common.js.map","sourceFileName":"/packages/accounts-base/accounts_common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"accounts_common"},"ignored":false,"code":"exports.__esModule = true;\nexports.AccountsCommon = undefined;\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\n\nvar AccountsCommon = exports.AccountsCommon = function () {\n  function AccountsCommon(options) {\n    (0, _classCallCheck3[\"default\"])(this, AccountsCommon);\n\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n\n\n  AccountsCommon.prototype.userId = function () {\n    function userId() {\n      throw new Error(\"userId method not implemented\");\n    }\n\n    return userId;\n  }();\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n\n\n  AccountsCommon.prototype.user = function () {\n    function user() {\n      var userId = this.userId();\n      return userId ? this.users.findOne(userId) : null;\n    }\n\n    return user;\n  }();\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n\n\n  AccountsCommon.prototype.config = function () {\n    function config(options) {\n      var self = this;\n\n      // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }\n\n      // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n      if (_.has(options, \"oauthSecretKey\")) {\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _.omit(options, \"oauthSecretKey\");\n      }\n\n      // validate option keys\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n      _.each(_.keys(options), function (key) {\n        if (!_.contains(VALID_KEYS, key)) {\n          throw new Error(\"Accounts.config: Invalid key: \" + key);\n        }\n      });\n\n      // set values in Accounts._options\n      _.each(VALID_KEYS, function (key) {\n        if (key in options) {\n          if (key in self._options) {\n            throw new Error(\"Can't set `\" + key + \"` more than once\");\n          }\n          self._options[key] = options[key];\n        }\n      });\n    }\n\n    return config;\n  }();\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n\n\n  AccountsCommon.prototype.onLogin = function () {\n    function onLogin(func) {\n      return this._onLoginHook.register(func);\n    }\n\n    return onLogin;\n  }();\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n\n\n  AccountsCommon.prototype.onLoginFailure = function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n\n    return onLoginFailure;\n  }();\n\n  AccountsCommon.prototype._initConnection = function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n\n    return _initConnection;\n  }();\n\n  AccountsCommon.prototype._getTokenLifetimeMs = function () {\n    function _getTokenLifetimeMs() {\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }\n\n    return _getTokenLifetimeMs;\n  }();\n\n  AccountsCommon.prototype._tokenExpiration = function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n\n    return _tokenExpiration;\n  }();\n\n  AccountsCommon.prototype._tokenExpiresSoon = function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n\n    return _tokenExpiresSoon;\n  }();\n\n  return AccountsCommon;\n}();\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n  this.message = description;\n});\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;","ast":null,"map":{"version":3,"sources":["/packages/accounts-base/accounts_common.js"],"names":[],"mappings":"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","file":"/packages/accounts-base/accounts_common.js.map","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n"]},"hash":"7579a8e044ee17168973d3dcf2be8e12a09411db"}
