{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ecmascript/transpilation-tests.js","filenameRelative":"/packages/ecmascript/transpilation-tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ecmascript/transpilation-tests.js.map","sourceFileName":"/packages/ecmascript/transpilation-tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"transpilation-tests"},"ignored":false,"code":"// These are tests of Babel's generated output.  Write tests here when a runtime\n// test won't do.  Some tests also serve to catch when Babel changes its output,\n// such as when it changes its runtime helpers!\n\nfunction transform(input) {\n  return Babel.compile(input).code;\n};\n\nfunction contains(haystack, needle) {\n  return haystack.indexOf(needle) >= 0;\n};\n\nTinytest.add(\"ecmascript - transpilation - const\", function (test) {\n  // make sure `const` is turned into `var` (rather than passing\n  // through, such as when you have es6.blockScoping on but\n  // es6.constants off)\n  var output = transform('const x = 5;');\n  test.isFalse(contains(output, 'const'));\n  test.isTrue(contains(output, 'var'));\n});\n\nTinytest.add(\"ecmascript - transpilation - class methods\", function (test) {\n  var output = transform('class Foo {\\n  static staticMethod() {\\n    return \\'classy\\';\\n  }\\n\\n  prototypeMethod() {\\n    return \\'prototypical\\';\\n  }\\n\\n  [computedMethod]() {\\n    return \\'computed\\';\\n  }\\n}');\n\n  // test that we are in \"loose\" mode and methods of classes are still\n  // assigned in a simple matter that does rely on Object.defineProperty.\n  test.isTrue(contains(output, 'Foo.staticMethod = function staticMethod('));\n  test.isTrue(contains(output, 'Foo.prototype.prototypeMethod = function prototypeMethod('));\n  test.isTrue(contains(output, 'Foo.prototype[computedMethod] = function ('));\n  test.isFalse(contains(output, 'createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - classCallCheck\", function (test) {\n  var output = transform('\\nclass Foo {\\n  constructor(x) {\\n    this.x = x;\\n  }\\n}');\n\n  // test that the classCallCheck helper is still in use\n  test.isTrue(contains(output, 'helpers/classCallCheck'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - inherits\", function (test) {\n  var output = transform('\\nclass Foo {}\\nclass Bar extends Foo {}\\n');\n\n  test.isTrue(contains(output, 'helpers/inherits'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - bind\", function (test) {\n  var output = transform('\\n  var foo = new Foo(...oneTwo, 3);\\n');\n\n  test.isTrue(output.match(/\\.bind\\b/));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - extends\", function (test) {\n  var output = transform('\\n  var full = {a:1, ...middle, d:4};\\n');\n\n  test.isTrue(contains(output, 'helpers/extends'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectWithoutProperties\", function (test) {\n  var output = transform('\\nvar {a, ...rest} = obj;\\n');\n\n  test.isTrue(contains(output, 'helpers/objectWithoutProperties'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectDestructuringEmpty\", function (test) {\n  var output = transform('\\nvar {} = null;\\n');\n\n  test.isTrue(contains(output, 'helpers/objectDestructuringEmpty'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - taggedTemplateLiteralLoose\", function (test) {\n  var output = transform('\\nvar x = asdf`A${foo}C`\\n');\n\n  test.isTrue(contains(output, 'helpers/taggedTemplateLiteralLoose'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - createClass\", function (test) {\n  var output = transform('\\nclass Foo {\\n  get blah() { return 123; }\\n}\\n');\n\n  test.isTrue(contains(output, 'helpers/createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - flow\", function (test) {\n  var output = transform('var foo = function (one: any, two: number, three?): string {};');\n  test.isTrue(contains(output, '(one, two, three)'));\n});","ast":null,"map":{"version":3,"sources":["/packages/ecmascript/transpilation-tests.js"],"names":[],"mappings":"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","file":"/packages/ecmascript/transpilation-tests.js.map","sourcesContent":["// These are tests of Babel's generated output.  Write tests here when a runtime\n// test won't do.  Some tests also serve to catch when Babel changes its output,\n// such as when it changes its runtime helpers!\n\nfunction transform(input) {\n  return Babel.compile(input).code;\n};\n\nfunction contains(haystack, needle) {\n  return haystack.indexOf(needle) >= 0;\n};\n\nTinytest.add(\"ecmascript - transpilation - const\", (test) => {\n  // make sure `const` is turned into `var` (rather than passing\n  // through, such as when you have es6.blockScoping on but\n  // es6.constants off)\n  const output = transform('const x = 5;');\n  test.isFalse(contains(output, 'const'));\n  test.isTrue(contains(output, 'var'));\n});\n\nTinytest.add(\"ecmascript - transpilation - class methods\", (test) => {\n  const output = transform(\n`class Foo {\n  static staticMethod() {\n    return 'classy';\n  }\n\n  prototypeMethod() {\n    return 'prototypical';\n  }\n\n  [computedMethod]() {\n    return 'computed';\n  }\n}`);\n\n  // test that we are in \"loose\" mode and methods of classes are still\n  // assigned in a simple matter that does rely on Object.defineProperty.\n  test.isTrue(contains(output, 'Foo.staticMethod = function staticMethod('));\n  test.isTrue(contains(output,\n                       'Foo.prototype.prototypeMethod = function prototypeMethod('));\n  test.isTrue(contains(output, 'Foo.prototype[computedMethod] = function ('));\n  test.isFalse(contains(output, 'createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - classCallCheck\", (test) => {\n  const output = transform(`\nclass Foo {\n  constructor(x) {\n    this.x = x;\n  }\n}`);\n\n  // test that the classCallCheck helper is still in use\n  test.isTrue(contains(output, 'helpers/classCallCheck'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - inherits\", (test) => {\n  const output = transform(`\nclass Foo {}\nclass Bar extends Foo {}\n`);\n\n  test.isTrue(contains(output, 'helpers/inherits'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - bind\", (test) => {\n  const output = transform(`\n  var foo = new Foo(...oneTwo, 3);\n`);\n\n  test.isTrue(output.match(/\\.bind\\b/));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - extends\", (test) => {\n  const output = transform(`\n  var full = {a:1, ...middle, d:4};\n`);\n\n  test.isTrue(contains(output, 'helpers/extends'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectWithoutProperties\", (test) => {\n  const output = transform(`\nvar {a, ...rest} = obj;\n`);\n\n  test.isTrue(contains(output, 'helpers/objectWithoutProperties'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectDestructuringEmpty\", (test) => {\n  const output = transform(`\nvar {} = null;\n`);\n\n  test.isTrue(contains(output, 'helpers/objectDestructuringEmpty'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - taggedTemplateLiteralLoose\", (test) => {\n  const output = transform(`\nvar x = asdf\\`A\\${foo}C\\`\n`);\n\n  test.isTrue(contains(output, 'helpers/taggedTemplateLiteralLoose'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - createClass\", (test) => {\n  const output = transform(`\nclass Foo {\n  get blah() { return 123; }\n}\n`);\n\n  test.isTrue(contains(output, 'helpers/createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - flow\", (test) => {\n  const output = transform(\n    'var foo = function (one: any, two: number, three?): string {};');\n  test.isTrue(contains(output, '(one, two, three)'));\n});\n"]},"hash":"87b10ab7161aade96b022985da1e1879efa5dcb8"}
