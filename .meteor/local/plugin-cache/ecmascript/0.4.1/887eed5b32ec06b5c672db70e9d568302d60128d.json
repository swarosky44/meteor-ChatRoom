{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/http/test_responder.js","filenameRelative":"/packages/http/test_responder.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/http/test_responder.js.map","sourceFileName":"/packages/http/test_responder.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"test_responder"},"ignored":false,"code":"var TEST_RESPONDER_ROUTE = \"/http_test_responder\";\n\nvar respond = function respond(req, res) {\n\n  if (req.url.slice(0, 5) === \"/slow\") {\n    setTimeout(function () {\n      res.statusCode = 200;\n      res.end(\"A SLOW RESPONSE\");\n    }, 5000);\n    return;\n  } else if (req.url === \"/fail\") {\n    res.statusCode = 500;\n    res.end(\"SOME SORT OF SERVER ERROR. foo\" + _.times(100, function () {\n      return \"MAKE THIS LONG TO TEST THAT WE TRUNCATE\";\n    }).join(' '));\n    return;\n  } else if (req.url === \"/redirect\") {\n    res.statusCode = 301;\n    // XXX shouldn't be redirecting to a relative URL, per HTTP spec,\n    // but browsers etc. seem to tolerate it.\n    res.setHeader(\"Location\", TEST_RESPONDER_ROUTE + \"/foo\");\n    res.end(\"REDIRECT TO FOO\");\n    return;\n  } else if (req.url.slice(0, 6) === \"/login\") {\n    var username = 'meteor';\n    // get password from query string\n    var password = req.url.slice(7);\n    // realm is displayed in dialog box if one pops up, avoid confusion\n    var realm = TEST_RESPONDER_ROUTE + \"/login\";\n    var validate = function validate(user, pass) {\n      return user === username && pass === password;\n    };\n    var connect = WebAppInternals.NpmModules.connect.module;\n    var checker = connect.basicAuth(validate, realm);\n    var success = false;\n    checker(req, res, function () {\n      success = true;\n    });\n    if (!success) return;\n  } else if (req.url === \"/headers\") {\n    res.statusCode = 201;\n    res.setHeader(\"A-Silly-Header\", \"Tis a\");\n    res.setHeader(\"Another-Silly-Header\", \"Silly place.\");\n    res.end(\"A RESPONSE WITH SOME HEADERS\");\n    return;\n  }\n\n  var chunks = [];\n  req.setEncoding(\"utf8\");\n  req.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n  req.on(\"end\", function () {\n    var body = chunks.join('');\n\n    if (body.charAt(0) === '{') {\n      body = JSON.parse(body);\n    }\n\n    var response_data = {\n      method: req.method,\n      url: req.url,\n      headers: req.headers,\n      body: body\n    };\n    var response_string = \"\";\n    if (req.method !== \"HEAD\") response_string = JSON.stringify(response_data);\n\n    res.statusCode = 200;\n    res.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    res.end(response_string);\n  });\n};\n\nvar run_responder = function run_responder() {\n  WebApp.connectHandlers.stack.unshift({ route: TEST_RESPONDER_ROUTE, handle: respond });\n};\n\nrun_responder();","ast":null,"map":{"version":3,"sources":["/packages/http/test_responder.js"],"names":[],"mappings":"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","file":"/packages/http/test_responder.js.map","sourcesContent":["var TEST_RESPONDER_ROUTE = \"/http_test_responder\";\n\nvar respond = function(req, res) {\n\n  if (req.url.slice(0,5) === \"/slow\") {\n    setTimeout(function() {\n      res.statusCode = 200;\n      res.end(\"A SLOW RESPONSE\");\n    }, 5000);\n    return;\n  } else if (req.url === \"/fail\") {\n    res.statusCode = 500;\n    res.end(\"SOME SORT OF SERVER ERROR. foo\" +\n            _.times(100, function () {\n              return \"MAKE THIS LONG TO TEST THAT WE TRUNCATE\";\n            }).join(' '));\n    return;\n  } else if (req.url === \"/redirect\") {\n    res.statusCode = 301;\n    // XXX shouldn't be redirecting to a relative URL, per HTTP spec,\n    // but browsers etc. seem to tolerate it.\n    res.setHeader(\"Location\", TEST_RESPONDER_ROUTE+\"/foo\");\n    res.end(\"REDIRECT TO FOO\");\n    return;\n  } else if (req.url.slice(0,6) === \"/login\") {\n    var username = 'meteor';\n    // get password from query string\n    var password = req.url.slice(7);\n    // realm is displayed in dialog box if one pops up, avoid confusion\n    var realm = TEST_RESPONDER_ROUTE+\"/login\";\n    var validate = function(user, pass) {\n      return user === username && pass === password;\n    };\n    var connect = WebAppInternals.NpmModules.connect.module;\n    var checker = connect.basicAuth(validate, realm);\n    var success = false;\n    checker(req, res, function() {\n      success = true;\n    });\n    if (! success)\n      return;\n  } else if (req.url === \"/headers\") {\n    res.statusCode = 201;\n    res.setHeader(\"A-Silly-Header\", \"Tis a\");\n    res.setHeader(\"Another-Silly-Header\", \"Silly place.\");\n    res.end(\"A RESPONSE WITH SOME HEADERS\");\n    return;\n  }\n\n  var chunks = [];\n  req.setEncoding(\"utf8\");\n  req.on(\"data\", function(chunk) {\n    chunks.push(chunk); });\n  req.on(\"end\", function() {\n    var body = chunks.join('');\n\n    if (body.charAt(0) === '{') {\n      body = JSON.parse(body);\n    }\n\n    var response_data = {\n      method: req.method,\n      url: req.url,\n      headers: req.headers,\n      body: body\n    };\n    var response_string = \"\";\n    if (req.method !== \"HEAD\")\n      response_string = JSON.stringify(response_data);\n\n    res.statusCode = 200;\n    res.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    res.end(response_string);\n  });\n\n};\n\nvar run_responder = function() {\n  WebApp.connectHandlers.stack.unshift(\n    { route: TEST_RESPONDER_ROUTE, handle: respond });\n};\n\nrun_responder();\n"]},"hash":"887eed5b32ec06b5c672db70e9d568302d60128d"}
