{"metadata":{"usedHelpers":["interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"semver","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"semver"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["checkNpmVersions"],"specifiers":[{"kind":"local","local":"checkNpmVersions","exported":"checkNpmVersions"}]}}},"options":{"filename":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","filenameRelative":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourceFileName":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"check-npm-versions"},"ignored":false,"code":"exports.__esModule = true;\nexports.checkNpmVersions = undefined;\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _underscore = require('meteor/underscore');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nvar compatibleVersionIsInstalled = function compatibleVersionIsInstalled(name, range) {\n  try {\n    var installedVersion = require(name + '/package.json').version;\n    if (_semver2['default'].satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e);\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nvar checkNpmVersions = exports.checkNpmVersions = function checkNpmVersions(packages, packageName) {\n  var failures = {};\n  _underscore._.forEach(packages, function (range, name) {\n    var failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_underscore._.keys(failures).length === 0) {\n    return true;\n  }\n\n  var errors = [];\n  _underscore._.forEach(failures, function (installed, name) {\n    var requirement = name + '@' + packages[name];\n\n    if (installed) {\n      errors.push(' - ' + name + '@' + installed + ' installed, ' + requirement + ' needed');\n    } else {\n      errors.push(' - ' + name + '@' + packages[name] + ' not installed.');\n    }\n  });\n\n  var qualifier = packageName ? '(for ' + packageName + ') ' : '';\n  console.warn('WARNING: npm peer requirements ' + qualifier + 'not installed:\\n' + errors.join('\\n') + '\\n\\nRead more about installing npm peer dependencies:\\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\\n');\n};","ast":null,"map":{"version":3,"sources":["/packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":[],"mappings":";;;AAAA;;;;AACA;;;;;;;;AAMA,IAAM,+BAA+B,SAA/B,4BAA+B,CAAC,IAAD,EAAO,KAAP,EAAiB;AACpD,MAAI;AACF,QAAM,mBAAmB,QAAW,sBAAX,EAAgC,OAAhC,CADvB;AAEF,QAAI,oBAAO,SAAP,CAAiB,gBAAjB,EAAmC,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP,CAD6C;KAA/C,MAEO;AACL,aAAO,gBAAP,CADK;KAFP;GAFF,CAOE,OAAO,CAAP,EAAU;AACV,YAAQ,GAAR,CAAY,CAAZ;;AADU,WAGH,KAAP,CAHU;GAAV;CARiC;;AAe9B,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,QAAD,EAAW,WAAX,EAA2B;AACzD,MAAM,WAAW,EAAX,CADmD;AAEzD,gBAAE,OAAF,CAAU,QAAV,EAAoB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACnC,QAAM,UAAU,6BAA6B,IAA7B,EAAmC,KAAnC,CAAV,CAD6B;AAEnC,QAAI,YAAY,IAAZ,EAAkB;AACpB,eAAS,IAAT,IAAiB,OAAjB,CADoB;KAAtB;GAFkB,CAApB,CAFyD;;AASzD,MAAI,cAAE,IAAF,CAAO,QAAP,EAAiB,MAAjB,KAA4B,CAA5B,EAA+B;AACjC,WAAO,IAAP,CADiC;GAAnC;;AAIA,MAAM,SAAS,EAAT,CAbmD;AAczD,gBAAE,OAAF,CAAU,QAAV,EAAoB,UAAC,SAAD,EAAY,IAAZ,EAAqB;AACvC,QAAM,cAAiB,aAAQ,SAAS,IAAT,CAAzB,CADiC;;AAGvC,QAAI,SAAJ,EAAe;AACb,aAAO,IAAP,SAAkB,aAAQ,6BAAwB,uBAAlD,EADa;KAAf,MAEO;AACL,aAAO,IAAP,SAAkB,aAAQ,SAAS,IAAT,qBAA1B,EADK;KAFP;GAHkB,CAApB,CAdyD;;AAwBzD,MAAM,YAAY,wBAAsB,kBAAtB,GAAwC,EAAxC,CAxBuC;AAyBzD,UAAQ,IAAR,qCAA+C,iCAC/C,OAAO,IAAP,CAAY,IAAZ,kIADA,EAzByD;CAA3B","file":"/packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e)\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]},"hash":"89385c83b12fda44f108f38b276fa5fefd3cc580"}
