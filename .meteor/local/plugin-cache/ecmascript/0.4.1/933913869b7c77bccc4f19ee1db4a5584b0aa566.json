{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"./ChatBoxItem.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ChatBoxItem"}]}],"exports":{"exported":["ChatBox"],"specifiers":[{"kind":"local","local":"ChatBox","exported":"default"}]}}},"options":{"filename":"/imports/ui/ChatBox.jsx","filenameRelative":"/imports/ui/ChatBox.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/ChatBox.jsx.map","sourceFileName":"/imports/ui/ChatBox.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ChatBox"},"ignored":false,"code":"exports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _meteor = require('meteor/meteor');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ChatBoxItem = require('./ChatBoxItem.jsx');\n\nvar _ChatBoxItem2 = _interopRequireDefault(_ChatBoxItem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar ChatBox = function (_Component) {\n  (0, _inherits3['default'])(ChatBox, _Component);\n\n  function ChatBox(props) {\n    (0, _classCallCheck3['default'])(this, ChatBox);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call(this, props));\n\n    _this.state = {\n      chatMsg: [],\n      friendName: ''\n    };\n    return _this;\n  }\n\n  ChatBox.prototype.renderChatList = function () {\n    function renderChatList() {\n      var msgs = this.state.msgs;\n      var name = this.state.name;\n      return msgs.map(function (msg) {\n        return _react2['default'].createElement(_ChatBoxItem2['default'], {\n          key: msg._id,\n          msg: msg,\n          name: name\n        });\n      });\n    }\n\n    return renderChatList;\n  }();\n\n  ChatBox.prototype.handleSubmit = function () {\n    function handleSubmit(event) {\n      event.preventDefault();\n      var text = _reactDom2['default'].findDOMNode(this.refs.textInput).value.trim();\n\n      var r_id = this.props.msgs[0].send_id === _meteor.Meteor.userId() ? this.props.msgs[0].recevier_id : this.props.msgs[0].send_id;\n      _meteor.Meteor.call('msgs.insert', text, r_id);\n\n      _reactDom2['default'].findDOMNode(this.refs.textInput).value = '';\n    }\n\n    return handleSubmit;\n  }();\n\n  ChatBox.prototype.render = function () {\n    function render() {\n      return _react2['default'].createElement(\n        'div',\n        { className: 'chat-box' },\n        _react2['default'].createElement(\n          'h1',\n          { className: 'chat-box-tit' },\n          this.props.name\n        ),\n        _react2['default'].createElement(\n          'ul',\n          { className: 'chat-list' },\n          this.renderChatList()\n        ),\n        _react2['default'].createElement(\n          'form',\n          { className: 'msg-send', onSubmit: this.handleSubmit.bind(this) },\n          _react2['default'].createElement('input', { type: 'text', ref: 'textInput', placeholder: 'Type to add new Msgs' })\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  ChatBox.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      var _this2 = this;\n\n      _meteor.Meteor.call('chatMsg', this.props.params.friendId, function (err, res) {\n        _this2.setState({ chatMsg: res });\n      });\n      _meteor.Meteor.call('findUser', this.props.friendId, function (err, res) {\n        _this2.setState({ friendName: res.username });\n      });\n    }\n\n    return componentWillMount;\n  }();\n\n  ChatBox.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps() {\n      var _this3 = this;\n\n      _meteor.Meteor.call('chatMsg', this.props.params.friendId, function (err, res) {\n        _this3.setState({ chatMsg: res });\n      });\n      _meteor.Meteor.call('findUser', this.props.params.friendId, function (err, res) {\n        _this3.setState({ friendName: res.username });\n      });\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  return ChatBox;\n}(_react.Component);\n\nexports['default'] = ChatBox;","ast":null,"map":{"version":3,"sources":["/imports/ui/ChatBox.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;;;IAEqB;;;AACnB,WADmB,OACnB,CAAY,KAAZ,EAAmB;2CADA,SACA;;kEACjB,sBAAM,KAAN,GADiB;;AAEjB,UAAK,KAAL,GAAa;AACX,eAAS,EAAT;AACA,kBAAY,EAAZ;KAFF,CAFiB;;GAAnB;;AADmB,oBASnB;8BAAiB;AACf,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CADI;AAEf,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAFI;AAGf,aAAO,KAAK,GAAL,CAAS,UAAC,GAAD,EAAS;AACvB,eACE;AACC,eAAK,IAAI,GAAJ;AACL,eAAK,GAAL;AACA,gBAAM,IAAN;SAHD,CADF,CADuB;OAAT,CAAhB,CAHe;;;;;;AATE,oBAuBnB;0BAAa,OAAO;AAClB,YAAM,cAAN,GADkB;AAElB,UAAM,OAAO,sBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAAV,CAArB,CAA0C,KAA1C,CAAgD,IAAhD,EAAP,CAFY;;AAIlB,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,OAAnB,KAA+B,eAAO,MAAP,EAA/B,GAAiD,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,WAAnB,GAAiC,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,OAAnB,CAJ3E;AAKlB,qBAAO,IAAP,CAAY,aAAZ,EAA2B,IAA3B,EAAiC,IAAjC,EALkB;;AAOlB,4BAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAAV,CAArB,CAA0C,KAA1C,GAAkD,EAAlD,CAPkB;;;;;;AAvBD,oBAiCnB;sBAAS;AACP,aACE;;UAAK,WAAU,UAAV,EAAL;QACE;;YAAI,WAAU,cAAV,EAAJ;UACI,KAAK,KAAL,CAAW,IAAX;SAFN;QAIE;;YAAI,WAAU,WAAV,EAAJ;UACI,KAAK,cAAL,EADJ;SAJF;QAOE;;YAAM,WAAU,UAAV,EAAqB,UAAU,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAV,EAA3B;UACE,4CAAO,MAAK,MAAL,EAAY,KAAI,WAAJ,EAAgB,aAAY,sBAAZ,EAAnC,CADF;SAPF;OADF,CADO;;;;;;AAjCU,oBAiDnB;kCAAqB;;;AACnB,qBAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,EAA4B,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/D,eAAK,QAAL,CAAc,EAAE,SAAS,GAAT,EAAhB,EAD+D;OAAd,CAAnD,CADmB;AAInB,qBAAO,IAAP,CAAY,UAAZ,EAAwB,KAAK,KAAL,CAAW,QAAX,EAAqB,UAAC,GAAD,EAAM,GAAN,EAAc;AACzD,eAAK,QAAL,CAAc,EAAE,YAAY,IAAI,QAAJ,EAA5B,EADyD;OAAd,CAA7C,CAJmB;;;;;;AAjDF,oBA0DnB;yCAA4B;;;AAC1B,qBAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,EAA4B,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/D,eAAK,QAAL,CAAc,EAAE,SAAS,GAAT,EAAhB,EAD+D;OAAd,CAAnD,CAD0B;AAI1B,qBAAO,IAAP,CAAY,UAAZ,EAAwB,KAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,EAA4B,UAAC,GAAD,EAAM,GAAN,EAAc;AAChE,eAAK,QAAL,CAAc,EAAE,YAAY,IAAI,QAAJ,EAA5B,EADgE;OAAd,CAApD,CAJ0B;;;;;;SA1DT","file":"/imports/ui/ChatBox.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Meteor } from 'meteor/meteor'\nimport classnames from 'classnames'\n\nimport ChatBoxItem from './ChatBoxItem.jsx'\n\nexport default class ChatBox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chatMsg: [],\n      friendName: ''\n    }\n  }\n\n  renderChatList() {\n    let msgs = this.state.msgs\n    let name = this.state.name\n    return msgs.map((msg) => {\n      return (\n        <ChatBoxItem\n         key={msg._id}\n         msg={msg}\n         name={name}\n        />\n      )\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim()\n    \n    let r_id = this.props.msgs[0].send_id === Meteor.userId() ? this.props.msgs[0].recevier_id : this.props.msgs[0].send_id\n    Meteor.call('msgs.insert', text, r_id)\n\n    ReactDOM.findDOMNode(this.refs.textInput).value = ''\n  }\n\n  render() {\n    return (\n      <div className=\"chat-box\">\n        <h1 className=\"chat-box-tit\">\n          { this.props.name }\n        </h1>\n        <ul className=\"chat-list\">\n          { this.renderChatList() }\n        </ul>\n        <form className=\"msg-send\" onSubmit={this.handleSubmit.bind(this)}>\n          <input type=\"text\" ref=\"textInput\" placeholder=\"Type to add new Msgs\"/>\n        </form>\n      </div>\n    )\n  }\n\n  componentWillMount() {\n    Meteor.call('chatMsg', this.props.params.friendId, (err, res) => {\n      this.setState({ chatMsg: res })\n    })\n    Meteor.call('findUser', this.props.friendId, (err, res) => {\n      this.setState({ friendName: res.username })\n    })\n  }\n\n  componentWillReceiveProps() {\n    Meteor.call('chatMsg', this.props.params.friendId, (err, res) => {\n      this.setState({ chatMsg: res })\n    })\n    Meteor.call('findUser', this.props.params.friendId, (err, res) => {\n      this.setState({ friendName: res.username })\n    })\n  }\n}\n"]},"hash":"933913869b7c77bccc4f19ee1db4a5584b0aa566"}
