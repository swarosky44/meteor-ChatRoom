{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../api/msgs.js","imported":["Msgs"],"specifiers":[{"kind":"named","imported":"Msgs","local":"Msgs"}]},{"source":"../api/users.js","imported":["Users"],"specifiers":[{"kind":"named","imported":"Users","local":"Users"}]},{"source":"./MsgBox.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MsgBox"}]},{"source":"../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./Task.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Task"}]},{"source":"./AccountsUIWrapper.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AccountsUIWrapper"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/App.jsx","filenameRelative":"/imports/ui/App.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/App.jsx.map","sourceFileName":"/imports/ui/App.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"App"},"ignored":false,"code":"exports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _meteor = require('meteor/meteor');\n\nvar _reactMeteorData = require('meteor/react-meteor-data');\n\nvar _msgs = require('../api/msgs.js');\n\nvar _users = require('../api/users.js');\n\nvar _MsgBox = require('./MsgBox.jsx');\n\nvar _MsgBox2 = _interopRequireDefault(_MsgBox);\n\nvar _tasks = require('../api/tasks.js');\n\nvar _Task = require('./Task.jsx');\n\nvar _Task2 = _interopRequireDefault(_Task);\n\nvar _AccountsUIWrapper = require('./AccountsUIWrapper.jsx');\n\nvar _AccountsUIWrapper2 = _interopRequireDefault(_AccountsUIWrapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nconsole.log(_meteor.Meteor.users.find().fetch(), 'xas');\n// App component - represents the whole app\n\nvar App = function (_Component) {\n  (0, _inherits3['default'])(App, _Component);\n\n  function App(props) {\n    (0, _classCallCheck3['default'])(this, App);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call(this, props));\n\n    _this.state = {\n      hideCompleted: false\n    };\n    return _this;\n  }\n\n  App.prototype.handleSubmit = function () {\n    function handleSubmit(event) {\n      event.preventDefault();\n\n      // Find the text field via the React ref\n      var text = _reactDom2['default'].findDOMNode(this.refs.textInput).value.trim();\n\n      _meteor.Meteor.call('tasks.insert', text);\n\n      // Clear form\n      _reactDom2['default'].findDOMNode(this.refs.textInput).value = '';\n    }\n\n    return handleSubmit;\n  }();\n\n  App.prototype.toggleHideCompleted = function () {\n    function toggleHideCompleted() {\n      this.setState({\n        hideCompleted: !this.state.hideCompleted\n      });\n    }\n\n    return toggleHideCompleted;\n  }();\n\n  App.prototype.renderTasks = function () {\n    function renderTasks() {\n      var _this2 = this;\n\n      var filteredTasks = this.props.tasks;\n      if (this.state.hideCompleted) {\n        filteredTasks = filteredTasks.filter(function (task) {\n          return !task.checked;\n        });\n      }\n      return filteredTasks.map(function (task) {\n        var currentUserId = _this2.props.currentUser && _this2.props.currentUser._id;\n        var showPrivateButton = task.owner === currentUserId;\n\n        return _react2['default'].createElement(_Task2['default'], {\n          key: task._id,\n          task: task,\n          showPrivateButton: showPrivateButton\n        });\n      });\n    }\n\n    return renderTasks;\n  }();\n\n  App.prototype.render = function () {\n    function render() {\n      return _react2['default'].createElement(\n        'div',\n        { className: 'container' },\n        _react2['default'].createElement(_MsgBox2['default'], { msgs: this.props.msgs }),\n        _react2['default'].createElement(\n          'header',\n          null,\n          _react2['default'].createElement(\n            'h1',\n            null,\n            'Todo List (',\n            this.props.incompleteCount,\n            ')'\n          ),\n          _react2['default'].createElement(\n            'label',\n            { className: 'hide-completed' },\n            _react2['default'].createElement('input', {\n              type: 'checkbox',\n              readOnly: true,\n              checked: this.state.hideCompleted,\n              onClick: this.toggleHideCompleted.bind(this)\n            }),\n            'Hide Completed Tasks'\n          ),\n          _react2['default'].createElement(_AccountsUIWrapper2['default'], null),\n          this.props.currentUser ? _react2['default'].createElement(\n            'form',\n            { className: 'new-task', onSubmit: this.handleSubmit.bind(this) },\n            _react2['default'].createElement('input', {\n              type: 'text',\n              ref: 'textInput',\n              placeholder: 'Type to add new tasks'\n            })\n          ) : ''\n        ),\n        _react2['default'].createElement(\n          'ul',\n          null,\n          this.renderTasks()\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return App;\n}(_react.Component);\n\nApp.propTypes = {\n  msgs: _react.PropTypes.array.isRequired,\n  tasks: _react.PropTypes.array.isRequired,\n  incompleteCount: _react.PropTypes.number.isRequired,\n  currentUser: _react.PropTypes.object\n};\n\nexports['default'] = (0, _reactMeteorData.createContainer)(function () {\n  _meteor.Meteor.subscribe('tasks');\n  _meteor.Meteor.subscribe('msgs');\n  _meteor.Meteor.subscribe('users');\n  console.log(_msgs.Msgs.find({}).fetch(), '___Msgs');\n  return {\n    msgs: _msgs.Msgs.find({}).fetch(),\n    tasks: _tasks.Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n    incompleteCount: _tasks.Tasks.find({ checked: { $ne: true } }).count(),\n    currentUser: _meteor.Meteor.user()\n  };\n}, App);","ast":null,"map":{"version":3,"sources":["/imports/ui/App.jsx"],"names":[],"mappings":"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","file":"/imports/ui/App.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Meteor } from 'meteor/meteor';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Msgs } from '../api/msgs.js'\nimport { Users } from '../api/users.js'\nimport MsgBox from './MsgBox.jsx'\nimport { Tasks } from '../api/tasks.js';\nimport Task from './Task.jsx';\nimport AccountsUIWrapper from './AccountsUIWrapper.jsx';\nconsole.log(Meteor.users.find().fetch(), 'xas')\n// App component - represents the whole app\nclass App extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      hideCompleted: false,\n    };\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n \n    // Find the text field via the React ref\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n    \n    Meteor.call('tasks.insert', text);\n\n    // Clear form\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n  }\n\n  toggleHideCompleted() {\n    this.setState({\n      hideCompleted: !this.state.hideCompleted,\n    });\n  }\n\n  renderTasks() {\n    let filteredTasks = this.props.tasks;\n    if (this.state.hideCompleted) {\n      filteredTasks = filteredTasks.filter(task => !task.checked);\n    }\n    return filteredTasks.map((task) => {\n      const currentUserId = this.props.currentUser && this.props.currentUser._id;\n      const showPrivateButton = task.owner === currentUserId;\n \n      return (\n        <Task\n          key={task._id}\n          task={task}\n          showPrivateButton={showPrivateButton}\n        />\n      );\n    });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <MsgBox msgs={ this.props.msgs }/>\n        <header>\n          <h1>Todo List ({this.props.incompleteCount})</h1>\n          \n          <label className=\"hide-completed\">\n            <input\n              type=\"checkbox\"\n              readOnly\n              checked={this.state.hideCompleted}\n              onClick={this.toggleHideCompleted.bind(this)}\n            />\n            Hide Completed Tasks\n          </label>\n\n          <AccountsUIWrapper />\n\n          { this.props.currentUser ?\n            <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)} >\n              <input\n                type=\"text\"\n                ref=\"textInput\"\n                placeholder=\"Type to add new tasks\"\n              />\n            </form> : ''\n          }\n        </header>\n \n        <ul>\n          {this.renderTasks()}\n        </ul>\n      </div>\n\n    );\n  }\n}\n \nApp.propTypes = {\n  msgs: PropTypes.array.isRequired,\n  tasks: PropTypes.array.isRequired,\n  incompleteCount: PropTypes.number.isRequired,\n  currentUser: PropTypes.object,\n};\n \nexport default createContainer(() => {\n  Meteor.subscribe('tasks');\n  Meteor.subscribe('msgs');\n  Meteor.subscribe('users');\n  console.log(Msgs.find({}).fetch(),'___Msgs')\n  return {\n    msgs: Msgs.find({}).fetch(),\n    tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n    incompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\n    currentUser: Meteor.user(),\n  };\n}, App);"]},"hash":"982beda79cb8a9aab1392d9642f579606d05559e"}
