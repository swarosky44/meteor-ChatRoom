{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"./ChatBoxItem.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ChatBoxItem"}]},{"source":"../api/users.js","imported":["Users"],"specifiers":[{"kind":"named","imported":"Users","local":"Users"}]},{"source":"../api/msgs.js","imported":["Msgs"],"specifiers":[{"kind":"named","imported":"Msgs","local":"Msgs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/ChatBox.jsx","filenameRelative":"/imports/ui/ChatBox.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/ChatBox.jsx.map","sourceFileName":"/imports/ui/ChatBox.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ChatBox"},"ignored":false,"code":"exports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactMeteorData = require('meteor/react-meteor-data');\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _meteor = require('meteor/meteor');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ChatBoxItem = require('./ChatBoxItem.jsx');\n\nvar _ChatBoxItem2 = _interopRequireDefault(_ChatBoxItem);\n\nvar _users = require('../api/users.js');\n\nvar _msgs = require('../api/msgs.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar ChatBox = function (_Component) {\n  (0, _inherits3['default'])(ChatBox, _Component);\n\n  function ChatBox() {\n    (0, _classCallCheck3['default'])(this, ChatBox);\n    return (0, _possibleConstructorReturn3['default'])(this, _Component.apply(this, arguments));\n  }\n\n  ChatBox.prototype.renderChatList = function () {\n    function renderChatList() {\n      console.log(this.props.msgs, 'msgs');\n      console.log(this.props.friendName, 'friendName');\n      var msgs = this.props.msgs;\n      var friendName = this.props.friend && this.props.friend.username;\n      if (!friendName) return;\n      return msgs.map(function (msg) {\n        return _react2['default'].createElement(_ChatBoxItem2['default'], {\n          key: msg._id,\n          msg: msg,\n          friendName: friendName\n        });\n      });\n    }\n\n    return renderChatList;\n  }();\n\n  ChatBox.prototype.handleSubmit = function () {\n    function handleSubmit(event) {\n      event.preventDefault();\n      var text = _reactDom2['default'].findDOMNode(this.refs.textInput).value.trim();\n      var r_id = this.props.msgs[0].send_id === _meteor.Meteor.userId() ? this.props.msgs[0].recevier_id : this.props.msgs[0].send_id;\n      _meteor.Meteor.call('msgs.insert', text, r_id);\n      _reactDom2['default'].findDOMNode(this.refs.textInput).value = '';\n    }\n\n    return handleSubmit;\n  }();\n\n  ChatBox.prototype.render = function () {\n    function render() {\n      return _react2['default'].createElement(\n        'div',\n        { className: 'chat-box' },\n        _react2['default'].createElement('h1', { className: 'chat-box-tit' }),\n        _react2['default'].createElement(\n          'ul',\n          { className: 'chat-list' },\n          this.renderChatList()\n        ),\n        _react2['default'].createElement(\n          'form',\n          { className: 'msg-send', onSubmit: this.handleSubmit.bind(this) },\n          _react2['default'].createElement('input', { type: 'text', ref: 'textInput', placeholder: 'Type to add new Msgs' })\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return ChatBox;\n}(_react.Component);\n\nChatBox.propTypes = {\n  msgs: _react.PropTypes.array.isRequired,\n  friend: _react.PropTypes.object\n};\n\nexports['default'] = (0, _reactMeteorData.createContainer)(function () {\n  var friendId = this.location.pathname.substr(1);\n  _meteor.Meteor.subscribe('findUsers');\n  _meteor.Meteor.subscribe('chatMsgs');\n  return {\n    msgs: _msgs.Msgs.find({\n      $or: [{ send_id: _meteor.Meteor.userId(), recevier_id: friendId }, { send_id: friendId, recevier_id: _meteor.Meteor.userId() }]\n    }).fetch(),\n    friend: _users.Users.findOne({\n      _id: friendId\n    })\n  };\n}, ChatBox);","ast":null,"map":{"version":3,"sources":["/imports/ui/ChatBox.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;IAEM;;;;;;;;oBACJ;8BAAiB;AACf,cAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,IAAX,EAAiB,MAA7B,EADe;AAEf,cAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,UAAX,EAAuB,YAAnC,EAFe;AAGf,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAHI;AAIf,UAAI,aAAa,KAAK,KAAL,CAAW,MAAX,IAAqB,KAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,CAJvB;AAKf,UAAG,CAAC,UAAD,EAAa,OAAhB;AACA,aAAO,KAAK,GAAL,CAAS,UAAC,GAAD,EAAS;AACvB,eACE;AACC,eAAK,IAAI,GAAJ;AACL,eAAK,GAAL;AACA,sBAAY,UAAZ;SAHD,CADF,CADuB;OAAT,CAAhB,CANe;;;;;;AADb,oBAkBJ;0BAAa,OAAO;AAClB,YAAM,cAAN,GADkB;AAElB,UAAM,OAAO,sBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAAV,CAArB,CAA0C,KAA1C,CAAgD,IAAhD,EAAP,CAFY;AAGlB,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,OAAnB,KAA+B,eAAO,MAAP,EAA/B,GAAiD,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,WAAnB,GAAiC,KAAK,KAAL,CAAW,IAAX,CAAgB,CAAhB,EAAmB,OAAnB,CAH3E;AAIlB,qBAAO,IAAP,CAAY,aAAZ,EAA2B,IAA3B,EAAiC,IAAjC,EAJkB;AAKlB,4BAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAAV,CAArB,CAA0C,KAA1C,GAAkD,EAAlD,CALkB;;;;;;AAlBhB,oBA0BJ;sBAAS;AACP,aACE;;UAAK,WAAU,UAAV,EAAL;QACE,yCAAI,WAAU,cAAV,EAAJ,CADF;QAIE;;YAAI,WAAU,WAAV,EAAJ;UACI,KAAK,cAAL,EADJ;SAJF;QAOE;;YAAM,WAAU,UAAV,EAAqB,UAAU,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAV,EAA3B;UACE,4CAAO,MAAK,MAAL,EAAY,KAAI,WAAJ,EAAgB,aAAY,sBAAZ,EAAnC,CADF;SAPF;OADF,CADO;;;;;;SA1BL;;;AA4CN,QAAQ,SAAR,GAAoB;AAClB,QAAM,iBAAU,KAAV,CAAgB,UAAhB;AACN,UAAQ,iBAAU,MAAV;CAFV;;qBAKe,sCAAgB,YAAW;AACxC,MAAI,WAAW,KAAK,QAAL,CAAc,QAAd,CAAuB,MAAvB,CAA8B,CAA9B,CAAX,CADoC;AAExC,iBAAO,SAAP,CAAiB,WAAjB,EAFwC;AAGxC,iBAAO,SAAP,CAAiB,UAAjB,EAHwC;AAIxC,SAAO;AACL,UAAM,WAAK,IAAL,CAAU;AACd,WAAK,CACH,EAAC,SAAS,eAAO,MAAP,EAAT,EAA0B,aAAa,QAAb,EADxB,EAEH,EAAC,SAAS,QAAT,EAAmB,aAAa,eAAO,MAAP,EAAb,EAFjB,CAAL;KADI,EAKH,KALG,EAAN;AAMA,YAAQ,aAAM,OAAN,CAAc;AACpB,WAAK,QAAL;KADM,CAAR;GAPF,CAJwC;CAAX,EAe5B,OAfY","file":"/imports/ui/ChatBox.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { createContainer } from 'meteor/react-meteor-data'\nimport ReactDOM from 'react-dom'\nimport { Meteor } from 'meteor/meteor'\nimport classnames from 'classnames'\nimport ChatBoxItem from './ChatBoxItem.jsx'\nimport { Users } from \"../api/users.js\"\nimport { Msgs } from \"../api/msgs.js\"\n\nclass ChatBox extends Component {\n  renderChatList() {\n    console.log(this.props.msgs, 'msgs')\n    console.log(this.props.friendName, 'friendName')\n    let msgs = this.props.msgs\n    let friendName = this.props.friend && this.props.friend.username\n    if(!friendName) return\n    return msgs.map((msg) => {\n      return (\n        <ChatBoxItem\n         key={msg._id}\n         msg={msg}\n         friendName={friendName}\n        />\n      )\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim()\n    let r_id = this.props.msgs[0].send_id === Meteor.userId() ? this.props.msgs[0].recevier_id : this.props.msgs[0].send_id\n    Meteor.call('msgs.insert', text, r_id)\n    ReactDOM.findDOMNode(this.refs.textInput).value = ''\n  }\n\n  render() {\n    return (\n      <div className=\"chat-box\">\n        <h1 className=\"chat-box-tit\">\n          \n        </h1>\n        <ul className=\"chat-list\">\n          { this.renderChatList() }\n        </ul>\n        <form className=\"msg-send\" onSubmit={this.handleSubmit.bind(this)}>\n          <input type=\"text\" ref=\"textInput\" placeholder=\"Type to add new Msgs\"/>\n        </form>\n      </div>\n    )\n  } \n}\n\n\nChatBox.propTypes = {\n  msgs: PropTypes.array.isRequired,\n  friend: PropTypes.object\n}\n\nexport default createContainer(function() {\n  let friendId = this.location.pathname.substr(1)\n  Meteor.subscribe('findUsers')\n  Meteor.subscribe('chatMsgs')\n  return {\n    msgs: Msgs.find({\n      $or: [\n        {send_id: Meteor.userId(), recevier_id: friendId}, \n        {send_id: friendId, recevier_id: Meteor.userId()}\n      ] \n    }).fetch(),\n    friend: Users.findOne({\n      _id: friendId\n    })\n  }\n}, ChatBox)\n"]},"hash":"a96b7f6cc242297229436b42384baace49f8f15c"}
