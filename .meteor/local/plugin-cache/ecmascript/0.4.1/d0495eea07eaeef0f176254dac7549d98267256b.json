{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Msgs"],"specifiers":[{"kind":"local","local":"Msgs","exported":"Msgs"}]}}},"options":{"filename":"/imports/api/msgs.js","filenameRelative":"/imports/api/msgs.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/msgs.js.map","sourceFileName":"/imports/api/msgs.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"msgs"},"ignored":false,"code":"exports.__esModule = true;\nexports.Msgs = undefined;\n\nvar _meteor = require('meteor/meteor');\n\nvar _mongo = require('meteor/mongo');\n\nvar _check = require('meteor/check');\n\nvar Msgs = exports.Msgs = new _mongo.Mongo.Collection('msgs');\nif (_meteor.Meteor.isServer) {\n  _meteor.Meteor.publish('msgs', function () {\n    function msgsPublication() {\n      return Msgs.find({\n        $or: [{ send_id: this.userId }, { recevier_id: this.userId }]\n      });\n    }\n\n    return msgsPublication;\n  }());\n  _meteor.Meteor.publish('chatMsgs', function () {\n    function chatMsgsPublication() {\n      return Msgs.find({\n        $or: [{ send_id: this.userId, recevier_id: friend_id }, { send_id: friend_id, recevier_id: this.userId }]\n      }).fetch();\n    }\n\n    return chatMsgsPublication;\n  }());\n}\n_meteor.Meteor.methods({\n  'msgs.insert': function () {\n    function msgsInsert(text, r_id) {\n      (0, _check.check)(text, String);\n\n      if (!_meteor.Meteor.userId()) {\n        throw new _meteor.Meteor.Error('not-authorized');\n      }\n\n      Msgs.insert({\n        send_id: _meteor.Meteor.userId(),\n        recevier_id: r_id,\n        content: text,\n        time: new Date(),\n        isUnread: true\n      });\n    }\n\n    return msgsInsert;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/msgs.js"],"names":[],"mappings":";;;AAAA;;AACA;;AACA;;AAEO,IAAM,sBAAO,IAAI,aAAM,UAAN,CAAiB,MAArB,CAAP;AACb,IAAI,eAAO,QAAP,EAAiB;AACnB,iBAAO,OAAP,CAAe,MAAf;AAAuB,aAAS,eAAT,GAA2B;AAChD,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAE,SAAS,KAAK,MAAL,EADR,EAEH,EAAE,aAAa,KAAK,MAAL,EAFZ,CAAL;OADK,CAAP,CADgD;KAA3B;;WAAS;KAAhC,EADmB;AASnB,iBAAO,OAAP,CAAe,UAAf;AAA2B,aAAS,mBAAT,GAA+B;AACxD,aAAO,KAAK,IAAL,CAAU;AACf,aAAK,CACH,EAAC,SAAS,KAAK,MAAL,EAAa,aAAa,SAAb,EADpB,EAEH,EAAC,SAAS,SAAT,EAAoB,aAAa,KAAK,MAAL,EAF/B,CAAL;OADK,EAKJ,KALI,EAAP,CADwD;KAA/B;;WAAS;KAApC,EATmB;CAArB;AAkBA,eAAO,OAAP,CAAe;AACb;wBAAc,MAAM,MAAM;AACxB,wBAAM,IAAN,EAAY,MAAZ,EADwB;;AAGxB,UAAI,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;;AAIA,WAAK,MAAL,CAAY;AACV,iBAAS,eAAO,MAAP,EAAT;AACA,qBAAa,IAAb;AACA,iBAAS,IAAT;AACA,cAAM,IAAI,IAAJ,EAAN;AACA,kBAAU,IAAV;OALF,EAPwB;;;;KADb;CAAf","file":"/imports/api/msgs.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport { Mongo } from 'meteor/mongo'\nimport { check } from 'meteor/check'\n \nexport const Msgs = new Mongo.Collection('msgs');\nif (Meteor.isServer) {\n  Meteor.publish('msgs', function msgsPublication() {\n    return Msgs.find({\n      $or: [\n        { send_id: this.userId },\n        { recevier_id: this.userId },\n      ],\n    })\n  })\n  Meteor.publish('chatMsgs', function chatMsgsPublication() {\n    return Msgs.find({\n      $or: [\n        {send_id: this.userId, recevier_id: friend_id}, \n        {send_id: friend_id, recevier_id: this.userId}\n      ] \n    }).fetch()\n  })\n} \nMeteor.methods({\n  'msgs.insert'(text, r_id) {\n    check(text, String)\n\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized')\n    }\n\n    Msgs.insert({\n      send_id: Meteor.userId(),\n      recevier_id: r_id,\n      content: text,\n      time: new Date(),\n      isUnread: true\n    })\n  }\n})"]},"hash":"d0495eea07eaeef0f176254dac7549d98267256b"}
