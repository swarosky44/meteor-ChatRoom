{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ddp-server/stream_server.js","filenameRelative":"/packages/ddp-server/stream_server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ddp-server/stream_server.js.map","sourceFileName":"/packages/ddp-server/stream_server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"stream_server"},"ignored":false,"code":"var url = Npm.require('url');\n\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(websocketCompressionConfig));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";\n\nStreamServer = function StreamServer() {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function () {\n      function log() {}\n\n      return log;\n    }(),\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener('request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener('request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // XXX COMPAT WITH 0.6.6. Send the old style welcome message, which\n    // will force old clients to reload. Remove this once we're not\n    // concerned about people upgrading from a pre-0.7.0 release. Also,\n    // remove the clause in the client that ignores the welcome message\n    // (livedata_connection.js)\n    socket.send(JSON.stringify({ server_id: \"0\" }));\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n};\n\n_.extend(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function () {\n    function register(callback) {\n      var self = this;\n      self.registration_callbacks.push(callback);\n      _.each(self.all_sockets(), function (socket) {\n        callback(socket);\n      });\n    }\n\n    return register;\n  }(),\n\n  // get a list of all sockets\n  all_sockets: function () {\n    function all_sockets() {\n      var self = this;\n      return _.values(self.open_sockets);\n    }\n\n    return all_sockets;\n  }(),\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function () {\n    function _redirectWebsocketEndpoint() {\n      var self = this;\n      // Unfortunately we can't use a connect middleware here since\n      // sockjs installs itself prior to all existing listeners\n      // (meaning prior to any connect middlewares) so we need to take\n      // an approach similar to overshadowListeners in\n      // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n      _.each(['request', 'upgrade'], function (event) {\n        var httpServer = WebApp.httpServer;\n        var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n        httpServer.removeAllListeners(event);\n\n        // request and upgrade have different arguments passed but\n        // we only care about the first one which is always request\n        var newListener = function () {\n          function newListener(request /*, moreArguments */) {\n            // Store arguments for use within the closure below\n            var args = arguments;\n\n            // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n            // preserving query string.\n            var parsedUrl = url.parse(request.url);\n            if (parsedUrl.pathname === pathPrefix + '/websocket' || parsedUrl.pathname === pathPrefix + '/websocket/') {\n              parsedUrl.pathname = self.prefix + '/websocket';\n              request.url = url.format(parsedUrl);\n            }\n            _.each(oldHttpServerListeners, function (oldListener) {\n              oldListener.apply(httpServer, args);\n            });\n          }\n\n          return newListener;\n        }();\n        httpServer.addListener(event, newListener);\n      });\n    }\n\n    return _redirectWebsocketEndpoint;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/ddp-server/stream_server.js"],"names":[],"mappings":"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","file":"/packages/ddp-server/stream_server.js.map","sourcesContent":["var url = Npm.require('url');\n\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // XXX COMPAT WITH 0.6.6. Send the old style welcome message, which\n    // will force old clients to reload. Remove this once we're not\n    // concerned about people upgrading from a pre-0.7.0 release. Also,\n    // remove the clause in the client that ignores the welcome message\n    // (livedata_connection.js)\n    socket.send(JSON.stringify({server_id: \"0\"}));\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\n_.extend(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    _.each(['request', 'upgrade'], function(event) {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n"]},"hash":"e2d81b6c737e1b27ce159fa43051b48ad2e3be5a"}
